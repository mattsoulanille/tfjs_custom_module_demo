!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";class e{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class t{decComplexRef(e){}time(e){return n("time")}read(e){return n("read")}readSync(e){return n("readSync")}numDataIds(){return n("numDataIds")}disposeData(e){return n("disposeData")}write(e,t,s){return n("write")}move(e,t,s,a){return n("move")}memory(){return n("memory")}floatPrecision(){return n("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return n("dispose")}}function n(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function s(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function a(e,t,n){return Math.max(e,Math.min(t,n))}function r(e){return e%2==0?e:e+1}function i(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function o(e,t,n=""){i(h(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function l(e){i(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function u(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||v(e)&&!n)for(let s=0;s<e.length;++s)u(e[s],t,n);else t.push(e);return t}function c(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function h(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function p(e){return e%1==0}function d(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function f(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function m(e,t=(e=>0),n){return new Promise(((s,a)=>{let r=0;const i=()=>{if(e())return void s();r++;const o=t(r);null!=n&&r>=n?a():setTimeout(i,o)};i()}))}function g(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function y(e,t){const n=t.length;return i((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),i(e.every((e=>p(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function b(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:y(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[i]||r[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function x(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function w(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function v(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function N(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function I(e){return"string"==typeof e||e instanceof String}function $(e){return"number"==typeof e}function C(e){return Array.isArray(e)?C(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":$(e)?"float32":I(e)?"string":"boolean"==typeof e?"bool":"float32"}function T(e){return!!(e&&e.constructor&&e.call&&e.apply)}function S(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function E(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function A(e,t,n){const s=new Array;if(1===t.length){const a=t[0];for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],r=t.slice(1),i=r.reduce(((e,t)=>e*t));for(let t=0;t<a;t++)s[t]=A(e+t*i,r,n)}return s}function R(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return A(0,e,t)}function F(e,t){const n=D(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function D(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function _(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return R(e,new Float32Array(n));if("int32"===t)return R(e,new Int32Array(n));if("bool"===t)return R(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function O(e){e.forEach((t=>{i(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function M(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function L(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function z(e){return e&&e.then&&"function"==typeof e.then}const B="tfjsflags";class P{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(z(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);if(B in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function W(){return U}let V,U=null;function G(){if(null==V){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}V=e}return V}function H(e,t){const n=function(){const e=G();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const j="Abs",K="Acos",q="Acosh",X="Add",Y="AddN",J="All",Z="Any",Q="ArgMax",ee="ArgMin",te="Asin",ne="Asinh",se="Atan",ae="Atanh",re="Atan2",ie="AvgPool",oe="AvgPoolGrad",le="AvgPool3D",ue="AvgPool3DGrad",ce="BatchMatMul",he="BatchToSpaceND",pe="Bincount",de="Cast",fe="Ceil",me="ClipByValue",ge="Complex",ye="ComplexAbs",be="Concat",xe="Conv2D",ke="Conv2DBackpropFilter",we="Conv2DBackpropInput",ve="Conv3D",Ne="Conv3DBackpropFilterV2",Ie="Conv3DBackpropInputV2",$e="Cos",Ce="Cosh",Te="Cumsum",Se="CropAndResize",Ee="DenseBincount",Ae="DepthToSpace",Re="DepthwiseConv2dNative",Fe="DepthwiseConv2dNativeBackpropFilter",De="DepthwiseConv2dNativeBackpropInput",_e="Diag",Oe="Dilation2D",Me="Dilation2DBackpropInput",Le="Dilation2DBackpropFilter",ze="RealDiv",Be="Elu",Pe="EluGrad",We="Erf",Ve="Equal",Ue="Exp",Ge="ExpandDims",He="Expm1",je="FFT",Ke="Fill",qe="FlipLeftRight",Xe="Floor",Ye="FloorDiv",Je="FusedBatchNorm",Ze="GatherV2",Qe="GatherNd",et="Greater",tt="GreaterEqual",nt="Identity",st="IFFT",at="Imag",rt="IsFinite",it="IsInf",ot="IsNan",lt="LeakyRelu",ut="Less",ct="LessEqual",ht="LinSpace",pt="Log",dt="Log1p",ft="LogicalAnd",mt="LogicalNot",gt="LogicalOr",yt="LRN",bt="LRNGrad",xt="Max",kt="Maximum",wt="MaxPool",vt="MaxPoolGrad",Nt="MaxPool3D",It="MaxPool3DGrad",$t="MaxPoolWithArgmax",Ct="Mean",Tt="Min",St="Minimum",Et="MirrorPad",At="Mod",Rt="Multinomial",Ft="Multiply",Dt="Neg",_t="NotEqual",Ot="NonMaxSuppressionV3",Mt="NonMaxSuppressionV4",Lt="NonMaxSuppressionV5",zt="OnesLike",Bt="OneHot",Pt="Pack",Wt="PadV2",Vt="Pow",Ut="Prelu",Gt="Prod",Ht="Range",jt="Real",Kt="Reciprocal",qt="Relu",Xt="Reshape",Yt="ResizeNearestNeighbor",Jt="ResizeNearestNeighborGrad",Zt="ResizeBilinear",Qt="ResizeBilinearGrad",en="Relu6",tn="Reverse",nn="Round",sn="Rsqrt",an="ScatterNd",rn="Select",on="Selu",ln="Slice",un="Sin",cn="Sinh",hn="Sign",pn="Sigmoid",dn="Softplus",fn="Sqrt",mn="Sum",gn="SpaceToBatchND",yn="SplitV",bn="Softmax",xn="SquaredDifference",kn="Square",wn="Sub",vn="SparseToDense",Nn="StridedSlice",In="Tan",$n="Tanh",Cn="Tile",Tn="TopK",Sn="Transpose",En="Unique",An="Unpack",Rn="UnsortedSegmentSum",Fn="ZerosLike",Dn="Step",_n="FromPixels",On="RotateWithOffset",Mn="_FusedMatMul",Ln="FusedConv2D",zn="FusedDepthwiseConv2D",Bn=H("kernelRegistry",(()=>new Map)),Pn=H("gradRegistry",(()=>new Map));function Wn(e,t){const n=jn(e,t);return Bn.get(n)}function Vn(e){return Pn.get(e)}function Un(e){const t=Bn.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,i]=a,[o]=r.split("_");o===e&&n.push(i)}return n}function Gn(e){const{kernelName:t,backendName:n}=e,s=jn(t,n);Bn.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Bn.set(s,e)}function Hn(e){const{kernelName:t}=e;Pn.has(t)&&W().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Pn.set(t,e)}function jn(e,t){return`${t}_${e}`}function Kn(e,t){return"string"===t?Yn(e):qn([e],t)}function qn(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=u(e)),W().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Xn(){return W().platform.now()}function Yn(e,t="utf-8"){return t=t||"utf-8",W().platform.encode(e,t)}function Jn(e,t="utf-8"){return t=t||"utf-8",W().platform.decode(e,t)}class Zn{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new es)}profileKernel(e,t,n){let s;const a=this.backendTimer.time((()=>{s=n()}));if(W().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Qn(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function Qn(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class es{logKernelProfile(e,t,n,s,a,r){const i="number"==typeof s?f(`${s}ms`,9):s.error,o=f(e,25),l=t.rank,u=t.size,c=f(t.shape.toString(),14);let h="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;h+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ts(e,t,n,s){const a=E(t),r=function(e,t,n,s){const a=c(t),r=s[s.length-1],i=new Array(r).fill(0),o=t.length,l="complex64"===n?rs(e):e;if(o>1)for(let e=0;e<a/r;e++){const t=e*r;for(let e=0;e<r;e++)i[e]=Math.max(i[e],ns(l[t+e],0,n).length)}return i}(e,t,n,a),i=t.length,o=as(e,t,n,a,r),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function ns(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:I(e)?`'${e}'`:"bool"===n?ss(e):parseFloat(e.toFixed(7)).toString(),f(s,t)}function ss(e){return 0===e?"false":"true"}function as(e,t,n,s,a,r=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[ns(rs(e)[0],0,n)]}return"bool"===n?[ss(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=rs(s),r=rs(r)),["["+s.map(((e,t)=>ns(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>ns(e,a[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?rs(e):Array.from(e)).map(((e,t)=>ns(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,r=s+h;p.push(...as(e.slice(s,r),u,n,c,a,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,r=s+h;p.push(...as(e.slice(s,r),u,n,c,a,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,r=s+h;p.push(...as(e.slice(s,r),u,n,c,a,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(r?"":f),p}function rs(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class is{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=c(e),null!=n){const e=n.length;i(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||k(t,this.size),this.strides=E(e)}set(e,...t){0===t.length&&(t=[0]),i(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return os().makeTensor(this.values,this.shape,this.dtype)}}let os=null,ls=null;class us{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=c(e),this.strides=E(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ls.buffer(this.shape,this.dtype,e)}bufferSync(){return ls.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return R(this.shape,e)}arraySync(){return R(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=os().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Jn(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=os().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Jn(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await os().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(os().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ls.print(this,e)}clone(){return this.throwIfDisposed(),ls.clone(this)}toString(e=!1){return ts(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ls.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),os().makeVariable(this,e,t,n)}}function cs(){return H("Tensor",(()=>us))}Object.defineProperty(us,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),cs();class hs extends us{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!h(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);os().disposeTensor(this),this.dataId=e.dataId,os().incRef(this,null)}dispose(){os().disposeVariable(this),this.isDisposedInternal=!0}}var ps,ds,fs,ms,gs;Object.defineProperty(hs,Symbol.hasInstance,{value:e=>e instanceof us&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ps||(ps={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ds||(ds={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(fs||(fs={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ms||(ms={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(gs||(gs={}));const ys={float32:ms,int32:ds,bool:fs,complex64:gs};function bs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ys[e][t]}function xs(e){return bs(e,"int32")}function ks(e,t){if(e.dtype===t.dtype)return[e,t];const n=bs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ws(e){const t=[];return vs(e,t,new Set),t}function vs(e,t,n){if(null==e)return;if(e instanceof us)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),vs(s,t,n))}}function Ns(e){return null!=e.kernelName}class Is{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class $s{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Is}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Zn(this.backendInstance),!0}setupRegisteredKernels(){Un(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Un(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const n=this.registryFactory[e];if(null==n)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=n.factory();if(!s||s instanceof t||"function"!=typeof s.then)return this.registry[e]=s,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=s.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t);s.disposeData(t),n.backend=e,e.move(t,a,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return $s.nextTensorId++}nextVariableId(){return $s.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Ts.runKernel(de,t,n)}})),[],{}),t}runKernel(e,t,n){if(!(null!=Wn(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-a-r;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let o,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Ns(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Ns(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const u=Wn(t,this.backendName);i(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();l=u.kernelFunc({inputs:a,attrs:r,backend:this.backend});const i=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,a,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();l=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:c,attrs:h}=e,p=Ns(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,c,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),s&&this.addTapeNode(u,c,t,p,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Vn(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(i(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return r.concat(o)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&I(e[0])&&(a=e.map((e=>Yn(e))));const r=s.write(a,t,n),i=new us(t,n,r,this.nextTensorId());if(this.incRef(i,s),"string"===n){const e=this.state.tensorInfo.get(r),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const a=new us(t,n=n||"float32",e,this.nextTensorId());return this.incRef(a,s),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new hs(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*N(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof hs||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},o=Vn(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=D(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=ws(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(i(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));i(a instanceof us,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],i=r.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),o=!0,a[r.id]=!0;break}if(o)break}}const r={};r[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=F(c(e),"float32");return Ts.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],i=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const o=r.gradient(i);for(const t in r.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const a=n((()=>o[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const i=r.inputs[t];if(!h(a.shape,i.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{const t=e[i.id];e[i.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),Ss);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return i(T(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;i(t.every((e=>e instanceof us)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),i(n.value instanceof us,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),i(T(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];i(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),i(r.every((e=>e instanceof us)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return r.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Xn(),n=await this.backend.time(e);return n.wallMs=Xn()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Is;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Cs(){const e=G();if(null==e._tfengine){const t=new P(e);e._tfengine=new $s(t)}var t;return t=e._tfengine.ENV,U=t,os=()=>e._tfengine,e._tfengine}$s.nextTensorId=0,$s.nextVariableId=0;const Ts=Cs();function Ss(e,t){const n={a:e,b:t};return Ts.runKernel(X,n)}function Es(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function As(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Rs=W();function Fs(e,t){let n=e;if(v(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||v(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&W().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ds(e,s,[]),s}function Ds(e,t,n){if(n=n||[],!Array.isArray(e)&&!v(e))return void i(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));i(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),i(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Ds(e[t],s,n.concat(t))}function _s(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Os(e,t,n,s="numeric"){if(e instanceof us)return _s(s,e.dtype,t,n),e;let a=C(e);if("string"!==a&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),_s(s,a,t,n),null==e||!v(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const r=Fs(e,a);v(e)||Array.isArray(e)||(e=[e]);const i="string"!==a?qn(e,a):u(e,[],!0);return Ts.makeTensor(i,r,a)}function Ms(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>Os(e,`${t}[${a}]`,n,s)))}Rs.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Rs.registerFlag("IS_BROWSER",(()=>As())),Rs.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Rs.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Rs.registerFlag("PROD",(()=>!1)),Rs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Rs.getBool("DEBUG"))),Rs.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Rs.registerFlag("IS_TEST",(()=>!1)),Rs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));function Ls(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const a=(...e)=>{Ts.startScope(n);try{const t=s(...e);return z(t)&&console.error("Cannot return a Promise inside of tidy."),Ts.endScope(t),t}catch(e){throw Ts.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const zs=Ls({complex_:function(e,t){const n=Os(e,"real","complex"),s=Os(t,"imag","complex");o(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const a={real:n,imag:s};return Ts.runKernel(ge,a)}});function Bs(e,t,n,s){if(null==s&&(s=C(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!v(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){O(t);const e=c(t),s=c(n);i(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],a=e!==n.length-1||s!==c(t.slice(e));i(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return v(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?qn(e,s):u(e,[],!0),Ts.makeTensor(e,t,s)}function Ps(e,t,n){return Bs(e,t,Fs(e,n),n)}const Ws={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Vs(e,t){const n=[],s=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let r=0;r<a.length;++r){const i=a[r],o=Array.isArray(e)?e[r].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],r=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(r,a),a+=4,s.set(n,a),a+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Us(await Promise.all(s)),specs:n}}function Us(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let a=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),s.buffer}const Gs="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Hs(e){return Gs?Buffer.byteLength(e):new Blob([e]).size}function js(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function Ks(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Hs(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Hs(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function qs(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const a=new ArrayBuffer(4*s.length),r=new Uint32Array(a);for(let a=0;a<s.length;a++){const i=s[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];r[a]=o}return new Float32Array(a)}}class Xs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Xs.instance&&(Xs.instance=new Xs),Xs.instance}static registerSaveRouter(e){Xs.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Xs.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Xs.getHandlers(e,"save")}static getLoadHandlers(e,t){return Xs.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Xs.getInstance().loadRouters:Xs.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const Ys=e=>Xs.getSaveHandlers(e),Js="tensorflowjs",Zs="models_store",Qs="model_info_store";function ea(){if(!W().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ta(e){const t=e.result;t.createObjectStore(Zs,{keyPath:"modelPath"}),t.createObjectStore(Qs,{keyPath:"modelPath"})}class na{constructor(e){if(this.indexedDB=ea(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(Js,1);s.onupgradeneeded=()=>ta(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(Zs,"readonly"),s=t.objectStore(Zs).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{const s=Ks(t),r=a.transaction(Qs,"readwrite");let i=r.objectStore(Qs);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=a.transaction(Zs,"readwrite");const o=l.objectStore(Zs).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=r.objectStore(Qs);const t=i.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(o.error)),t.onerror=e=>(a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}na.URL_SCHEME="indexeddb://";const sa=e=>{return W().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(na.URL_SCHEME)?(t=e.slice(na.URL_SCHEME.length),new na(t)):null;var t};Xs.registerSaveRouter(sa),Xs.registerLoadRouter(sa);class aa{constructor(){this.indexedDB=ea()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Js,1);n.onupgradeneeded=()=>ta(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(Qs,"readonly"),r=a.objectStore(Qs).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(na.URL_SCHEME)?t.slice(na.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(Js,1);s.onupgradeneeded=()=>ta(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(Qs,"readwrite"),i=r.objectStore(Qs),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),r=()=>{l=a.transaction(Zs,"readwrite");const s=l.objectStore(Zs).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const ra="/",ia="tensorflowjs_models",oa="info",la="model_topology",ua="weight_specs",ca="weight_data",ha="model_metadata";function pa(e){return{info:[ia,e,oa].join(ra),topology:[ia,e,la].join(ra),weightSpecs:[ia,e,ua].join(ra),weightData:[ia,e,ca].join(ra),modelMetadata:[ia,e,ha].join(ra)}}function da(e){const t=e.split(ra);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ra)}class fa{constructor(e){if(!W().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=pa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=Ks(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Gs)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Gs){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}fa.URL_SCHEME="localstorage://";const ma=e=>{return W().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fa.URL_SCHEME)?(t=e.slice(fa.URL_SCHEME.length),new fa(t)):null;var t};Xs.registerSaveRouter(ma),Xs.registerLoadRouter(ma);class ga{constructor(){i(W().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),i("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ia+ra,n=ra+oa;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);if(a.startsWith(t)&&a.endsWith(n)){e[da(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=pa(e=(t=e).startsWith(fa.URL_SCHEME)?t.slice(fa.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class ya{constructor(){this.managers={}}static getInstance(){return null==ya.instance&&(ya.instance=new ya),ya.instance}static registerManager(e,t){i(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),i(e.length>0,(()=>"scheme must not be an empty string."));const n=ya.getInstance();i(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class ba{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(W().get("IS_BROWSER")){W().setPlatform("browser",new ba);try{ya.registerManager(fa.URL_SCHEME,new ga)}catch(e){}try{ya.registerManager(na.URL_SCHEME,new aa)}catch(e){}}const xa=()=>require("node-fetch");let ka;class wa{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=W().global.fetch?W().global.fetch(e,t):(null==ka&&(ka=xa()),ka(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function va(e,t="float32",n){return t=t||"float32",O(e),new is(e,t,n)}W().get("IS_NODE")&&W().setPlatform("node",new wa);const Na=Ls({cast_:function(e,t){const n=Os(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},a={dtype:t};return Ts.runKernel(de,s,a)}});const Ia=Ls({clone_:function(e){const t={x:Os(e,"x","clone","string_or_numeric")};return Ts.runKernel(nt,t)}});Cs();ls={buffer:va,cast:Na,clone:Ia,print:function(e,t=!1){console.log(e.toString(t))}};function $a(e){return new Promise((e=>setTimeout(e))).then(e)}class Ca{constructor(e){if(!W().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ca.URL_SCHEME)&&(e=e.slice(Ca.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const a=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),r=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(r.download=this.modelTopologyFileName,r.href=a,await $a((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await $a((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Ks(e)}}}}Ca.URL_SCHEME="downloads://";function Ta(e,t,n,s){!function(e){i(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){i(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),i(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),i(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let a=0;return Promise.all(e.map((r=>(r.then((r=>{const i=n+ ++a/e.length*(s-n);return t(i),r})),r))))}Xs.registerSaveRouter((e=>W().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ca.URL_SCHEME)?function(e="model"){return new Ca(e)}(e.slice(Ca.URL_SCHEME.length)):null));class Sa{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(i("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=W().platform.fetch,i(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&i(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:Ks(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,a=t.generatedBy,r=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:a,convertedBy:r,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),a=n>t?e.substring(n):"";return[s+"/",a]}(t),a=this.weightPathPrefix||n,r=[];for(const t of e)r.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(a+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[r,js(await async function(e,t){null==t&&(t={});const n=null==t.fetchFunc?W().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(s):await Ta(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await Ta(a,t.onProgress,.5,1)}(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ea(e){return null!=e.match(Sa.URL_SCHEME_REGEX)}Sa.URL_SCHEME_REGEX=/^https?:\/\//;const Aa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ea(e))):Ea(e),n)return Ra(e,t)}return null};function Ra(e,t){return new Sa(e,t)}function Fa(e,t){return Ra(e,t)}Xs.registerSaveRouter(Aa),Xs.registerLoadRouter(Aa);const Da=Ls({matMul_:function(e,t,n=!1,s=!1){let a=Os(e,"a","matMul"),r=Os(t,"b","matMul");[a,r]=ks(a,r);const i={a:a,b:r},o={transposeA:n,transposeB:s};return Ts.runKernel(ce,i,o)}});const _a=Ls({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Os(e,"indices","oneHot","int32")},r={depth:t,onValue:n,offValue:s};return Ts.runKernel(Bt,a,r)}});const Oa=Ls({transpose_:function(e,t){const n=Os(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{i(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},a={perm:t};return Ts.runKernel(Sn,s,a)}});let Ma;const La=Ls({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,a=!1,r=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)r=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Wn(_n,Ts.backendName)){const n={pixels:e},s={numChannels:t};return Ts.runKernel(_n,n,s)}const[u,c]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let h,p;if(i?h=e.getContext("2d").getImageData(0,0,u,c).data:s||n?h=e.data:(r||a||o)&&(null==Ma&&(Ma=document.createElement("canvas").getContext("2d")),Ma.canvas.width=u,Ma.canvas.height=c,Ma.drawImage(e,0,0,u,c),h=Ma.getImageData(0,0,u,c).data),4===t)p=new Int32Array(h);else{const e=u*c;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=h[4*n+e]}return function(e,t,n){if(l(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Fs(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Bs(e,t,s,n)}(p,[c,u,t],"int32")}});function za(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===c(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let i=1;for(let e=0;e<a.length-1;++e)i*=a[e];const o=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=o[e],l.push(o[e]);const h=[...E(e.shape).map((e=>e/u)),1].slice(0,r);return[l,i,u,h]}function Ba(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function Pa(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Ba(n,t,e)}function Wa(e,t,n){const s=t.shape.length,a=s>1?t.shape[s-1]:1,r=n.length;let i=1;for(let e=a;e<r;++e)i*=n[e];const o=a<1?1:a;return{sliceRank:a,numUpdates:c(t.shape)/o,sliceSize:i,strides:[...E(n.slice(0,a)),1],outputSize:c(n)}}function Va(e,t,n){const s=e.shape.length;i(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),i(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let a=0;a<s;++a)i(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function Ua(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Ga(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function Ha(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function ja(e,t,n){return n<=e?n:n-(t-1)}function Ka(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function qa(e,t,n,s,a,r,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Xa(i,l,u,s,e),h=Ya(o,l,u,a,e),p=Ha(r,l,u,e)}else for(let t=0;t<u;t++)c[t]=Za(i,s,r,e,t,l),h[t]=Qa(o,a,r,e,t,l),p[t]=Ja(r,t,l);return{begin:c,end:h,strides:p}}function Xa(e,t,n,s,a){const r=[...a],i=Ka(n,t);for(let a=0;a<r.length;a++)if(i.indexOf(a)>-1)r[a]=0;else{const i=ja(t,n,a);let o=s[i];e&1<<i&&(o=0),r[a]=o}return r}function Ya(e,t,n,s,r){const i=[...r],o=Ka(n,t);for(let a=0;a<i.length;a++)if(o.indexOf(a)>-1)i[a]=Number.MAX_SAFE_INTEGER;else{const r=ja(t,n,a);let o=s[r];e&1<<r&&(o=Number.MAX_SAFE_INTEGER),i[a]=o}for(let e=0;e<i.length;e++){const t=r[e];i[e]<0&&(i[e]+=t),i[e]=a(0,i[e],r[e])}return i}function Ja(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Za(e,t,n,s,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[r];return o<0&&(o+=u),o=a(0,o,u-1),o}function Qa(e,t,n,s,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[r];return o<0&&(o+=u),o=l>0?a(0,o,u):a(-1,o,u-1),o}function er(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function tr(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function nr(e,t,n){let s;const a=e.shape.length;let r;return s="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),s.forEach((e=>{i(-1!==e,(()=>"slice() does not support negative begin indexing."))})),r=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,r=r.map(((t,n)=>t>=0?t:(i(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,r]}function sr(e,t,n,s,a,r,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=Ua(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=Ua(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=qa(m,p,d,u,c,h,a,r,i);u=g,c=y,h=b;const x=Ua(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const k=Ga(u,c,h),w=k.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:k,newShape:m,outShape:w}}var ar=Object.freeze({__proto__:null,assertParamsValid:Va,maskToAxes:Ua,computeOutShape:Ga,stridesWithElidedDims:Ha,getNormalizedAxes:qa,startIndicesWithElidedDims:Xa,stopIndicesWithElidedDims:Ya,stridesForAxis:Ja,startForAxis:Za,stopForAxis:Qa,isSliceContinous:er,computeFlatOffset:tr,parseSliceParams:nr,sliceInfo:sr});class rr{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ir{constructor(){this.classNameMap={}}static getMap(){return null==ir.instance&&(ir.instance=new ir),ir.instance}static register(e){ir.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function or(e){i(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),i("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),i(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ir.register(e)}function lr(){return Ts}function ur(){return Ts.memory()}function cr(e,t){return Ts.tidy(e,t)}function hr(e){ws(e).forEach((e=>e.dispose()))}function pr(e){return Ts.keep(e)}function dr(e){return Ts.setBackend(e)}function fr(e,t,n=1){return Ts.registerBackend(e,t,n)}const mr=Ls({add_:function(e,t){let n=Os(e,"a","add"),s=Os(t,"b","add");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(X,a)}});const gr=Ls({floorDiv_:function(e,t){let n=Os(e,"a","floorDiv"),s=Os(t,"b","floorDiv");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(Ye,a)}});const yr=Ls({div_:function(e,t){let n=Os(e,"a","div"),s=Os(t,"b","div");if([n,s]=ks(n,s),"int32"===n.dtype&&"int32"===s.dtype)return gr(n,s);const a={a:n,b:s};return Ts.runKernel(ze,a,{})}});const br=Ls({mul_:function(e,t){let n=Os(e,"a","mul"),s=Os(t,"b","mul");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(Ft,a)}});const xr=Ls({abs_:function(e){const t=Os(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Ts.runKernel(ye,e)}{const e={x:t};return Ts.runKernel(j,e)}}});const kr=Ls({acos_:function(e){const t={x:Os(e,"x","acos")};return Ts.runKernel(K,t)}});const wr=Ls({acosh_:function(e){const t={x:Os(e,"x","acosh")};return Ts.runKernel(q,t)}});const vr=Ls({addN_:function(e){i(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),i(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Os(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!h(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Ts.runKernel(Y,s)}});const Nr=Ls({all_:function(e,t=null,n=!1){const s={x:Os(e,"x","all","bool")},a={axis:t,keepDims:n};return Ts.runKernel(J,s,a)}});const Ir=Ls({any_:function(e,t=null,n=!1){const s={x:Os(e,"x","any","bool")},a={axis:t,keepDims:n};return Ts.runKernel(Z,s,a)}});const $r=Ls({argMax_:function(e,t=0){const n={x:Os(e,"x","argMax")},s={axis:t};return Ts.runKernel(Q,n,s)}});const Cr=Ls({argMin_:function(e,t=0){const n={x:Os(e,"x","argMin")},s={axis:t};return Ts.runKernel(ee,n,s)}});const Tr=Ls({asin_:function(e){const t={x:Os(e,"x","asin")};return Ts.runKernel(te,t)}});const Sr=Ls({asinh_:function(e){const t={x:Os(e,"x","asinh")};return Ts.runKernel(ne,t)}});const Er=Ls({atan_:function(e){const t={x:Os(e,"x","atan")};return Ts.runKernel(se,t)}});const Ar=Ls({atan2_:function(e,t){let n=Os(e,"a","atan2"),s=Os(t,"b","atan2");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(re,a)}});const Rr=Ls({atanh_:function(e){const t={x:Os(e,"x","atanh")};return Ts.runKernel(ae,t)}});function Fr(e,t,n,s,a="NHWC",r){return Or(e,[...t,e[3]],n,r,s,null,null,Gr(a))}function Dr(e,t,n,s,a,r,i="channelsLast"){const[o,l]=zr(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Or(e,u,n,s,a,r,!1,i)}function _r(e,t,n,s,a,r,i="NDHWC"){const[o,l,u]=Br(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Mr(e,c,n,s,a,!1,h,r)}function Or(e,t,n,s,a,r,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=zr(n),[y,b]=zr(s),x=Pr(p,y),k=Pr(d,b),{padInfo:w,outHeight:v,outWidth:N}=function(e,t,n,s,a,r,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=Lr(e,t,n));const r=e[0],i=e[1],o=Wr((r-t+2*s)/n+1,a),l=Wr((i-t+2*s)/n+1,a);return[o,l]}([t,n],r,s,e,o);c=a[0],h=a[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/a);const e=Math.max(0,(c-1)*s+r-t),o=Math.max(0,(h-1)*a+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-r+1)/s),h=Math.ceil((n-i+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Wr((t-r+p+d)/s+1,o),h=Wr((n-i+f+m)/a+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(a,u,c,m,g,x,k,r,o),I=i?f*h:f;let $;return"channelsFirst"===o?$=[l,I,v,N]:"channelsLast"===o&&($=[l,v,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:N,outChannels:I,padInfo:w,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:k,dilationHeight:y,dilationWidth:b,inShape:e,outShape:$,filterShape:t}}function Mr(e,t,n,s,a,r=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Br(n),[k,w,v]=Br(s),N=Pr(d,k),I=Pr(f,w),$=Pr(m,v),{padInfo:C,outDepth:T,outHeight:S,outWidth:E}=function(e,t,n,s,a,r,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,a,r){null==a&&(a=Lr(e,t,s));const i=e[0],o=e[1],l=e[2],u=Wr((i-t+2*a)/s+1,r),c=Wr((o-t+2*a)/s+1,r),h=Wr((l-t+2*a)/s+1,r);return[u,c,h,n]}([t,n,s,1],o,1,a,e,c);p=r[0],d=r[1],f=r[2]}else if("same"===e){p=Math.ceil(t/a),d=Math.ceil(n/r),f=Math.ceil(s/i);const e=(p-1)*a+o-t,c=(d-1)*r+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,k=Math.floor(m/2);h={top:b,bottom:x,left:k,right:m-k,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/a),d=Math.ceil((n-l+1)/r),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(a,u,c,h,y,b,x,N,I,$,o),A=r?g*p:g;let R;return"channelsFirst"===i?R=[l,A,T,S,E]:"channelsLast"===i&&(R=[l,T,S,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:S,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:$,dilationDepth:k,dilationHeight:w,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Lr(e,t,n,s=1){const a=Pr(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function zr(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Br(e){return"number"==typeof e?[e,e,e]:e}function Pr(e,t){return t<=1?e:e+(e-1)*(t-1)}function Wr(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Vr(e){const[t,n,s]=zr(e);return 1===t&&1===n&&1===s}function Ur(e,t){return Vr(e)||Vr(t)}function Gr(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Hr=Ls({reshape_:function(e,t){const n={x:Os(e,"x","reshape","string_or_numeric")},s={shape:t};return Ts.runKernel(Xt,n,s)}});const jr=Ls({avgPool_:function(e,t,n,s,a){const r=Os(e,"x","avgPool","float32");i(Ur(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=r,l=!1;3===r.rank&&(l=!0,o=Hr(r,[1,r.shape[0],r.shape[1],r.shape[2]])),i(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),null!=a&&i(p(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a};let h=Ts.runKernel(ie,u,c);return h=Na(h,r.dtype),l?Hr(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Kr=Ls({avgPool3d_:function(e,t,n,s,a,r="NDHWC"){const o=Os(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),i("NDHWC"===r,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),null!=a&&i(p(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r};let d=Ts.runKernel(le,c,h);return d=Na(d,l.dtype),u?Hr(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const qr=Ls({concat_:function(e,t=0){i(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Ms(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ia(n[0]);const s=n,a={axis:t};return Ts.runKernel(be,s,a)}});const Xr=Ls({sigmoid_:function(e){const t={x:Os(e,"x","sigmoid")};return Ts.runKernel(pn,t)}});const Yr=Ls({slice_:function(e,t,n){const s=Os(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const a={x:s},r={begin:t,size:n};return Ts.runKernel(ln,a,r)}});const Jr=Ls({tanh_:function(e){const t={x:Os(e,"x","tanh")};return Ts.runKernel($n,t)}});const Zr=Ls({batchToSpaceND_:function(e,t,n){const s=Os(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));i(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),i(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i(s.shape[0]%a==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const r={x:s},o={blockShape:t,crops:n};return Ts.runKernel(he,r,o)}});const Qr=Ls({batchNorm_:function(e,t,n,s,a,r){null==r&&(r=.001);const o=Os(e,"x","batchNorm"),l=Os(t,"mean","batchNorm"),u=Os(n,"variance","batchNorm");let c,h;null!=a&&(c=Os(a,"scale","batchNorm")),null!=s&&(h=Os(s,"offset","batchNorm")),i(l.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==h||l.rank===h.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==c||l.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?Hr(e,[1,1,1,e.size]):2===e.rank?Hr(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Hr(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:c,offset:h,mean:l,variance:u},d={varianceEpsilon:r},f=Ts.runKernel(Je,p,d);return Hr(f,o.shape)}});const ei=Ls({batchNorm2d_:function(e,t,n,s,a,r){const o=Os(e,"x","batchNorm"),l=Os(t,"mean","batchNorm"),u=Os(n,"variance","batchNorm");let c,h;return null!=a&&(c=Os(a,"scale","batchNorm")),null!=s&&(h=Os(s,"offset","batchNorm")),i(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),i(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${l.rank}.`)),i(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&i(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=h&&i(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`)),Qr(o,l,u,h,c,r)}});const ti=Ls({batchNorm3d_:function(e,t,n,s,a,r){const o=Os(e,"x","batchNorm"),l=Os(t,"mean","batchNorm"),u=Os(n,"variance","batchNorm");let c,h;return null!=a&&(c=Os(a,"scale","batchNorm")),null!=s&&(h=Os(s,"offset","batchNorm")),i(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),i(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${l.rank}.`)),i(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&i(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=h&&i(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`)),Qr(o,l,u,h,c,r)}});const ni=Ls({batchNorm4d_:function(e,t,n,s,a,r){const o=Os(e,"x","batchNorm"),l=Os(t,"mean","batchNorm"),u=Os(n,"variance","batchNorm");let c,h;return null!=a&&(c=Os(a,"scale","batchNorm")),null!=s&&(h=Os(s,"offset","batchNorm")),i(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),i(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${l.rank}.`)),i(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&i(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=h&&i(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`)),Qr(o,l,u,h,c,r)}});const si=Ls({bincount_:function(e,t,n){const s=Os(e,"x","bincount"),a=Os(t,"weights","bincount");i("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(a.size===s.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${a.shape}.`));const r={x:s,weights:a},o={size:n};return Ts.runKernel(pe,r,o)}});const ai=Ls({broadcastTo_:function(e,t){let n=Os(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Hr(n,e)}const a=n.shape,r=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])r[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===r.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ia(n);const i={x:n},o={reps:r};return Ts.runKernel(Cn,i,o)}});const ri=Ls({ceil_:function(e){const t={x:Os(e,"x","ceil")};return Ts.runKernel(fe,t)}});const ii=Ls({clipByValue_:function(e,t,n){const s=Os(e,"x","clipByValue");i(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const a={x:s},r={clipValueMin:t,clipValueMax:n};return Ts.runKernel(me,a,r)}});const oi=Ls({concat1d_:function(e){return qr(e,0)}});const li=Ls({concat2d_:function(e,t){return qr(e,t)}});const ui=Ls({concat3d_:function(e,t){return qr(e,t)}});const ci=Ls({concat4d_:function(e,t){return qr(e,t)}});const hi=Ls({conv2d_:function(e,t,n,s,a="NHWC",r=[1,1],o){const l=Os(e,"x","conv2d"),u=Os(t,"filter","conv2d");let c=l,h=!1;3===l.rank&&(h=!0,c=Hr(l,[1,l.shape[0],l.shape[1],l.shape[2]])),i(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=o&&i(p(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const d="NHWC"===a?c.shape[3]:c.shape[1];i(d===u.shape[2],(()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${u.shape[2]}.`)),i(Ur(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`));const f={x:c,filter:u},m={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o},g=Ts.runKernel(xe,f,m);return h?Hr(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const pi=Ls({conv1d_:function(e,t,n,s,a="NWC",r=1,o){const l=Os(e,"x","conv1d"),u=Os(t,"filter","conv1d");let c=l,h=!1;2===l.rank&&(h=!0,c=Hr(l,[1,l.shape[0],l.shape[1]])),i(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),i(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=o&&i(p(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`)),i(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),i(Ur(n,r),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${r}'`)),i("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const d=Hr(u,[1,u.shape[0],u.shape[1],u.shape[2]]),f=Hr(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=hi(f,d,[1,n],s,"NHWC",[1,r],o);return Hr(m,h?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const di=Ls({conv2DBackpropInput_:function(e,t,n,s,a,r="NHWC",o){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,u=t,c=!1;3===t.rank&&(c=!0,u=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2]]),l=[1,e[0],e[1],e[2]]),i(4===l.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${l.length}.`)),i(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),i(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===r?l[3]:l[1],d="NHWC"===r?u.shape[3]:u.shape[1];i(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),i(d===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`)),null!=o&&i(p(a),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const f={dy:u,filter:n},m={strides:s,pad:a,dataFormat:r,dimRoundingMode:o,inputShape:l},g=Ts.runKernel(we,f,m);return c?Hr(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const fi=Ls({conv2dTranspose_:function(e,t,n,s,a,r){const i=Os(e,"x","conv2dTranspose"),o=Os(t,"filter","conv2dTranspose");return di(n,i,o,s,a,"NHWC",r)}});const mi=Ls({conv3d_:function(e,t,n,s,a="NDHWC",r=[1,1,1]){const o=Os(e,"x","conv3d"),l=Os(t,"filter","conv3d");let u=o,c=!1;4===o.rank&&(c=!0,u=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),i(5===l.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${l.rank}.`)),i(u.shape[4]===l.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${l.shape[3]}.`)),i(Ur(n,r),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),i("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:a,dilations:r},d=Ts.runKernel(ve,h,p);return c?Hr(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const gi=Ls({conv3DBackpropInput_:function(e,t,n,s,a){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let r=e,o=t,l=!1;4===t.rank&&(l=!0,o=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),r=[1,e[0],e[1],e[2],e[3]]);const u=r[4],c=o.shape[4];i(5===r.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`)),i(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),i(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),i(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),i(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const h={dy:o,filter:n},p={pad:a,strides:s,inputShape:r},d=Ts.runKernel(Ie,h,p);return l?Hr(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const yi=Ls({cos_:function(e){const t={x:Os(e,"x","cos")};return Ts.runKernel($e,t)}});const bi=Ls({cosh_:function(e){const t={x:Os(e,"x","cosh")};return Ts.runKernel(Ce,t)}});const xi=Ls({cumsum_:function(e,t=0,n=!1,s=!1){const a={x:Os(e,"x","cumsum")},r={axis:t,exclusive:n,reverse:s};return Ts.runKernel(Te,a,r)}});const ki=Ls({denseBincount_:function(e,t,n,s=!1){const a=Os(e,"x","denseBincount"),r=Os(t,"weights","denseBincount");i("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),i(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(r.size===a.size||0===r.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${r.shape}.`));const o={x:a,weights:r},l={size:n,binaryOutput:s};return Ts.runKernel(Ee,o,l)}});const wi=Ls({depthToSpace_:function(e,t,n="NHWC"){const s=Os(e,"x","depthToSpace"),a="NHWC"===n?s.shape[1]:s.shape[2],r="NHWC"===n?s.shape[2]:s.shape[3],o="NHWC"===n?s.shape[3]:s.shape[1];i(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),i(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),i(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${s.shape}`));const l={x:s},u={blockSize:t,dataFormat:n};return Ts.runKernel(Ae,l,u)}});const vi=Ls({depthwiseConv2d_:function(e,t,n,s,a="NHWC",r=[1,1],o){const l=Os(e,"x","depthwiseConv2d"),u=Os(t,"filter","depthwiseConv2d");let c=l,h=!1;3===l.rank&&(h=!0,c=Hr(l,[1,l.shape[0],l.shape[1],l.shape[2]])),i(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),i(c.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=o&&i(p(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const d={x:c,filter:u},f={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o},m=Ts.runKernel(Re,d,f);return h?Hr(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ni=Ls({dilation2d_:function(e,t,n,s,a=[1,1],r="NHWC"){const o=Os(e,"x","dilation2d"),l=Os(t,"filter","dilation2d");i(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),i(3===l.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${l.rank}.`)),i("NHWC"===r,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`));let u=o,c=!1;3===o.rank&&(u=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=!0);const h={x:u,filter:l},p={strides:n,pad:s,dilations:a},d=Ts.runKernel(Oe,h,p);return c?Hr(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});function Ii(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,i=e[r]||1;(t[t.length-1-a]||1)>1&&1===i&&s.unshift(r)}return s}function $i(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,i=t[r];(null==a||1===a&&i>1)&&n.unshift(r)}return n}function Ci(e,t){const n=[],s=Math.max(e.length,t.length);for(let a=0;a<s;a++){let s=e[e.length-a-1];null==s&&(s=1);let r=t[t.length-a-1];if(null==r&&(r=1),1===s)n.unshift(r);else if(1===r)n.unshift(s);else{if(s!==r){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}const Ti=Ls({equal_:function(e,t){let n=Os(e,"a","equal"),s=Os(t,"b","equal");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(Ve,a)}});const Si=Ls({where_:function(e,t,n){const s=Os(t,"a","where"),a=Os(n,"b","where"),r=Os(e,"condition","where","bool"),l=Ci(s.shape,a.shape),u=ai(s,l),c=ai(a,l);1===r.rank&&i(r.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==r.rank&&o(r.shape,c.shape,"Error in where: ");const h={condition:r,t:u,e:c};return Ts.runKernel(rn,h)}});const Ei=Ls({zerosLike_:function(e){const t={x:Os(e,"x","zerosLike")};return Ts.runKernel(Fn,t)}});const Ai=Ls({divNoNan_:function(e,t){let n=Os(e,"a","div"),s=Os(t,"b","div");[n,s]=ks(n,s);const a=yr(n,s),r=Ei(a),i=Ti(s,r);return Si(i,r,a)}});const Ri=Ls({dot_:function(e,t){const n=Os(e,"t1","dot"),s=Os(t,"t2","dot");i(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const a=1===n.rank?n.size:n.shape[1],r=1===s.rank?s.size:s.shape[0];if(i(a===r,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${r}.`)),1===n.rank&&1===s.rank){const e=Hr(n,[1,-1]),t=Hr(s,[-1,1]),a=Da(e,t);return Hr(a,[])}if(1===n.rank&&2===s.rank){const e=Hr(n,[1,-1]),t=Hr(s,[s.shape[0],s.shape[1]]),a=Da(e,t);return Hr(a,[a.size])}if(2===n.rank&&1===s.rank){const e=Hr(s,[-1,1]),t=Da(n,e);return Hr(t,[t.size])}{const e=Hr(s,[s.shape[0],s.shape[1]]);return Da(n,e)}}});const Fi=Ls({elu_:function(e){const t={x:Os(e,"x","elu")};return Ts.runKernel(Be,t)}});const Di=Ls({erf_:function(e){let t=Os(e,"x","erf");i("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Na(t,"float32"));const n={x:t};return Ts.runKernel(We,n)}});const _i=Ls({exp_:function(e){const t={x:Os(e,"x","exp")};return Ts.runKernel(Ue,t)}});const Oi=Ls({expandDims_:function(e,t=0){const n=Os(e,"x","expandDims","string_or_numeric");i(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},a={dim:t};return Ts.runKernel(Ge,s,a)}});const Mi=Ls({expm1_:function(e){const t={x:Os(e,"x","expm1")};return Ts.runKernel(He,t)}});const Li=Ls({tile_:function(e,t){const n=Os(e,"x","tile","string_or_numeric");i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},a={reps:t};return Ts.runKernel(Cn,s,a)}});const zi=Ls({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const a=va([e,t],s),r=e<=t?e:t;for(let e=0;e<r;++e)a.set(1,e,e);const i=Hr(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Li(Oi(i,0),[n[0],1,1]);if(2===n.length)return Li(Oi(Oi(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Li(Oi(Oi(Oi(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Bi(e,t,n){const s={shape:e,value:t,dtype:n};return Ts.runKernel(Ke,{},s)}const Pi=Ls({floor_:function(e){const t={x:Os(e,"x","floor")};return Ts.runKernel(Xe,t)}});const Wi=Ls({gather_:function(e,t,n=0,s=0){const a={x:Os(e,"x","gather"),indices:Os(t,"indices","gather","int32")},r={axis:n,batchDims:s};return Ts.runKernel(Ze,a,r)}});const Vi=Ls({greater_:function(e,t){let n=Os(e,"a","greater"),s=Os(t,"b","greater");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(et,a)}});const Ui=Ls({greaterEqual_:function(e,t){let n=Os(e,"a","greaterEqual"),s=Os(t,"b","greaterEqual");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(tt,a)}});const Gi=Ls({imag_:function(e){const t={input:Os(e,"input","imag")};return Ts.runKernel(at,t)}});const Hi=Ls({isFinite_:function(e){const t={x:Os(e,"x","isFinite")};return Ts.runKernel(rt,t)}});const ji=Ls({isInf_:function(e){const t={x:Os(e,"x","isInf")};return Ts.runKernel(it,t)}});const Ki=Ls({isNaN_:function(e){const t={x:Os(e,"x","isNaN")};return Ts.runKernel(ot,t)}});const qi=Ls({leakyRelu_:function(e,t=.2){const n={x:Os(e,"x","leakyRelu")},s={alpha:t};return Ts.runKernel(lt,n,s)}});const Xi=Ls({less_:function(e,t){let n=Os(e,"a","less"),s=Os(t,"b","less");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(ut,a)}});const Yi=Ls({lessEqual_:function(e,t){let n=Os(e,"a","lessEqual"),s=Os(t,"b","lessEqual");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(ct,a)}});function Ji(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Ts.runKernel(ht,{},s)}const Zi=Ls({localResponseNormalization_:function(e,t=5,n=1,s=1,a=.5){const r=Os(e,"x","localResponseNormalization");i(4===r.rank||3===r.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${r.rank}.`)),i(p(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=r,l=!1;3===r.rank&&(l=!0,o=Hr(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const u={x:o},c={depthRadius:t,bias:n,alpha:s,beta:a},h=Ts.runKernel(yt,u,c);return l?Hr(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Qi=Ls({log_:function(e){const t={x:Os(e,"x","log")};return Ts.runKernel(pt,t)}});const eo=Ls({log1p_:function(e){const t={x:Os(e,"x","log1p")};return Ts.runKernel(dt,t)}});function to(e){return Ts.customGrad(e)}const no=Ls({neg_:function(e){const t={x:Os(e,"x","neg")};return Ts.runKernel(Dt,t)}});const so=Ls({softplus_:function(e){const t={x:Os(e,"x","softplus")};return Ts.runKernel(dn,t)}});const ao=Ls({logSigmoid_:function(e){const t=Os(e,"x","logSigmoid");return to((e=>({value:no(so(no(e))),gradFunc:t=>br(t,Xr(no(e)))})))(t)}});const ro=Ls({max_:function(e,t=null,n=!1){const s={x:Os(e,"x","max")},a={reductionIndices:t,keepDims:n};return Ts.runKernel(xt,s,a)}});const io=Ls({sub_:function(e,t){let n=Os(e,"a","sub"),s=Os(t,"b","sub");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(wn,a)}});const oo=Ls({sum_:function(e,t=null,n=!1){let s=Os(e,"x","sum");"bool"===s.dtype&&(s=Na(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return Ts.runKernel(mn,a,r)}});const lo=Ls({logSoftmax_:function(e,t=-1){const n=Os(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return to(((e,n)=>{const s=ro(e,t,!0),a=io(e,s),r=io(Na(a,"float32"),Qi(oo(_i(a),t,!0)));n([r]);return{value:r,gradFunc:(e,n)=>{const[s]=n,a=_i(s);return io(e,br(oo(e,t,!0),a))}}}))(n)}});function uo(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function co(e,t,n){const s=e.length+t.length,a=[];let r=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?a.push(e[r++]):a.push(t[i++]);return a}function ho(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function po(e,t){return co(e,t.map((e=>1)),t)}function fo(e,t,n){i(uo(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function mo(e,t){if(uo(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function go(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function yo(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const bo=Ls({logSumExp_:function(e,t=null,n=!1){const s=Os(e,"x","logSumExp"),a=y(t,s.shape),r=ro(s,a,!0),i=io(s,r),o=_i(i),l=oo(o,a),u=Qi(l),c=mr(Hr(r,u.shape),u);if(n){const e=po(c.shape,a);return Hr(c,e)}return c}});const xo=Ls({logicalAnd_:function(e,t){const n=Os(e,"a","logicalAnd","bool"),s=Os(t,"b","logicalAnd","bool");Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(ft,a)}});const ko=Ls({logicalNot_:function(e){const t={x:Os(e,"x","logicalNot","bool")};return Ts.runKernel(mt,t)}});const wo=Ls({logicalOr_:function(e,t){const n=Os(e,"a","logicalOr","bool"),s=Os(t,"b","logicalOr","bool");Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(gt,a)}});const vo=Ls({logicalXor_:function(e,t){const n=Os(e,"a","logicalXor","bool"),s=Os(t,"b","logicalXor","bool");return Ci(n.shape,s.shape),xo(wo(e,t),ko(xo(e,t)))}});const No=Ls({maxPool_:function(e,t,n,s,a){const r=Os(e,"x","maxPool");let o=r,l=!1;3===r.rank&&(l=!0,o=Hr(r,[1,r.shape[0],r.shape[1],r.shape[2]])),i(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),i(Ur(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=a&&i(p(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a},h=Ts.runKernel(wt,u,c);return l?Hr(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Io=Ls({maxPool3d_:function(e,t=[1,1,1],n,s,a,r="NDHWC"){const o=Os(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),i("NDHWC"===r,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),null!=a&&i(p(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r},d=Ts.runKernel(Nt,c,h);return u?Hr(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const $o=Ls({maxPoolWithArgmax_:function(e,t,n,s,a=!1){const r={x:Os(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:a},o=Ts.runKernel($t,r,i);return{result:o[0],indexes:o[1]}}});const Co=Ls({maximum_:function(e,t){let n=Os(e,"a","maximum"),s=Os(t,"b","maximum");[n,s]=ks(n,s),"bool"===n.dtype&&(n=Na(n,"int32"),s=Na(s,"int32")),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(kt,a)}});const To=Ls({mean_:function(e,t=null,n=!1){const s={x:Os(e,"x","mean")},a={axis:t,keepDims:n};return Ts.runKernel(Ct,s,a)}});const So=Ls({min_:function(e,t=null,n=!1){const s={x:Os(e,"x","min")},a={axis:t,keepDims:n};return Ts.runKernel(Tt,s,a)}});const Eo=Ls({minimum_:function(e,t){let n=Os(e,"a","minimum"),s=Os(t,"b","minimum");[n,s]=ks(n,s),"bool"===n.dtype&&(n=Na(n,"int32"),s=Na(s,"int32")),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(St,a)}});const Ao=Ls({mirrorPad_:function(e,t,n){i("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Os(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<s.rank;e++)i(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i(t[e][0]>=0&&t[e][0]<=s.shape[e]-a&&t[e][1]>=0&&t[e][1]<=s.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-a} or less than 0 for input of shape ${s.shape}`));const r={paddings:t,mode:n},o={x:s};return Ts.runKernel(Et,o,r)}});const Ro=Ls({mod_:function(e,t){let n=Os(e,"a","mod"),s=Os(t,"b","mod");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(At,a)}});const Fo=Ls({square_:function(e){const t=Os(e,"x","square");return Ts.runKernel("Square",{x:t},{})}});const Do=Ls({moments_:function(e,t=null,n=!1){const s=y(t,(e=Os(e,"x","moments")).shape),a=To(e,s,n);let r=a.shape;n||(r=po(a.shape,s));const i=Fo(io(Na(e,"float32"),Hr(a,r)));return{mean:a,variance:To(i,s,n)}}});const _o=Ls({multinomial_:function(e,t,n,s=!1){const a=Os(e,"logits","multinomial"),r=a.size,i=a.rank;if(r<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${r}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Hr(a,[1,-1]):a},l={numSamples:t,seed:n,normalized:s},u=Ts.runKernel(Rt,o,l);return 1===i?Hr(u,[u.size]):u}});const Oo=Ls({notEqual_:function(e,t){let n=Os(e,"a","notEqual"),s=Os(t,"b","notEqual");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(_t,a)}});function Mo(e,t="float32"){if("complex64"===t){const t=Mo(e,"float32"),n=Mo(e,"float32");return zs(t,n)}const n=D(c(e),t);return Ts.makeTensor(n,e,t)}function Lo(e,t="float32"){if("complex64"===t){const t=Lo(e,"float32"),n=Mo(e,"float32");return zs(t,n)}const n=F(c(e),t);return Ts.makeTensor(n,e,t)}const zo=Ls({onesLike_:function(e){const t={x:Os(e,"x","onesLike")};return Ts.runKernel(zt,t)}});const Bo=Ls({pad_:function(e,t,n=0){const s=Os(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},r={x:s};return Ts.runKernel(Wt,r,a)}});const Po=Ls({spaceToBatchND_:function(e,t,n){const s=Os(e,"x","spaceToBatchND");i(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),i(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i(s.shape.reduce(((e,s,a)=>a>0&&a<=t.length?e&&(s+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:s},r={blockShape:t,paddings:n};return Ts.runKernel(gn,a,r)}});const Wo=Ls({pool_:function(e,t,n,s,a,r){null==a&&(a=[1,1]),null==r&&(r=1),0===s&&(s="valid");const o=Os(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2]])),i(Ur(r,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`));const c=Dr(l.shape,t,r,a,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],a[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),a=n.map((e=>e[1])),r=e.concat(s,a),i=t.map(((e,t)=>(e-r[t]%e)%e)),o=a.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:Po(l,h,f),b=("avg"===n?()=>jr(y,t,r,g):()=>No(y,t,r,g))(),x=d?b:Zr(b,h,m);return u?Hr(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Vo=Ls({pow_:function(e,t){let n=Os(e,"base","pow"),s=Os(t,"exp","pow");[n,s]=ks(n,s);const a={a:n,b:s};return Ts.runKernel(Vt,a)}});const Uo=Ls({prelu_:function(e,t){const n={x:Os(e,"x","prelu"),alpha:Os(t,"alpha","prelu")};return Ts.runKernel(Ut,n)}});const Go=Ls({prod_:function(e,t=null,n=!1){let s=Os(e,"x","prod");"bool"===s.dtype&&(s=Na(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return Ts.runKernel(Gt,a,r)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Ho(e){if(e.__esModule)return e;var t=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(n){var s=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,s.get?s:{enumerable:!0,get:function(){return e[n]}})})),t}function jo(e){var t={exports:{}};return e(t,t.exports),t.exports}var Ko=jo((function(e){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function r(e,t){var n=new s(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.alea=r}(0,e,!1)})),qo=jo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function r(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xor128=r}(0,e,!1)})),Xo=jo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function r(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xorwow=r}(0,e,!1)})),Yo=jo((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function r(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xorshift7=r}(0,e,!1)})),Jo=jo((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function r(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xor4096=r}(0,e,!1)})),Zo=jo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function r(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.tychei=r}(0,e,!1)})),Qo=Ho(Object.freeze({__proto__:null,default:{}})),el=jo((function(e){!function(t,n){var s,a=this,r=256,i=n.pow(r,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(r):(e=new Uint8Array(r),(a.crypto||a.msCrypto).getRandomValues(e)),m(e)}catch(e){var n=a.navigator,i=n&&n.plugins;return[+new Date,a,i,a.screen,m(t)]}}():e,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,a){return a&&(a.S&&p(a,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function f(e,t){for(var n,s=e+"",a=0;a<s.length;)t[u&a]=u&(n^=19*t[u&a])+s.charCodeAt(a++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=Qo}catch(e){}}}([],Math)}));el.alea=Ko,el.xor128=qo,el.xorwow=Xo,el.xorshift7=Yo,el.xor4096=Jo,el.tychei=Zo;var tl=el;class nl{constructor(e,t,n,s,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const r=a||Math.random();this.random=tl.alea(r.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,a,r;do{s=2*this.random()-1,a=2*this.random()-1,r=s*s+a*a}while(r>=1||0===r);const i=Math.sqrt(-2*Math.log(r)/r);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*a*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class sl{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=tl.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const al=Ls({randomNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const r=new nl(t,n,s,!1,a),i=va(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}});const rl=Ls({randomUniform_:function(e,t=0,n=1,s="float32",a){const r=va(e,s),i=new sl(t,n,null,a);for(let e=0;e<r.values.length;e++)r.values[e]=i.nextValue();return r.toTensor()}});function il(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:s};return Ts.runKernel(Ht,{},a)}const ol=Ls({real_:function(e){const t={input:Os(e,"input","real")};return Ts.runKernel(jt,t)}});const ll=Ls({reciprocal_:function(e){const t={x:Os(e,"x","reciprocal")};return Ts.runKernel(Kt,t)}});const ul=Ls({relu_:function(e){const t={x:Os(e,"x","relu")};return Ts.runKernel(qt,t)}});const cl=Ls({relu6_:function(e){const t={x:Os(e,"x","relu6")};return Ts.runKernel(en,t)}});const hl=Ls({reverse_:function(e,t){const n={x:Os(e,"x","reverse")},s={dims:t};return Ts.runKernel(tn,n,s)}});const pl=Ls({round_:function(e){const t={x:Os(e,"x","round")};return Ts.runKernel(nn,t)}});const dl=Ls({rsqrt_:function(e){const t={x:Os(e,"x","rsqrt")};return Ts.runKernel(sn,t)}});function fl(e,t){if((v(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&v(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Bs(e,[],[],t)}const ml=Ls({selu_:function(e){const t={x:Os(e,"x","selu")};return Ts.runKernel(on,t)}});const gl=Ls({separableConv2d_:function(e,t,n,s,a,r=[1,1],o="NHWC"){const l=Os(e,"x","separableConv2d"),u=Os(t,"depthwiseFilter","separableConv2d"),c=Os(n,"pointwiseFilter","separableConv2d");let h=l,p=!1;if(3===l.rank&&(p=!0,h=Hr(l,[1,l.shape[0],l.shape[1],l.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");i(4===h.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`)),i(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),i(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),i(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),i(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=u.shape[2],f=u.shape[3];i(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const m=vi(h,u,s,a,o,r),g=hi(m,c,1,"valid",o);return p?Hr(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const yl=async function(e,t){const n=Os(e,"x","setdiff1d"),s=Os(t,"y","setdiff1d");i(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),i(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),i(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const a=await n.data(),r=await s.data(),o=new Set(r);let l=0;for(let e=0;e<a.length;e++)o.has(a[e])||l++;const u=new is([l],n.dtype),c=new is([l],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(u.values[t]=a[e],c.values[t]=e,t++);return[u.toTensor(),c.toTensor()]};const bl=Ls({sign_:function(e){const t={x:Os(e,"x","sign")};return Ts.runKernel(hn,t)}});const xl=Ls({sin_:function(e){const t={x:Os(e,"x","sin")};return Ts.runKernel(un,t)}});const kl=Ls({sinh_:function(e){const t={x:Os(e,"x","sinh")};return Ts.runKernel(cn,t)}});const wl=Ls({slice1d_:function(e,t,n){const s=Os(e,"x","slice1d");return i(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Yr(s,[t],[n])}});const vl=Ls({slice2d_:function(e,t,n){const s=Os(e,"x","slice2d");return i(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Yr(s,t,n)}});const Nl=Ls({slice3d_:function(e,t,n){const s=Os(e,"x","slice3d");return i(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Yr(s,t,n)}});const Il=Ls({slice4d_:function(e,t,n){const s=Os(e,"x","slice4d");return i(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Yr(s,t,n)}});const $l=Ls({softmax_:function(e,t=-1){const n=Os(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},a={dim:t};return Ts.runKernel(bn,s,a)}});const Cl=Ls({fft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ts.runKernel(je,t)}});const Tl=Ls({ifft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ts.runKernel(st,t)}});const Sl=Ls({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const a=Hr(e,[n,t]);s=Tl(a)}else{const a=[n,2*(t-1)],r=Hr(ol(e),[n,t]),i=Hr(Gi(e),[n,t]),o=hl(Yr(r,[0,1],[n,t-2]),1),l=br(hl(Yr(i,[0,1],[n,t-2]),1),fl(-1)),u=qr([r,o],1),c=qr([i,l],1),h=Hr(zs(u,c),[a[0],a[1]]);s=Tl(h)}if(s=ol(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Hr(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const El=Ls({split_:function(e,t,n=0){const s={x:Os(e,"x","split")},a={numOrSizeSplits:t,axis:n};return Ts.runKernel(yn,s,a)}});const Al=Ls({rfft_:function(e,t){i("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let a;if(null!=t&&t<n){const s=e.shape.map((e=>0)),r=e.shape.map((e=>e));r[e.shape.length-1]=t,a=Yr(e,s,r),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,a=qr([e,Mo(s)],e.shape.length-1),n=t}else a=e;const r=Ei(a),o=Hr(zs(a,r),[s,n]),l=Cl(o),u=Math.floor(n/2)+1,c=ol(l),h=Gi(l),p=El(c,[u,n-u],c.shape.length-1),d=El(h,[u,n-u],h.shape.length-1),f=a.shape.slice();return f[a.shape.length-1]=u,Hr(zs(p[0],d[0]),f)}});const Rl=Ls({sqrt_:function(e){const t={x:Os(e,"x","sqrt")};return Ts.runKernel(fn,t)}});const Fl=Ls({squaredDifference_:function(e,t){let n=Os(e,"a","squaredDifference"),s=Os(t,"b","squaredDifference");[n,s]=ks(n,s),Ci(n.shape,s.shape);const a={a:n,b:s};return Ts.runKernel(xn,a,{})}});const Dl=Ls({squeeze_:function(e,t){const n=Os(e,"x","squeeze");return Hr(n,b(n.shape,t).newShape)}});const _l=Ls({stack_:function(e,t=0){const n=Ms(e,"tensors","stack","string_or_numeric");i(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,a={axis:t};return Ts.runKernel(Pt,s,a)}});const Ol=Ls({step_:function(e,t=0){const n={x:Os(e,"x","step")},s={alpha:t};return Ts.runKernel(Dn,n,s)}});const Ml=Ls({stridedSlice_:function(e,t,n,s,a=0,r=0,i=0,o=0,l=0){const u={x:Os(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:a,endMask:r,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ts.runKernel(Nn,u,c)}});const Ll=Ls({tan_:function(e){const t={x:Os(e,"x","tan")};return Ts.runKernel(In,t)}});function zl(e,t){l(e);const n=Fs(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Bs(e,null,n,t)}function Bl(e,t,n){if(l(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Fs(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Bs(e,t,s,n)}const Pl=Ls({topk_:function(e,t=1,n=!0){const s=Os(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=s.shape[s.shape.length-1];if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const r={x:s},i={k:t,sorted:n},[o,l]=Ts.runKernel(Tn,r,i);return{values:o,indices:l}}});const Wl=Ls({truncatedNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const r=new nl(t,n,s,!0,a),i=va(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}});const Vl=Ls({unique_:function(e,t=0){const n=Os(e,"x","unique","string_or_numeric");i(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},a={axis:t},[r,o]=Ts.runKernel(En,s,a);return{values:r,indices:o}}});const Ul=Ls({unsortedSegmentSum_:function(e,t,n){const s=Os(e,"x","unsortedSegmentSum"),a=Os(t,"segmentIds","unsortedSegmentSum","int32");i(p(n),(()=>"numSegments must be of dtype int"));const r={x:s,segmentIds:a},o={numSegments:n};return Ts.runKernel(Rn,r,o)}});const Gl=Ls({unstack_:function(e,t=0){const n=Os(e,"x","unstack","string_or_numeric");i(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},a={axis:t};return Ts.runKernel(An,s,a)}});function Hl(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=va(e,"int32"),a=va([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=s.indexToLoc(n[t]),i=t*e.length;a.values.set(r,i)}return a.toTensor()}const jl=async function(e){const t=Os(e,"condition","whereAsync","bool"),n=await t.data(),s=Hl(t.shape,n);return e!==t&&t.dispose(),s};function Kl(e,t,n=null){if(0===e.rank)return xr(e);if(1!==e.rank&&null===n)return Kl(Hr(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return oo(xr(e),n);if(t===1/0)return ro(xr(e),n);if(t===-1/0)return So(xr(e),n);if("euclidean"===t||2===t)return Rl(oo(Vo(xr(e),fl(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ro(oo(xr(e),n[0]),n[1]-1);if(t===1/0)return ro(oo(xr(e),n[1]),n[0]);if(t===-1/0)return So(oo(xr(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Rl(oo(Fo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ql=Ls({norm_:function(e,t="euclidean",n=null,s=!1){const a=Kl(e=Os(e,"x","norm"),t,n);let r=a.shape;if(s){const t=y(n,e.shape);r=po(a.shape,t)}return Hr(a,r)}});const Xl=Ls({scatterND_:function(e,t,n){const s=Os(e,"indices","scatterND","int32"),a=Os(t,"updates","scatterND");Pa(a,s,n);const r={indices:s,updates:a},i={shape:n};return Ts.runKernel(an,r,i)}});const Yl=Ls({sparseToDense_:function(e,t,n,s=0){const a=Os(e,"sparseIndices","sparseToDense","int32"),r=Os(t,"sparseValues","sparseToDense"),i=Os(s,"defaultValue","sparseToDense",r.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(n.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${r}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,r,n,i);const o={sparseIndices:a,sparseValues:r,defaultValue:i},l={outputShape:n};return Ts.runKernel(vn,o,l)}});const Jl=Ls({gatherND_:function(e,t){const n=Os(t,"indices","gatherND","int32"),s={params:Os(e,"x","gatherND"),indices:n};return Ts.runKernel(Qe,s)}});const Zl=Ls({dropout_:function(e,t,n,s){const a=Os(e,"x","dropout");if(i("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),i(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof us?a.clone():a;const r=function(e,t){if(null==t)return e.shape.slice();if(h(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(a,n),o=1-t,l=yr(Pi(mr(rl(r,0,1,"float32",s),o)),o);return br(a,l)}});const Ql=Ls({conv2DBackpropFilter_:function(e,t,n,s,a,r="NHWC",o){let l=e;3===e.rank&&(l=Hr(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2]])),i(4===l.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${l.shape}.`)),i(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),i(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===r?l.shape[3]:l.shape[1],h="NHWC"===r?u.shape[3]:u.shape[1];i(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),i(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),null!=o&&i(p(a),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const d={x:l,dy:u},f={strides:s,pad:a,dataFormat:r,dimRoundingMode:o,filterShape:n};return Ts.runKernel(ke,d,f)}});function eu(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return br(e,Ol(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function tu(e,t){let n=t;const s=$i(e.shape,t.shape);return s.length>0&&(n=oo(n,s)),Hr(n,e.shape)}function nu(e,t,n,s){if("linear"===t)return e;if("relu"===t)return ul(e);if("elu"===t)return Fi(e);if("relu6"===t)return cl(e);if("prelu"===t)return Uo(e,n);if("leakyrelu"===t)return qi(e,s);throw new Error(`Unknown fused activation ${t}.`)}const su=(e,t)=>!(e>0)||"linear"===t;const au=Ls({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:o,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(u=u||"linear",!1===su(Ts.state.gradientDepth,u)){let i=hi(e,t,n,s,a,r,o);return null!=l&&(i=mr(i,l)),nu(i,u,c,h)}const d=Os(e,"x","conv2d"),f=Os(t,"filter","conv2d");let m=d,g=!1;3===d.rank&&(g=!0,m=Hr(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=o&&i(p(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${f.shape[2]}.`)),i(Ur(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),i("NHWC"===a,(()=>`Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`));const y=Or(m.shape,f.shape,n,r,s,o);let b,x;null!=l&&(b=Os(l,"bias","fused conv2d"),[b]=ks(b,d),Ci(y.outShape,b.shape)),null!=c&&(x=Os(c,"prelu weights","fused conv2d"));const k=(e,t)=>{const[a,o,l,c]=t,h=eu(e,l,u);i(Vr(r),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const p=[di(o.shape,h,a,n,s),Ql(o,h,a.shape,n,s)];if(null!=c){const e=tu(c,h);p.push(e)}return p},w={x:m,filter:f,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o,activation:u,leakyreluAlpha:h};if(null==l){return to(((e,t,n)=>{let s=Ts.runKernel(Ln,w,v);return n([t,e,s]),g&&(s=Hr(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:k}}))(m,f)}return to(((e,t,n,s)=>{let a=Ts.runKernel(Ln,w,v);return s([t,e,a,n]),g&&(a=Hr(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:k}}))(m,f,b)}});const ru=Ls({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,a,r=[1,1],i){let o=e;3===e.rank&&(o=Hr(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:a,dimRoundingMode:i,dilations:r,filterShape:n};return Ts.runKernel(Fe,u,c)}});const iu=Ls({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,a,r=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:a,dimRoundingMode:i,dilations:r,inputShape:e},h=Ts.runKernel(De,u,c);return l?Hr(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const ou=Ls({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:o,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===su(Ts.state.gradientDepth,u)){let i=vi(e,t,n,s,a,r,o);return null!=l&&(i=mr(i,l)),nu(i,u,c,h)}const d=Os(e,"x","depthwiseConv2d"),f=Os(t,"filter","depthwiseConv2d");let m=d,g=!1;3===d.rank&&(g=!0,m=Hr(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`)),null==r&&(r=[1,1]),i(Ur(n,r),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),null!=o&&i(p(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${s}.`));const y=Or(m.shape,f.shape,n,r,s,o,!0);let b,x;null!=l&&(b=Os(l,"bias","fused conv2d"),[b]=ks(b,d),Ci(y.outShape,b.shape)),null!=c&&(x=Os(c,"prelu weights","fused depthwiseConv2d"));const k=(e,t)=>{i(Vr(r),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${r}'`));const[a,l,c,h]=t,p=eu(e,c,u),d=iu(l.shape,p,a,n,s,r,o),f=ru(l,p,a.shape,n,s,r,o);if(null!=h){return[d,f,tu(b,p)]}return[d,f]},w={x:m,filter:f,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o,activation:u,leakyreluAlpha:h};if(null==l){return to(((e,t,n)=>{let s=Ts.runKernel(zn,w,v);return n([t,e,s]),g&&(s=Hr(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:k}}))(m,f)}return to(((e,t,n,s)=>{let a=Ts.runKernel(zn,w,v);return s([t,e,a,n]),g&&(a=Hr(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:k}}))(m,f,b)}});const lu=Ls({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:a,activation:r="linear",preluActivationWeights:o,leakyreluAlpha:l}){if(!1===su(Ts.state.gradientDepth,r)){let i=Da(e,t,n,s);return null!=a&&(i=mr(i,a)),nu(i,r,o,l)}let u=Os(e,"a","fused matMul"),p=Os(t,"b","fused matMul");[u,p]=ks(u,p);const d=n?u.shape[u.rank-2]:u.shape[u.rank-1],f=s?p.shape[p.rank-1]:p.shape[p.rank-2],m=n?u.shape[u.rank-1]:u.shape[u.rank-2],g=s?p.shape[p.rank-2]:p.shape[p.rank-1],y=u.shape.slice(0,-2),b=p.shape.slice(0,-2),x=c(y),k=c(b);i(u.rank>=2&&p.rank>=2&&u.rank===p.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${p.rank}.`)),i(h(y,b),(()=>`Error in fused matMul: outer dimensions (${y}) and (${b}) of Tensors with shapes ${u.shape} and ${p.shape} must match.`)),i(d===f,(()=>`Error in fused matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${u.shape} and ${p.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=u.shape.slice(0,-2).concat([m,g]),v=Hr(u,n?[x,d,m]:[x,m,d]),N=Hr(p,s?[k,g,f]:[k,f,g]);let I,$;null!=a&&(I=Os(a,"bias","fused matMul"),[I]=ks(I,u),Ci(w,I.shape)),null!=o&&($=Os(o,"prelu weights","fused matMul"));const C=(e,t)=>{const[i,o,l,u]=t,c=eu(Hr(e,l.shape),l,r);let h,p;if(n||s?!n&&s?(h=Da(c,o,!1,!1),p=Da(c,i,!0,!1)):n&&!s?(h=Da(o,c,!1,!0),p=Da(i,c,!1,!1)):(h=Da(o,c,!0,!0),p=Da(c,i,!0,!0)):(h=Da(c,o,!1,!0),p=Da(i,c,!0,!1)),null!=a){return[h,p,tu(u,c)]}return[h,p]},T={a:v,b:N,bias:I,preluActivationWeights:$},S={transposeA:n,transposeB:s,activation:r,leakyreluAlpha:l};if(null==a){return to(((e,t,n)=>{const s=Ts.runKernel(Mn,T,S);return n([e,t,s]),{value:Hr(s,w),gradFunc:C}}))(v,N)}return to(((e,t,n,s)=>{const a=Ts.runKernel(Mn,T,S);return s([e,t,a,n]),{value:Hr(a,w),gradFunc:C}}))(v,N,I)}});const uu=Ls({cropAndResize_:function(e,t,n,s,a="bilinear",r=0){const o=Os(e,"image","cropAndResize"),l=Os(t,"boxes","cropAndResize","float32"),u=Os(n,"boxInd","cropAndResize","int32"),c=l.shape[0];i(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),i(2===l.rank&&4===l.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${l.shape}.`)),i(1===u.rank&&u.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${l.shape}.`)),i(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),i(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),i("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const h={image:o,boxes:l,boxInd:u},p={method:a,extrapolationValue:r,cropSize:s};return Ts.runKernel(Se,h,p)}});const cu=Ls({flipLeftRight_:function(e){const t=Os(e,"image","flipLeftRight","float32");i(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Ts.runKernel(qe,n,{})}});const hu=Ls({rotateWithOffset_:function(e,t,n=0,s=.5){const a=Os(e,"image","rotateWithOffset","float32");i(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const r={image:a},o={radians:t,fillValue:n,center:s};return Ts.runKernel(On,r,o)}});function pu(e,t,n,s,a,r){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==r&&(r=0);const o=e.shape[0];return n=Math.min(n,o),i(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),i(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),i(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),i(1===t.rank,(()=>"scores must be a 1D tensor")),i(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),i(0<=r&&r<=1,(()=>`softNmsSigma must be in [0, 1], but was '${r}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:a,softNmsSigma:r}}const du=Ls({nonMaxSuppression_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=Os(e,"boxes","nonMaxSuppression"),i=Os(t,"scores","nonMaxSuppression"),o=pu(r,i,n,s,a),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return Ts.runKernel(Ot,{boxes:r,scores:i},l)}});function fu(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,i=!1;for(;s<a;){r=s+(a-s>>>1);const o=n(t,e[r]);o>0?s=r+1:(a=r,i=!o)}return i?s:-s-1}(e,t,n||mu)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function mu(e,t){return e>t?1:e<t?-1:0}function gu(e,t,n,s,a){return xu(e,t,n,s,a,0)}function yu(e,t,n,s,a,r){return xu(e,t,n,s,a,0,!1,r,!0)}function bu(e,t,n,s,a,r){return xu(e,t,n,s,a,r,!0)}function xu(e,t,n,s,a,r,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(vu);const c=r>0?-.5/r:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:r,suppressBeginIndex:i}=t;if(n<a)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=ku(e,r,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*wu(s,c,i),t.score<=a)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(r),p.push(t.score)):t.score>a&&fu(u,t,vu))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function ku(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),d=(o-r)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function wu(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function vu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Nu=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=Os(e,"boxes","nonMaxSuppressionAsync"),i=Os(t,"scores","nonMaxSuppressionAsync"),o=pu(r,i,n,s,a);n=o.maxOutputSize,s=o.iouThreshold,a=o.scoreThreshold;const l=await Promise.all([r.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=gu(u,c,n,s,a);return r!==e&&r.dispose(),i!==t&&i.dispose(),zl(h,"int32")};const Iu=Ls({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=Os(e,"boxes","nonMaxSuppression"),o=Os(t,"scores","nonMaxSuppression"),l=pu(i,o,n,s,a,r),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:r=l.softNmsSigma},h=Ts.runKernel(Lt,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const $u=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=Os(e,"boxes","nonMaxSuppressionAsync"),o=Os(t,"scores","nonMaxSuppressionAsync"),l=pu(i,o,n,s,a,r);n=l.maxOutputSize,s=l.iouThreshold,a=l.scoreThreshold,r=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=bu(c,h,n,s,a,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:zl(p,"int32"),selectedScores:zl(d)}};const Cu=Ls({nonMaxSuppressionPadded_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=Os(e,"boxes","nonMaxSuppression"),o=Os(t,"scores","nonMaxSuppression"),l=pu(i,o,n,s,a,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:r},h=Ts.runKernel(Mt,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Tu=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=Os(e,"boxes","nonMaxSuppressionAsync"),o=Os(t,"scores","nonMaxSuppressionAsync"),l=pu(i,o,n,s,a,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=yu(p,d,u,c,h,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:zl(f,"int32"),validOutputs:fl(m,"int32")}};const Su=Ls({resizeBilinear_:function(e,t,n=!1,s=!1){const a=Os(e,"images","resizeBilinear");i(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),i(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let r=a,o=!1;3===a.rank&&(o=!0,r=Hr(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={images:r},u={alignCorners:n,halfPixelCenters:s,size:t},c=Ts.runKernel(Zt,l,u);return o?Hr(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Eu=Ls({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const a=Os(e,"images","resizeNearestNeighbor");i(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),i(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let r=a,o=!1;3===a.rank&&(o=!0,r=Hr(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={images:r},u={alignCorners:n,halfPixelCenters:s,size:t},c=Ts.runKernel(Yt,l,u);return o?Hr(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Au=Ls({bandPart_:function(e,t,n){i(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),i(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Os(e,"a","bandPart");i(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const a=s.shape,[r,o]=s.shape.slice(-2);if(!(t<=r))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=r),n<0&&(n=o);const l=Hr(il(0,r,1,"int32"),[-1,1]),u=il(0,o,1,"int32"),c=io(l,u),h=xo(Yi(c,fl(+t,"int32")),Ui(c,fl(-n,"int32"))),p=Mo([r,o],s.dtype);return Hr(_l(Gl(Hr(s,[-1,r,o])).map((e=>Si(h,e,p)))),a)}});const Ru=Ls({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,i(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)i(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=El(e,e.shape[0],0).map((e=>Dl(e,[0])));i(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Ts.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=br(oo(br(n[s],e)),n[s]);e=io(e,t)}return yr(e,ql(e,"euclidean"))})));return t?_l(n,0):n}});function Fu(e,t=!1){return Ts.tidy((()=>{i(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let a=zi(n),r=Ia(e);const o=Bl([[1]],[1,1]);let l=Ia(o);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=r,i=l,u=a;[l,r,a]=Ts.tidy((()=>{const t=Yr(r,[e,e],[n-e,1]),i=ql(t),u=Yr(r,[e,e],[1,1]),c=Si(Vi(u,0),Bl([[-1]]),Bl([[1]])),h=io(u,br(c,i)),p=yr(t,h);l=1===p.shape[0]?Ia(o):qr([o,Yr(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=no(yr(Da(c,h),i)),f=Yr(r,[e,0],[n-e,s]),m=br(d,l),g=Oa(l);if(0===e)r=io(f,Da(m,Da(g,f)));else{const t=io(f,Da(m,Da(g,f)));r=qr([Yr(r,[0,0],[e,s]),t],0)}const y=Oa(m),b=Yr(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=io(b,Da(Da(b,l),y));else{const t=io(b,Da(Da(b,l),y));a=qr([Yr(a,[0,0],[n,e]),t],1)}return[l,r,a]})),hr([t,i,u])}return!t&&n>s&&(a=Yr(a,[0,0],[n,s]),r=Yr(r,[0,0],[s,s])),[a,r]}))}const Du=Ls({qr_:function(e,t=!1){if(i(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Fu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=Gl(Hr(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],r=[];s.forEach((e=>{const[n,s]=Fu(e,t);a.push(n),r.push(s)}));return[Hr(_l(a,0),e.shape),Hr(_l(r,0),e.shape)]}}}),_u={flipLeftRight:cu,resizeNearestNeighbor:Eu,resizeBilinear:Su,rotateWithOffset:hu,cropAndResize:uu,nonMaxSuppression:du,nonMaxSuppressionAsync:Nu,nonMaxSuppressionWithScore:Iu,nonMaxSuppressionWithScoreAsync:$u,nonMaxSuppressionPadded:Cu,nonMaxSuppressionPaddedAsync:Tu},Ou={bandPart:Au,gramSchmidt:Ru,qr:Du};class Mu extends rr{minimize(e,t=!1,n){const{value:s,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return hr(a),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){i(T(e),(()=>"The f passed in variableGrads(f) must be a function")),i(null==t||Array.isArray(t)&&t.every((e=>e instanceof hs)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Ts.registeredVariables)t.push(Ts.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,a=t.length;i((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:r,grads:o}=Ts.gradients(e,t,null,!0);i(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i(0===r.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${r.rank} tensor`));const l={};return t.forEach(((e,t)=>{null!=o[t]&&(l[e.name]=o[t])})),null!=s&&s.forEach((e=>l[e.name]=null)),{value:r,grads:l}}(e,t)}dispose(){null!=this.iterations_&&hr(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:fl(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Mu,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Lu extends Mu{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ts.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ts.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:cr((()=>Ei(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:cr((()=>Ei(s).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;cr((()=>{const e=mr(br(r,this.rho),br(Fo(a),1-this.rho)),t=br(yr(Rl(mr(i,this.epsilon)),Rl(mr(r,this.epsilon))),a),n=mr(br(i,this.rho),br(Fo(t),1-this.rho));r.assign(e),i.assign(n);const o=mr(br(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(hr(this.accumulatedGrads.map((e=>e.variable))),hr(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Lu.className="Adadelta",or(Lu);class zu extends Mu{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ts.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:cr((()=>Bi(s.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable;cr((()=>{const e=mr(r,Fo(a));r.assign(e);const t=mr(br(yr(a,Rl(mr(e,Ts.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&hr(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}zu.className="Adagrad",or(zu);class Bu extends Mu{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],cr((()=>{this.accBeta1=fl(t).variable(),this.accBeta2=fl(n).variable()})),null==s&&(this.epsilon=Ts.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);cr((()=>{const n=io(1,this.accBeta1),s=io(1,this.accBeta2);t.forEach(((t,a)=>{const r=Ts.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:cr((()=>Ei(r).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:cr((()=>Ei(r).variable(false)))});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=mr(br(o,this.beta1),br(i,1-this.beta1)),c=mr(br(l,this.beta2),br(Fo(i),1-this.beta2)),h=yr(u,n),p=yr(c,s);o.assign(u),l.assign(c);const d=mr(br(yr(h,mr(Rl(p),this.epsilon)),-this.learningRate),r);r.assign(d)})),this.accBeta1.assign(br(this.accBeta1,this.beta1)),this.accBeta2.assign(br(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&hr(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&hr(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),cr((()=>{this.accBeta1.assign(Vo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Vo(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Bu.className="Adam",or(Bu);class Pu extends Mu{constructor(e,t,n,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],cr((()=>{this.iteration=fl(0).variable(),this.accBeta1=fl(t).variable()})),null==s&&(this.epsilon=Ts.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);cr((()=>{const n=io(1,this.accBeta1),s=yr(-this.learningRate,mr(br(this.iteration,this.decay),1));t.forEach(((t,a)=>{const r=Ts.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:Ei(r).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:Ei(r).variable(false)});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=mr(br(o,this.beta1),br(i,1-this.beta1)),c=br(l,this.beta2),h=xr(i),p=Co(c,h);o.assign(u),l.assign(p);const d=mr(br(yr(s,n),yr(u,mr(p,this.epsilon))),r);r.assign(d)})),this.iteration.assign(mr(this.iteration,1)),this.accBeta1.assign(br(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&hr(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&hr(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Pu.className="Adamax",or(Pu);class Wu extends Mu{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=Ts.registeredVariables[t];cr((()=>{const e=mr(br(this.c,s),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=pr(fl(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Wu.className="SGD",or(Wu);class Vu extends Wu{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=fl(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ts.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:cr((()=>Ei(s).variable(e)))}}const a=this.accumulations[n].variable,r=Array.isArray(e)?e[n].tensor:e[t];null!=r&&cr((()=>{let e;const t=mr(br(this.m,a),r);e=this.useNesterov?mr(br(this.c,mr(r,br(t,this.m))),s):mr(br(this.c,t),s),a.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&hr(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Vu.className="Momentum",or(Vu);class Uu extends Mu{constructor(e,t=.9,n=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=Ts.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ts.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:cr((()=>Ei(s).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:cr((()=>Ei(s).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:cr((()=>Ei(s).variable(a)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;cr((()=>{const e=mr(br(i,this.decay),br(Fo(r),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=mr(br(t,this.decay),br(r,1-this.decay)),l=yr(br(r,this.learningRate),Rl(io(e,mr(Fo(a),this.epsilon)))),u=mr(br(o,this.momentum),l);i.assign(e),t.assign(a),o.assign(u);const c=io(s,u);s.assign(c)}else{const e=mr(br(i,this.decay),br(Fo(r),1-this.decay)),t=mr(br(o,this.momentum),yr(br(r,this.learningRate),Rl(mr(e,this.epsilon))));i.assign(e),o.assign(t);const n=io(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&hr(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&hr(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&hr(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Uu.className="RMSProp",or(Uu);class Gu{static sgd(e){return new Wu(e)}static momentum(e,t,n=!1){return new Vu(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,a=!1){return new Uu(e,t,n,s,a)}static adam(e=.001,t=.9,n=.999,s=null){return new Bu(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Lu(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,a=0){return new Pu(e,t,n,s,a)}static adagrad(e,t=.1){return new zu(e,t)}}const Hu={sgd:Gu.sgd,momentum:Gu.momentum,adadelta:Gu.adadelta,adagrad:Gu.adagrad,rmsprop:Gu.rmsprop,adamax:Gu.adamax,adam:Gu.adam},ju="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Ku(){return new Promise((e=>ju((()=>e()))))}function qu(e,t){const n=e[0].length;e.forEach(((e,t)=>{i(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),i(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)i(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function Xu(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}function Yu(e){return e<=30?e:S(e,Math.floor(Math.sqrt(e)))}function Ju(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Zu(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function Qu(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function ec(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function tc(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function nc(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}const sc=1.7580993408473768,ac=1.0507009873554805,rc=.3275911,ic=.254829592,oc=-.284496736,lc=1.421413741,uc=-1.453152027,cc=1.061405429;function hc(...e){W().getBool("IS_TEST")||console.warn(...e)}function pc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function dc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function fc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function mc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function gc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function yc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function bc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function xc(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function kc(e,t,n=0){let s=[];if("number"==typeof t)i(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{i(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}i(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function wc(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=S(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=S(e,n+1);return n}function vc(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function Nc(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<r;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var Ic=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:wc,computeOutShape:vc,collectGatherOpShapeInfo:Nc});function $c(e){try{return e.map((e=>Jn(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Cc(e){return e.map((e=>Yn(e)))}var Tc,Sc,Ec=Object.freeze({__proto__:null,slice_util:ar,segment_util:Ic,fromUint8ToStringArray:$c,fromStringArrayToUint8:Cc,upcastType:bs,axesAreInnerMostDims:uo,combineLocations:co,computeOutAndReduceShapes:ho,expandShapeToKeepDim:po,assertAxesAreInnerMostDims:fo,getAxesPermutation:mo,getUndoAxesPermutation:go,getInnerMostAxes:yo,getBroadcastDims:Ii,getReductionAxes:$i,assertAndGetBroadcastShape:Ci,assertParamsConsistent:qu,computeOutShape:Xu,computeDilation2DInfo:Fr,computePool2DInfo:Dr,computePool3DInfo:_r,computeConv2DInfo:Or,computeConv3DInfo:Mr,computeDefaultPad:Lr,tupleValuesAreOne:Vr,eitherStridesOrDilationsAreOne:Ur,convertConv2DDataFormat:Gr,getFusedDyActivation:eu,getFusedBiasGradient:tu,applyActivation:nu,shouldFuse:su,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Yu,getImageCenter:Ju,getReshaped:Zu,getPermuted:Qu,getReshapedPermuted:ec,getSliceBeginCoords:tc,getSliceSize:nc,prepareAndValidate:za,validateUpdateShape:Ba,validateInput:Pa,calculateShapes:Wa,SELU_SCALEALPHA:sc,SELU_SCALE:ac,ERF_P:rc,ERF_A1:ic,ERF_A2:oc,ERF_A3:lc,ERF_A4:uc,ERF_A5:cc,warn:hc,log:function(...e){W().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:pc,splitRealAndImagArrays:dc,complexWithEvenIndex:fc,complexWithOddIndex:mc,getComplexWithIndex:gc,assignToTypedArray:yc,exponents:bc,exponent:xc,prepareSplitSize:kc});!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Tc||(Tc={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(Sc||(Sc={}));const Ac={};function Rc(e){return Ac[e]}function Fc(e,t,n,s,a){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,i=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd;if("tensor"===r.type)return Dc(t.inputNames[r.inputIndexStart],n,s,a);if("tensors"===r.type){return t.inputNames.slice(e,i).map((e=>Dc(e,n,s,a)))}const o=Dc(t.inputNames.slice(e)[0],n,s,a),l=o.dataSync();return"number"===r.type?l[0]:R(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function Dc(e,t,n,s){const[a,r]=Mc(e);if(null!=s){const e=s.getHashTableHandleByName(a);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[Oc(a,e)]));return void 0!==i?t[Oc(a,i)][r]:void 0}function _c(e,t){const[n,s]=Mc(e);return[Oc(n,t&&t.currentContextId),s]}function Oc(e,t){return t?`${e}-${t}`:e}function Mc(e){const t=e.split(":");if(1===t.length)return[e,0];return[t[0],Number(t[t.length-1])]}function Lc(e,t,n){let s=Fc("pad",e,t,n);if("explicit"===s){s=Fc("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=s[2*e],a[e][1]=s[2*e+1];return a}return s}function zc(e){return e.kept?e:Ia(e)}var Bc=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Pc=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Wc=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var Vc=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var Uc=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var Gc=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Hc=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var jc=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Kc=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}]});var qc=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var Xc=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Yc=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Jc=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Zc=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var Qc=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var eh=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var th=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class nh{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Bc,Pc,Wc,Vc,Uc,Gc,Hc,Xc,qc,jc,Yc,Jc,Zc,Qc,eh,th,Kc].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],a=[],r=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=_c(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=_c(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=_c(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:a,placeholders:s,signature:t,functions:p};return r.length>0&&(d.initNodes=r),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Rc(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let a;switch(n.type){case"string":a=ah(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ah(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=fh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=fh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=ih(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=ih(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=dh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=dh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=rh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=rh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=gh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=gh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ph(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ph(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=mh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=mh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=uh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=uh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=ch(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ch(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=lh(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=lh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=_c(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:oh(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=_c(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=_c(i[e.name]),a=s[t];null!=a&&(a.defaultOutput=n,r.push(a))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:r,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function sh(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=W().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ah(e,t,n,s=!1){const a=e[t];return null!=a?sh(a.s,s):n}function rh(e,t,n){const s=e[t];return s?s.b:n}function ih(e,t,n){const s=e[t]||{},a=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof a?a:parseInt(a,10)}function oh(e){switch("string"==typeof e&&(e=Tc[e]),e){case Tc.DT_FLOAT:return"float32";case Tc.DT_INT32:case Tc.DT_INT64:case Tc.DT_INT8:case Tc.DT_UINT8:return"int32";case Tc.DT_BOOL:return"bool";case Tc.DT_DOUBLE:return"float32";case Tc.DT_STRING:return"string";default:return null}}function lh(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function uh(e,t,n){const s=e[t];return s&&s.type?oh(s.type):n}function ch(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>oh(e))):n}function hh(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ph(e,t,n){const s=e[t];return s&&s.shape?hh(s.shape):n}function dh(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function fh(e,t,n,s=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>sh(e,s))):n}function mh(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>hh(e))):n}function gh(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class yh{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Dc(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Dc(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return ih(this.node.rawAttrs,e,t);if(null!=n.s)return ah(this.node.rawAttrs,e,t);if(null!=n.b)return rh(this.node.rawAttrs,e,t);if(null!=n.shape)return ph(this.node.rawAttrs,e,t);if(null!=n.type)return uh(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return dh(this.node.rawAttrs,e,t);if(null!=n.list.s)return fh(this.node.rawAttrs,e,t);if(null!=n.list.shape)return mh(this.node.rawAttrs,e,t);if(null!=n.list.b)return gh(this.node.rawAttrs,e,t);if(null!=n.list.type)return ch(this.node.rawAttrs,e,t)}return t}}function bh(e,t,n=""){i(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class xh{constructor(e,t,n,s,a,r,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=r,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=fl(0),pr(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),bh(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,pr(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ps([],[0].concat(this.elementShape));const n=this.readMany(e);return bh(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),_l(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Ps([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return bh(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),qr(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Gl(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,r=[];cr((()=>{t=Hr(t,[1,n,a]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],a];r[n]=Hr(Yr(t,i,o),this.elementShape)}return r}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,r)}}class kh{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);bh(t,e.shape,"TensorList shape mismatch: "),pr(e)})),this.idTensor=fl(0),this.maxNumElements=s,pr(this.idTensor)}get id(){return this.idTensor.id}copy(){return new kh([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return bh(e,this.elementShape,"TensorList shape mismatch: "),cr((()=>{const t=this.tensors.map((t=>Hr(t,e)));return _l(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return bh(n.shape,e,"TensorList shape mismatch: "),Hr(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(bh(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");pr(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return bh(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);bh(this.elementShape,t.shape,"TensorList shape mismatch: "),pr(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return bh(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?Ps([],[0].concat(this.elementShape)):cr((()=>{const t=e.map((e=>Hr(this.tensors[e],n)));return _l(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return bh(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?Ps([],[0].concat(this.elementShape)):cr((()=>{const e=this.tensors.map((e=>Hr(e,t)));return qr(e,0)}))}}const wh=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=Fc("thenBranch",e,t,n),a=Fc("elseBranch",e,t,n),r=Fc("cond",e,t,n),i=Fc("args",e,t,n);return(await r.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=Fc("body",e,t,n),a=Fc("cond",e,t,n),r=Fc("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),o=r.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=r;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await r[0].data(),r.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[zc(Fc("pred",e,t,n))];case"Switch":{const s=Fc("pred",e,t,n);let a=Fc("data",e,t,n);return a.kept||(a=zc(a)),(await s.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==Dc(e,t,n)));if(s){return[zc(Dc(s,t,n))]}return}case"Enter":{const s=Fc("frameName",e,t,n),a=Fc("tensor",e,t,n);return n.enterFrame(s),[zc(a)]}case"Exit":{const s=Fc("tensor",e,t,n);return n.exitFrame(),[zc(s)]}case"NextIteration":{const s=Fc("tensor",e,t,n);return n.nextIteration(),[zc(s)]}case"TensorArrayV3":{const s=Fc("size",e,t,n),a=Fc("dtype",e,t,n),r=Fc("elementShape",e,t,n),i=Fc("dynamicSize",e,t,n),o=Fc("clearAfterRead",e,t,n),l=Fc("identicalElementShapes",e,t,n),u=Fc("name",e,t,n),c=new xh(u,a,s,r,l,i,o);return n.addTensorArray(c),[c.idTensor,fl(1)]}case"TensorArrayWriteV3":{const s=Fc("tensorArrayId",e,t,n),a=Fc("index",e,t,n),r=Fc("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(a,r),[i.idTensor]}case"TensorArrayReadV3":{const s=Fc("tensorArrayId",e,t,n),a=Fc("index",e,t,n);return[n.getTensorArray(s.id).read(a)]}case"TensorArrayGatherV3":{const s=Fc("tensorArrayId",e,t,n),a=Fc("indices",e,t,n),r=Fc("dtype",e,t,n);return[n.getTensorArray(s.id).gather(a,r)]}case"TensorArrayScatterV3":{const s=Fc("tensorArrayId",e,t,n),a=Fc("indices",e,t,n),r=Fc("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(a,r),[i.idTensor]}case"TensorArrayConcatV3":{const s=Fc("tensorArrayId",e,t,n),a=n.getTensorArray(s.id),r=Fc("dtype",e,t,n);return[a.concat(r)]}case"TensorArraySplitV3":{const s=Fc("tensorArrayId",e,t,n),a=Fc("tensor",e,t,n),r=Fc("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(r,a),[i.idTensor]}case"TensorArraySizeV3":{const s=Fc("tensorArrayId",e,t,n);return[fl(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=Fc("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const s=Fc("tensorListId",e,t,n),a=Fc("index",e,t,n),r=Fc("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(a,r),[i.idTensor]}case"TensorListGetItem":{const s=Fc("tensorListId",e,t,n),a=Fc("index",e,t,n),r=Fc("elementShape",e,t,n),i=Fc("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(a,r,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=Fc("indices",e,t,n),a=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const r=new kh([],n,e.dtype,s),i=Gl(e,0);return t.forEach(((e,t)=>{r.setItem(e,i[t])})),r}(Fc("tensor",e,t,n),s,Fc("elementShape",e,t,n),Fc("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=Fc("elementShape",e,t,n),a=Fc("elementDType",e,t,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new kh([],e,t,n)}(s,a,Fc(r,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=Fc("tensorListId",e,t,n),a=Fc("indices",e,t,n),r=Fc("elementShape",e,t,n),i=Fc("elementDType",e,t,n);return[n.getTensorList(s.id).gather(a,i,r)]}case"TensorListStack":{const s=Fc("tensorListId",e,t,n),a=Fc("elementShape",e,t,n),r=Fc("elementDType",e,t,n),i=Fc("numElements",e,t,n);return[n.getTensorList(s.id).stack(a,r,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);bh(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=Gl(e);return new kh(a,t,s)}(Fc("tensor",e,t,n),Fc("elementShape",e,t,n),Fc("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=Fc("tensorListId",e,t,n),a=n.getTensorList(s.id),r=Fc("dtype",e,t,n),i=Fc("elementShape",e,t,n);return[a.concat(r,i)]}case"TensorListPushBack":{const s=Fc("tensorListId",e,t,n),a=Fc("tensor",e,t,n),r=n.getTensorList(s.id);return r.pushBack(a),[r.idTensor]}case"TensorListPopBack":{const s=Fc("tensorListId",e,t,n),a=Fc("elementShape",e,t,n),r=Fc("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(a,r)]}case"TensorListSplit":{const s=Fc("tensor",e,t,n),a=Fc("elementShape",e,t,n),r=function(e,t,n){let s=0;const a=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const r=0===s?0:e.size/s,i=cr((()=>{const i=[];e=Hr(e,[1,s,r]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:a[s-1],0],l=[1,t[s],r];i[s]=Hr(Yr(e,o,l),n)}return e.dispose(),i})),o=new kh([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)o.setItem(e,i[e]);return o}(s,Fc("lengths",e,t,n),a);return n.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function vh(e,t,n){const[s,a]=Fc("fusedOps",e,t,n),r="biasadd"===s,i="prelu"===a,o="fusedbatchnorm"===s,l=Fc("numArgs",e,t,n);if(r){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=Fc("strides",e,t,n),c=Lc(e,t,n),h=Fc("dataFormat",e,t,n).toUpperCase(),p=Fc("dilations",e,t,n),[d,f]=Fc("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:a,leakyreluAlpha:Fc("leakyreluAlpha",e,t,n)}}function Nh(e,t,n){return{boxes:Fc("boxes",e,t,n),scores:Fc("scores",e,t,n),maxOutputSize:Fc("maxOutputSize",e,t,n),iouThreshold:Fc("iouThreshold",e,t,n),scoreThreshold:Fc("scoreThreshold",e,t,n),softNmsSigma:Fc("softNmsSigma",e,t,n)}}class Ih{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=fl(0),this.tensorMap=new Map,pr(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),cr((()=>{const e=Gl(t),s=n.length,a=e.length;i(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let t=0;t<s;t++){const s=n[t],a=e[t];pr(a),this.tensorMap.set(s,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return cr((()=>{const e=[];for(let s=0;s<n.length;s++){const a=n[s],r=this.findWithDefault(a,t);e.push(r)}return _l(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function $h(e,t,n,s){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return cr((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[mr(Fc("a",e,t,n),Fc("b",e,t,n))];case"AddN":return[vr(Fc("tensors",e,t,n))];case"FloorMod":case"Mod":return[Ro(Fc("a",e,t,n),Fc("b",e,t,n))];case"Mul":return[br(Fc("a",e,t,n),Fc("b",e,t,n))];case"RealDiv":case"Div":return[yr(Fc("a",e,t,n),Fc("b",e,t,n))];case"DivNoNan":return[Ai(Fc("a",e,t,n),Fc("b",e,t,n))];case"FloorDiv":return[gr(Fc("a",e,t,n),Fc("b",e,t,n))];case"Sub":return[io(Fc("a",e,t,n),Fc("b",e,t,n))];case"Minimum":return[Eo(Fc("a",e,t,n),Fc("b",e,t,n))];case"Maximum":return[Co(Fc("a",e,t,n),Fc("b",e,t,n))];case"Pow":return[Vo(Fc("a",e,t,n),Fc("b",e,t,n))];case"SquaredDifference":return[Fl(Fc("a",e,t,n),Fc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return cr((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[xr(Fc("x",e,t,n))];case"Acos":return[kr(Fc("x",e,t,n))];case"Acosh":return[wr(Fc("x",e,t,n))];case"Asin":return[Tr(Fc("x",e,t,n))];case"Asinh":return[Sr(Fc("x",e,t,n))];case"Atan":return[Er(Fc("x",e,t,n))];case"Atan2":return[Ar(Fc("x",e,t,n),Fc("y",e,t,n))];case"Atanh":return[Rr(Fc("x",e,t,n))];case"Ceil":return[ri(Fc("x",e,t,n))];case"Complex":return[zs(Fc("real",e,t,n),Fc("imag",e,t,n))];case"Cos":return[yi(Fc("x",e,t,n))];case"Cosh":return[bi(Fc("x",e,t,n))];case"Elu":return[Fi(Fc("x",e,t,n))];case"Erf":return[Di(Fc("x",e,t,n))];case"Exp":return[_i(Fc("x",e,t,n))];case"Expm1":return[Mi(Fc("x",e,t,n))];case"Floor":return[Pi(Fc("x",e,t,n))];case"Log":return[Qi(Fc("x",e,t,n))];case"Log1p":return[eo(Fc("x",e,t,n))];case"Imag":return[Gi(Fc("x",e,t,n))];case"Neg":return[no(Fc("x",e,t,n))];case"Reciprocal":return[ll(Fc("x",e,t,n))];case"Real":return[ol(Fc("x",e,t,n))];case"Relu":return[ul(Fc("x",e,t,n))];case"Round":return[pl(Fc("x",e,t,n))];case"Selu":return[ml(Fc("x",e,t,n))];case"Sigmoid":return[Xr(Fc("x",e,t,n))];case"Sin":return[xl(Fc("x",e,t,n))];case"Sign":return[bl(Fc("x",e,t,n))];case"Sinh":return[kl(Fc("x",e,t,n))];case"Softplus":return[so(Fc("x",e,t,n))];case"Sqrt":return[Rl(Fc("x",e,t,n))];case"Square":return[Fo(Fc("x",e,t,n))];case"Tanh":return[Jr(Fc("x",e,t,n))];case"Tan":return[Ll(Fc("x",e,t,n))];case"ClipByValue":return[ii(Fc("x",e,t,n),Fc("clipValueMin",e,t,n),Fc("clipValueMax",e,t,n))];case"Relu6":return[cl(Fc("x",e,t,n))];case"Rsqrt":return[dl(Dc(e.inputNames[0],t,n))];case"Prod":return[Go(Fc("x",e,t,n),Fc("axes",e,t,n))];case"LeakyRelu":return[qi(Fc("x",e,t,n),Fc("alpha",e,t,n))];case"Prelu":return[Uo(Fc("x",e,t,n),Fc("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return wh(e,t,n);case"convolution":return cr((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=Fc("stride",e,t,n),a=Fc("pad",e,t,n),r=Fc("dataFormat",e,t,n).toUpperCase(),i=Fc("dilation",e,t,n);return[pi(Fc("x",e,t,n),Fc("filter",e,t,n),s,a,r,i)]}case"Conv2D":{const s=Fc("strides",e,t,n),a=Lc(e,t,n),r=Fc("dataFormat",e,t,n).toUpperCase(),i=Fc("dilations",e,t,n);return[hi(Fc("x",e,t,n),Fc("filter",e,t,n),[s[1],s[2]],a,r,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=vh(e,t,n);return[au({x:Fc("x",e,t,n),filter:Fc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=vh(e,t,n);return[ou({x:Fc("x",e,t,n),filter:Fc("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Fc("outputShape",e,t,n),a=Fc("strides",e,t,n),r=Lc(e,t,n);return[fi(Fc("x",e,t,n),Fc("filter",e,t,n),s,[a[1],a[2]],r)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Fc("strides",e,t,n),a=Lc(e,t,n),r=Fc("dilations",e,t,n),i=Fc("dataFormat",e,t,n).toUpperCase();return[vi(Fc("input",e,t,n),Fc("filter",e,t,n),[s[1],s[2]],a,i,[r[1],r[2]])]}case"Conv3D":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("dataFormat",e,t,n).toUpperCase(),i=Fc("dilations",e,t,n);return[mi(Fc("x",e,t,n),Fc("filter",e,t,n),[s[1],s[2],s[3]],a,r,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("kernelSize",e,t,n);return[jr(Fc("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("kernelSize",e,t,n);return[No(Fc("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("kernelSize",e,t,n),i=Fc("includeBatchInIndex",e,t,n),{result:o,indexes:l}=$o(Fc("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a,i);return[o,l]}case"AvgPool3D":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("kernelSize",e,t,n);return[Kr(Fc("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("kernelSize",e,t,n);return[Io(Fc("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Fc("strides",e,t,n),a=Fc("pad",e,t,n),r=Fc("dilations",e,t,n),i=s[1],o=s[2],l=r[1],u=r[2];return[Ni(Fc("x",e,t,n),Fc("filter",e,t,n),[i,o],a,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return cr((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=Fc("shape",e,t,n),a=Fc("dtype",e,t,n);return[Bi(s,Fc("value",e,t,n),a)]}case"LinSpace":return[Ji(Fc("start",e,t,n),Fc("stop",e,t,n),Fc("num",e,t,n))];case"Multinomial":{const s=Fc("logits",e,t,n),a=Fc("numSamples",e,t,n),r=Fc("seed",e,t,n);return[_o(s,a,r)]}case"OneHot":{const s=Fc("indices",e,t,n),a=Fc("depth",e,t,n),r=Fc("onValue",e,t,n),i=Fc("offValue",e,t,n);return[_a(s,a,r,i)]}case"Ones":return[Lo(Fc("shape",e,t,n),Fc("dtype",e,t,n))];case"OnesLike":return[zo(Fc("x",e,t,n))];case"RandomUniform":return[rl(Fc("shape",e,t,n),Fc("minval",e,t,n),Fc("maxval",e,t,n),Fc("dtype",e,t,n))];case"Range":return[il(Fc("start",e,t,n),Fc("stop",e,t,n),Fc("step",e,t,n),Fc("dtype",e,t,n))];case"TruncatedNormal":{const s=Fc("shape",e,t,n),a=Fc("mean",e,t,n),r=Fc("stdDev",e,t,n),i=Fc("seed",e,t,n);return[Wl(s,a,r,Fc("dtype",e,t,n),i)]}case"Zeros":return[Mo(Fc("shape",e,t,n),Fc("dtype",e,t,n))];case"ZerosLike":return[Ei(Fc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=Nh(e,t,n),u=await _u.nonMaxSuppressionWithScoreAsync(s,a,r,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=Nh(e,t,n),l=Fc("padToMaxOutputSize",e,t,n),u=await _u.nonMaxSuppressionPaddedAsync(s,a,r,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=Nh(e,t,n);return[await _u.nonMaxSuppressionAsync(s,a,r,i,o)]}case"Where":{const s=Na(Fc("condition",e,t,n),"bool"),a=[await jl(s)];return s.dispose(),a}case"ListDiff":return yl(Fc("x",e,t,n),Fc("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return cr((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=Fc("x",e,t,n),a=Fc("k",e,t,n),r=Fc("sorted",e,t,n),i=Pl(s,a,r);return[i.values,i.indices]}case"Unique":{const s=Fc("x",e,t,n),a=Vl(s);return[a.values,a.indices]}case"UniqueV2":{const s=Fc("x",e,t,n),a=Fc("axis",e,t,n),r=Vl(s,a);return[r.values,r.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return cr((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=Fc("images",e,t,n),a=Fc("size",e,t,n),r=Fc("alignCorners",e,t,n),i=Fc("halfPixelCenters",e,t,n);return[_u.resizeBilinear(s,[a[0],a[1]],r,i)]}case"ResizeNearestNeighbor":{const s=Fc("images",e,t,n),a=Fc("size",e,t,n),r=Fc("alignCorners",e,t,n),i=Fc("halfPixelCenters",e,t,n);return[_u.resizeNearestNeighbor(s,[a[0],a[1]],r,i)]}case"CropAndResize":{const s=Fc("image",e,t,n),a=Fc("boxes",e,t,n),r=Fc("boxInd",e,t,n),i=Fc("cropSize",e,t,n),o=Fc("method",e,t,n),l=Fc("extrapolationValue",e,t,n);return[_u.cropAndResize(s,a,r,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return cr((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Fc("default",e,t,n);return[Dc(e.name,t,n)||s];case"Placeholder":return[Dc(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[zc(Fc("x",e,t,n))];case"IdentityN":return Fc("x",e,t,n).map((e=>zc(e)));case"Snapshot":return[zc(Fc("x",e,t,n))];case"Shape":return[zl(Fc("x",e,t,n).shape,"int32")];case"ShapeN":return Fc("x",e,t,n).map((e=>zl(e.shape)));case"Size":return[fl(Fc("x",e,t,n).size,"int32")];case"Rank":return[fl(Fc("x",e,t,n).rank,"int32")];case"NoOp":return[fl(1)];case"Print":const a=Fc("x",e,t,n),r=Fc("data",e,t,n),i=Fc("message",e,t,n),o=Fc("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<r.length;e++)console.log(Array.prototype.slice.call(r[e].dataSync()).slice(0,o));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return cr((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Ti(Fc("a",e,t,n),Fc("b",e,t,n))];case"NotEqual":return[Oo(Fc("a",e,t,n),Fc("b",e,t,n))];case"Greater":return[Vi(Fc("a",e,t,n),Fc("b",e,t,n))];case"GreaterEqual":return[Ui(Fc("a",e,t,n),Fc("b",e,t,n))];case"Less":return[Xi(Fc("a",e,t,n),Fc("b",e,t,n))];case"LessEqual":return[Yi(Fc("a",e,t,n),Fc("b",e,t,n))];case"LogicalAnd":return[xo(Fc("a",e,t,n),Fc("b",e,t,n))];case"LogicalNot":return[ko(Fc("a",e,t,n))];case"LogicalOr":return[wo(Fc("a",e,t,n),Fc("b",e,t,n))];case"Select":case"SelectV2":return[Si(Fc("condition",e,t,n),Fc("a",e,t,n),Fc("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return cr((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Da(Fc("a",e,t,n),Fc("b",e,t,n),Fc("transposeA",e,t,n),Fc("transposeB",e,t,n))];case"Transpose":return[Oa(Fc("x",e,t,n),Fc("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Fc("fusedOps",e,t,n),r="biasadd"===s,i="prelu"===a,o=Fc("numArgs",e,t,n),l=Fc("leakyreluAlpha",e,t,n);if(r){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=Fc("args",e,t,n);return[lu({a:Fc("a",e,t,n),b:Fc("b",e,t,n),transposeA:Fc("transposeA",e,t,n),transposeB:Fc("transposeB",e,t,n),bias:u,activation:a,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return cr((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Qr(Fc("x",e,t,n),Fc("mean",e,t,n),Fc("variance",e,t,n),Fc("offset",e,t,n),Fc("scale",e,t,n),Fc("epsilon",e,t,n))];case"LRN":return[Zi(Fc("x",e,t,n),Fc("radius",e,t,n),Fc("bias",e,t,n),Fc("alpha",e,t,n),Fc("beta",e,t,n))];case"Softmax":return[$l(Fc("x",e,t,n))];case"LogSoftmax":return[lo(Fc("x",e,t,n))];case"SparseToDense":return[Yl(Fc("sparseIndices",e,t,n),Fc("outputShape",e,t,n),Fc("sparseValues",e,t,n),Fc("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return cr((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[ro(Fc("x",e,t,n),s,a)]}case"Mean":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[To(Fc("x",e,t,n),s,a)]}case"Min":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[So(Fc("x",e,t,n),s,a)]}case"Sum":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[oo(Fc("x",e,t,n),s,a)]}case"All":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[Nr(Fc("x",e,t,n),s,a)]}case"Any":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[Ir(Fc("x",e,t,n),s,a)]}case"ArgMax":{const s=Fc("axis",e,t,n);return[$r(Fc("x",e,t,n),s)]}case"ArgMin":{const s=Fc("axis",e,t,n);return[Cr(Fc("x",e,t,n),s)]}case"Prod":{const s=Fc("axis",e,t,n),a=Fc("keepDims",e,t,n);return[Go(Fc("x",e,t,n),s,a)]}case"Cumsum":{const s=Fc("axis",e,t,n),a=Fc("exclusive",e,t,n),r=Fc("reverse",e,t,n);return[xi(Fc("x",e,t,n),s,a,r)]}case"Bincount":const s=Fc("x",e,t,n),a=Fc("weights",e,t,n),r=Fc("size",e,t,n);return[si(s,a,r)];case"DenseBincount":{const s=Fc("x",e,t,n),a=Fc("weights",e,t,n),r=Fc("size",e,t,n),i=Fc("binaryOutput",e,t,n);return[ki(s,a,r,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return cr((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Fc("n",e,t,n),a=Fc("axis",e,t,n);let r=Fc("tensors",e,t,n);return r=r.slice(0,s),[qr(r,a)]}case"Gather":{const s=Fc("x",e,t,n),a=Fc("indices",e,t,n);return[Wi(s,Na(a,"int32"),0)]}case"GatherV2":{const s=Fc("axis",e,t,n),a=Fc("batchDims",e,t,n),r=Fc("x",e,t,n),i=Fc("indices",e,t,n);return[Wi(r,Na(i,"int32"),s,a)]}case"Reverse":{const s=Fc("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const r=Fc("x",e,t,n);return[hl(r,a)]}case"ReverseV2":{const s=Fc("axis",e,t,n),a=Fc("x",e,t,n);return[hl(a,s)]}case"Slice":{const s=Fc("begin",e,t,n),a=Fc("size",e,t,n);return[Yr(Fc("x",e,t,n),s,a)]}case"StridedSlice":{const s=Fc("begin",e,t,n),a=Fc("end",e,t,n),r=Fc("strides",e,t,n),i=Fc("beginMask",e,t,n),o=Fc("endMask",e,t,n),l=Fc("ellipsisMask",e,t,n),u=Fc("newAxisMask",e,t,n),c=Fc("shrinkAxisMask",e,t,n),h=Fc("x",e,t,n);return[Ml(h,s,a,r,i,o,l,u,c)]}case"Pack":return cr((()=>{const s=Fc("axis",e,t,n),a=Fc("tensors",e,t,n),r=a[0].shape,i=Dl(a[0]).shape,o=a.map((e=>{const t=h(e.shape,r);if(!t&&!h(Dl(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Hr(e,r)}));return[_l(o,s)]}));case"Unpack":{const s=Fc("axis",e,t,n),a=Fc("tensor",e,t,n);return Gl(a,s)}case"Tile":{const s=Fc("reps",e,t,n);return[Li(Fc("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Fc("axis",e,t,n),a=Fc("numOrSizeSplits",e,t,n),r=Fc("x",e,t,n);return El(r,a,s)}case"ScatterNd":{const s=Fc("indices",e,t,n),a=Fc("values",e,t,n),r=Fc("shape",e,t,n);return[Xl(s,a,r)]}case"GatherNd":{const s=Fc("x",e,t,n),a=Fc("indices",e,t,n);return[Jl(s,a)]}case"SparseToDense":{const s=Fc("sparseIndices",e,t,n),a=Fc("outputShape",e,t,n),r=Fc("sparseValues",e,t,n),i=Fc("defaultValue",e,t,n);return[Yl(s,r,a,r.dtype===i.dtype?i:Na(i,r.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return cr((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Cl(Fc("x",e,t,n))];case"IFFT":return[Tl(Fc("x",e,t,n))];case"RFFT":return[Al(Fc("x",e,t,n))];case"IRFFT":return[Sl(Fc("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return cr((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Na(Fc("x",e,t,n),Fc("dtype",e,t,n))];case"ExpandDims":{const s=Fc("axis",e,t,n);return[Oi(Fc("x",e,t,n),s)]}case"Squeeze":{const s=Fc("axis",e,t,n);return[Dl(Fc("x",e,t,n),s)]}case"Reshape":return[Hr(Fc("x",e,t,n),Fc("shape",e,t,n))];case"MirrorPad":return[Ao(Fc("x",e,t,n),Fc("padding",e,t,n),Fc("mode",e,t,n))];case"PadV2":case"Pad":return[Bo(Fc("x",e,t,n),Fc("padding",e,t,n),Fc("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Fc("blockShape",e,t,n),a=Fc("paddings",e,t,n);return[Po(Fc("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Fc("blockShape",e,t,n),a=Fc("crops",e,t,n);return[Zr(Fc("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Fc("blockSize",e,t,n),a=Fc("dataFormat",e,t,n).toUpperCase();return[wi(Fc("x",e,t,n),s,a)]}case"BroadcastTo":return[ai(Fc("x",e,t,n),Fc("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=Fc("keyDType",e,t,n),r=Fc("valueDType",e,t,n),i=new Ih(a,r);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=Fc("tableHandle",e,t,n,s),r=Fc("keys",e,t,n),i=Fc("values",e,t,n),o=s.getHashTableById(a.id);return[await o.import(r,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=Fc("tableHandle",e,t,n,s),r=Fc("keys",e,t,n),i=Fc("defaultValue",e,t,n),o=s.getHashTableById(a.id);return[await o.find(r,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=Rc(e.op);if(a&&a.customExecutor)return a.customExecutor(new yh(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return z(a)?a.then((e=>[].concat(e))):[].concat(a)}class Ch{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Th(e,t,n,s){const a=new Set,r=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>Mc(e)[0]));let c=[];null!=s&&(c=s.map((e=>Mc(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(Rh(e)||Fh(e)||Dh(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):r.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:r,dynamicNode:i,syncInputs:o}}const Sh=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Eh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Ah=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function Rh(e){return Sh.indexOf(e.op)>=0}function Fh(e){return Eh.indexOf(e.op)>=0}function Dh(e){return Ah.indexOf(e.op)>=0}class _h{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new _h(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=Th(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:r}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(s.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:a}=n,r=[],i=Object.keys(a).map((e=>Mc(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&r.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&r.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&r.push(e)}));const l=new Set,u=[];for(;r.length>0;){const e=r.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&r.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[Mc(e)[0]])),a=t.map((e=>Mc(e)[0]));let r=a.map((e=>this.graph.nodes[e]));0===r.length&&(r=this._outputs);const i=this.getCompilationKey(s,r);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,r),this.compiledMap.set(i,o));const l={},u={};return cr((()=>{const n=new Ch(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=Mc(t),r=[];r[a]=e[t],s[n]=r}));const r=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=$h(t,s,n,this._resourceManager);if(z(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,r,a,i)}}return null==this.parent&&n.dispose(r),t.map((e=>Dc(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,a,r,i){"control"!==t.category&&-1===r.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[Oc(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!a.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const r=new Ch(this.weightMap,s,a,this.functionExecutorMap),i=await this.executeWithControlFlow(e,r,t,n),o=t.map((e=>Dc(e,i,r))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&r.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const a=Object.keys(e),r=a.map((e=>this.graph.nodes[Mc(e)[0]])),i=n.map((e=>Mc(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=Th(e,o,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=Mc(t),a=[];a[s]=e[t],d[n]=a}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(r,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!Rh(e)&&!Dc(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,a,r,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Fc("isConstant",e.node,s,n)&&([c]=_c(e.node.name,n)),null==s[e.node.name]){const h=$h(e.node,s,n,this._resourceManager);c||([c]=_c(e.node.name,n));const p=n.currentContext;z(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return u}processChildNodes(e,t,n,s,a,r){e.children.forEach((e=>{const[i]=_c(e.name,n);!a[i]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Dc(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Dc(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=Mc(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;i(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&i(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Mc(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=Mc(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Oh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Mh{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new Oh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Fa(e,this.loadOptions);else{const s=(t=e,n=this.loadOptions,Xs.getLoadHandlers(t,n));if(0===s.length)s.push(Fa(e,this.loadOptions));else if(s.length>1)throw new Error(`Found more than one (${s.length}) load handlers for URL '${[e]}'`);this.handler=s[0]}var t,n}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=function(e,t){const n={};let s,a=0;for(const r of t){const t=r.name,i=r.dtype,o=r.shape,l=c(o);let u;if("quantization"in r){const n=r.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${r.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${r.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${r.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Ws[n.dtype],c=e.slice(a,a+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=qs()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*o}else if("string"===i){const t=c(r.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const s=Ws[i],r=e.slice(a,a+l*s);if("float32"===i)u=new Float32Array(r);else if("int32"===i)u=new Int32Array(r);else if("bool"===i)u=new Uint8Array(r);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(r);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const a=Ps(e,o,"float32"),i=Ps(s,o,"float32");n[t]=zs(a,i),a.dispose(),i.dispose()}}a+=l*s}"complex64"!==i&&(n[t]=Ps(u,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new _h(nh.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=nh.Instance.transformGraph(e.modelInitializer);this.initializer=new _h(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Ys(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof us||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Lh(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new Mh(e,t);return await n.load(),n}function zh(e,t,n,s){return new(n||(n=Promise))((function(a,r){function i(e){try{l(s.next(e))}catch(e){r(e)}}function o(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){e.done?a(e.value):new n((function(t){t(e.value)})).then(i,o)}l((s=s.apply(e,t||[])).next())}))}function Bh(e,t){var n,s,a,r,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function o(r){return function(o){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,s&&(a=2&r[0]?s.return:r[0]?s.throw||((a=s.return)&&a.call(s),0):s.next)&&!(a=a.call(s,r[1])).done)return a;switch(s=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,s=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){i=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){i.label=r[1];break}if(6===r[0]&&i.label<a[1]){i.label=a[1],a=r;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(r);break}a[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],s=0}finally{n=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,o])}}}var Ph=function(e){return{startEndTensor:e,startPoint:Yr(e,[0,0],[-1,2]),endPoint:Yr(e,[0,2],[-1,2])}},Wh={strides:[8,16],anchors:[2,6]};function Vh(e,t){var n,s,a;if(e.topLeft instanceof us&&e.bottomRight instanceof us){var r=cr((function(){return[qr([Yr(io(t-1,e.topLeft),0,1),Yr(e.topLeft,1,1)]),qr([io(t-1,Yr(e.bottomRight,0,1)),Yr(e.bottomRight,1,1)])]}));n=r[0],s=r[1],null!=e.landmarks&&(a=cr((function(){var n=io(zl([t-1,0]),e.landmarks),s=zl([1,-1]);return br(n,s)})))}else{var i=e.topLeft,o=i[0],l=i[1],u=e.bottomRight,c=u[0],h=u[1];n=[t-1-o,l],s=[t-1-c,h],null!=e.landmarks&&(a=e.landmarks.map((function(e){return[t-1-e[0],e[1]]})))}var p={topLeft:n,bottomRight:s};return null!=a&&(p.landmarks=a),null!=e.probability&&(p.probability=e.probability instanceof us?e.probability.clone():e.probability),p}function Uh(e,t){return cr((function(){var n;return n=e.hasOwnProperty("box")?e.box:e,Dl(function(e,t){var n=br(e.startPoint,t),s=br(e.endPoint,t),a=li([n,s],1);return Ph(a)}(n,t).startEndTensor)}))}var Gh=function(){function e(e,t,n,s,a,r){this.blazeFaceModel=e,this.width=t,this.height=n,this.maxFaces=s,this.anchorsData=function(e,t,n){for(var s=[],a=0;a<n.strides.length;a++)for(var r=n.strides[a],i=Math.floor((t+r-1)/r),o=Math.floor((e+r-1)/r),l=n.anchors[a],u=0;u<i;u++)for(var c=r*(u+.5),h=0;h<o;h++)for(var p=r*(h+.5),d=0;d<l;d++)s.push([p,c]);return s}(t,n,Wh),this.anchors=Bl(this.anchorsData),this.inputSizeData=[t,n],this.inputSize=zl([t,n]),this.iouThreshold=a,this.scoreThreshold=r}return e.prototype.getBoundingBoxes=function(e,t,n){return void 0===n&&(n=!0),zh(this,void 0,void 0,(function(){var s,a,r,i,o,l,u,c,h,p,d,f,m,g,y=this;return Bh(this,(function(b){switch(b.label){case 0:return s=cr((function(){var t=_u.resizeBilinear(e,[y.width,y.height]),n=br(io(yr(t,255),.5),2),s=y.blazeFaceModel.predict(n),a=Dl(s),r=function(e,t,n){var s=Yr(e,[0,1],[-1,2]),a=mr(s,t),r=Yr(e,[0,3],[-1,2]),i=yr(r,n),o=yr(a,n),l=yr(i,2),u=io(o,l),c=mr(o,l),h=br(u,n),p=br(c,n);return li([h,p],1)}(a,y.anchors,y.inputSize),i=Yr(a,[0,0],[-1,1]);return[a,r,Dl(Xr(i))]})),a=s[0],r=s[1],i=s[2],o=console.warn,console.warn=function(){},l=_u.nonMaxSuppression(r,i,this.maxFaces,this.iouThreshold,this.scoreThreshold),console.warn=o,[4,l.array()];case 1:return u=b.sent(),l.dispose(),c=u.map((function(e){return Yr(r,[e,0],[1,-1])})),t?[3,3]:[4,Promise.all(c.map((function(e){return zh(y,void 0,void 0,(function(){var t;return Bh(this,(function(n){switch(n.label){case 0:return[4,e.array()];case 1:return t=n.sent(),e.dispose(),[2,t]}}))}))})))];case 2:c=b.sent(),b.label=3;case 3:for(h=e.shape[1],p=e.shape[2],d=t?yr([p,h],this.inputSize):[p/this.inputSizeData[0],h/this.inputSizeData[1]],f=[],m=function(e){var s=c[e],r=cr((function(){var r=Ph(s instanceof us?s:Bl(s));if(!n)return r;var o,l=u[e];return o=t?Yr(y.anchors,[l,0],[1,2]):y.anchorsData[l],{box:r,landmarks:Hr(Dl(Yr(a,[l,5],[1,-1])),[6,-1]),probability:Yr(i,[l],[1]),anchor:o}}));f.push(r)},g=0;g<c.length;g++)m(g);return r.dispose(),i.dispose(),a.dispose(),[2,{boxes:f,scaleFactor:d}]}}))}))},e.prototype.estimateFaces=function(e,t,n,s){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===s&&(s=!0),zh(this,void 0,void 0,(function(){var a,r,i,o,l,u,c=this;return Bh(this,(function(h){switch(h.label){case 0:return a=function(e){return e instanceof us?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),r=a[1],i=cr((function(){return e instanceof us||(e=La(e)),Oi(Na(e,"float32"),0)})),[4,this.getBoundingBoxes(i,t,s)];case 1:return o=h.sent(),l=o.boxes,u=o.scaleFactor,i.dispose(),t?[2,l.map((function(e){var t=Uh(e,u),a={topLeft:Yr(t,[0],[2]),bottomRight:Yr(t,[2],[2])};if(s){var i=e,o=i.landmarks,l=i.probability,c=i.anchor,h=br(mr(o,c),u);a.landmarks=h,a.probability=l}return n&&(a=Vh(a,r)),a}))]:[2,Promise.all(l.map((function(e){return zh(c,void 0,void 0,(function(){var t,a,i,o,l,c,h,p,d,f,m,g=this;return Bh(this,(function(y){switch(y.label){case 0:return t=Uh(e,u),s?[3,2]:[4,t.array()];case 1:return l=y.sent(),a={topLeft:l.slice(0,2),bottomRight:l.slice(2)},[3,4];case 2:return[4,Promise.all([e.landmarks,t,e.probability].map((function(e){return zh(g,void 0,void 0,(function(){return Bh(this,(function(t){return[2,e.array()]}))}))})))];case 3:i=y.sent(),o=i[0],l=i[1],c=i[2],h=e.anchor,d=(p=u)[0],f=p[1],m=o.map((function(e){return[(e[0]+h[0])*d,(e[1]+h[1])*f]})),a={topLeft:l.slice(0,2),bottomRight:l.slice(2),landmarks:m,probability:c},function(e){e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose()}(e.box),e.landmarks.dispose(),e.probability.dispose(),y.label=4;case 4:return t.dispose(),n&&(a=Vh(a,r)),[2,a]}}))}))})))]}}))}))},e}();const Hh={kernelName:j,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,Ol(Na(n,"float32"),-1))}}},jh={kernelName:K,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Fo(Na(n,"float32")),s=Rl(io(fl(1),t));return no(yr(e,s))}}}},Kh={kernelName:q,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Rl(io(Fo(Na(n,"float32")),1));return yr(e,t)}}}},qh={kernelName:X,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{let t=e;const s=$i(n.shape,a);return s.length>0&&(t=oo(t,s)),Hr(t,n.shape)},b:()=>{let t=e;const n=$i(s.shape,a);return n.length>0&&(t=oo(t,n)),Hr(t,s.shape)}}}},Xh={kernelName:Y,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},Yh={kernelName:Q,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(n)}}},Jh={kernelName:ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(n)}}},Zh={kernelName:te,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,Rl(io(fl(1),Fo(Na(n,"float32")))))}}},Qh={kernelName:ne,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Rl(mr(fl(1),Fo(Na(n,"float32"))));return yr(e,t)}}}},ep={kernelName:re,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{const t=mr(Fo(n),Fo(s));let r=br(e,yr(s,t));const i=$i(n.shape,a);return i.length>0&&(r=oo(r,i)),Hr(r,n.shape)},b:()=>{const t=mr(Fo(n),Fo(s));let r=no(br(e,yr(n,t)));const i=$i(s.shape,a);return i.length>0&&(r=oo(r,i)),Hr(r,s.shape)}}}},tp={kernelName:se,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,mr(Fo(Na(n,"float32")),1))}}},np={kernelName:ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,io(fl(1),Fo(Na(n,"float32"))))}}};const sp=Ls({avgPool3dGrad_:function(e,t,n,s,a,r){const o=Os(e,"dy","avgPool3dGrad"),l=Os(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=Hr(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),i(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),i(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),null!=r&&i(p(a),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`));const d={dy:u,input:c},f={filterSize:n,strides:s,pad:a,dimRoundingMode:r},m=Ts.runKernel(ue,d,f);return h?Hr(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),ap={kernelName:le,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i,dimRoundingMode:o}=n;return{x:()=>sp(e,s,a,r,i,o)}}};const rp=Ls({avgPoolGrad_:function(e,t,n,s,a){const r=Os(e,"dy","avgPoolGrad"),o=Os(t,"input","avgPoolGrad");i(o.rank===r.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${r.rank})`));let l=o,u=r,c=!1;3===o.rank&&(c=!0,l=Hr(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=Hr(r,[1,r.shape[0],r.shape[1],r.shape[2]])),i(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),i(4===l.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`));const h={dy:u,input:l},p={filterSize:n,strides:s,pad:a},d=Ts.runKernel(oe,h,p);return c?Hr(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),ip={kernelName:ie,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i}=n;return{x:()=>rp(e,s,a,r,i)}}},op={kernelName:ce,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:i}=n;return r||i?!r&&i?{a:()=>Da(e,a,!1,!1),b:()=>Da(e,s,!0,!1)}:r&&!i?{a:()=>Da(a,e,!1,!0),b:()=>Da(s,e,!1,!1)}:{a:()=>Da(a,e,!0,!0),b:()=>Da(e,s,!0,!0)}:{a:()=>Da(e,a,!1,!0),b:()=>Da(s,e,!0,!1)}}},lp={kernelName:he,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>Po(e,s,a)}}},up={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,i=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])i[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>oo(e,o,!0)}}},cp={kernelName:de,gradFunc:e=>({x:()=>e.clone()})},hp={kernelName:fe,gradFunc:e=>({x:()=>Ei(e)})},pp={kernelName:me,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>Si(xo(Ui(s,a),Yi(s,r)),e,Ei(e))}}},dp={kernelName:ye,inputsToSave:["x"],gradFunc:Hh.gradFunc},fp={kernelName:be,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:a}=n,r=y(a,t[0].shape)[0],i=s.map((e=>e[r]));return El(e,i,r).map((e=>()=>e))}},mp={kernelName:xe,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:o,pad:l,dataFormat:u}=n;return i(Vr(r),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`)),{x:()=>di(s.shape,e,a,o,l,u),filter:()=>Ql(s,e,a.shape,o,l,u)}}},gp={kernelName:we,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>hi(e,a,r,i,o,1,l),filter:()=>Ql(e,s,a.shape,r,i,o,l)}}};const yp=Ls({conv3DBackpropFilter_:function(e,t,n,s,a){let r=e;4===e.rank&&(r=Hr(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Hr(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),i(5===r.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`)),i(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),i(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),i(r.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${n[3]}.`)),i(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const l={x:r,dy:o},u={strides:s,pad:a,filterShape:n};return Ts.runKernel(Ne,l,u)}}),bp={kernelName:ve,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;i(Vr(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[o,l]=t;return{x:()=>gi(o.shape,e,l,a,r),filter:()=>yp(o,e,l.shape,a,r)}}},xp={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(no(xl(Na(n,"float32"))),e)}}},kp={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(kl(Na(n,"float32")),e)}}},wp={kernelName:Te,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:i}=n;return{x:()=>{const t=mo([a],s.rank);let n=xi(e,a,r,!i);return null!=t&&(n=Oa(n,t)),n}}}},vp={kernelName:Re,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:o}=n,l=null==s?[1,1]:s;i(Vr(l),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`));const[u,c]=t;return i(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),i(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),i(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),i(Ur(a,l),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${l}'.`)),null!=o&&i(p(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),{x:()=>iu(u.shape,e,c,a,r,s,o),filter:()=>ru(u,e,c.shape,a,r,s,o)}}},Np={kernelName:Oe,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,r={x:s,filter:a,dy:e},i={x:s,filter:a,dy:e};return{x:()=>Ts.runKernel(Me,r,n),filter:()=>Ts.runKernel(Le,i,n)}}},Ip={kernelName:Be,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Ts.runKernel(Pe,s)}}},$p={kernelName:We,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=br(_i(no(Fo(n))),2/Math.sqrt(Math.PI));return{x:()=>br(e,s)}}},Cp={kernelName:Ue,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,n)}}},Tp={kernelName:Ge,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Hr(e,n.shape)}}},Sp={kernelName:He,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,_i(n))}}},Ep={kernelName:Xe,gradFunc:e=>({x:()=>Ei(e)})},Ap={kernelName:Ye,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{const t=yr(e,Na(s,"float32")),r=$i(n.shape,a);return r.length>0?Hr(oo(t,r),n.shape):t},b:()=>{let t=br(e,Na(n,"float32"));const r=$i(s.shape,a);r.length>0&&(t=Hr(oo(t,r),s.shape));const i=Fo(s);return no(yr(t,Na(i,"float32")))}}}},Rp={kernelName:Je,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,r,i,o]=t,l=null==o?fl(1):o,u=$i(r.shape,a.shape),c=[];if(1===r.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const h=io(a,r),p=br(e,l),d=dl(mr(i,fl(s))),f=br(br(br(d,d),d),fl(-.5));return{x:()=>1===r.rank?Hr(br(br(e,Li(Hr(d,[1,1,1,r.shape[0]]),c)),l),a.shape):Hr(br(br(e,d),l),a.shape),mean:()=>{let e=br(br(d,fl(-1)),p);return 1===r.rank&&(e=oo(e,u)),Hr(e,r.shape)},variance:()=>{let e=br(br(f,h),p);return 1===r.rank&&(e=oo(e,u)),Hr(e,r.shape)},scale:()=>{const t=br(h,d);let n=br(e,t);return 1===r.rank&&(n=oo(n,u)),Hr(n,r.shape)},offset:()=>{let t=e;return 1===r.rank&&(t=oo(t,u)),Hr(t,r.shape)}}}},Fp={kernelName:Ze,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r}=n,i=y(r,s.shape)[0];return{x:()=>{const t=s.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(r,t.length).slice(1),c=u.length,h=Dp(0,l),p=Dp(l+1,l+1+c),d=_p([o,[n],u]),f=Hr(e,d),m=Hr(a,[n]),g=_p([[l],h,p]),y=Oa(f,g);let b=Ul(y,m,s.shape[i]);const x=go(g);return b=Oa(b,x),b},indices:()=>a}}};function Dp(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function _p(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Op={kernelName:tt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Ei(n),b:()=>Ei(s)}}},Mp={kernelName:nt,gradFunc:e=>({x:()=>Na(e,"float32")})},Lp={kernelName:rt,gradFunc:e=>({x:()=>Ei(e)})},zp={kernelName:it,gradFunc:e=>({x:()=>Ei(e)})},Bp={kernelName:ot,gradFunc:e=>({x:()=>Ei(e)})},Pp={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,r=Vi(s,0);return{x:()=>Si(r,e,br(e,a))}}},Wp={kernelName:dt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,mr(n,1))}}},Vp={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,Na(n,"float32"))}}},Up={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=_i(s);return io(e,br(oo(e,a,!0),t))}}}};const Gp=Ls({localResponseNormalizationBackprop_:function(e,t,n,s=5,a=1,r=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:a,alpha:r,beta:i};return Ts.runKernel(bt,o,l)}}),Hp={kernelName:yt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:i,alpha:o,beta:l}=n;return{x:()=>Gp(s,a,e,r,i,o,l)}}};function jp(e,t,n,s){return t.rank<n.rank&&(t=Hr(t,po(t.shape,s))),e.rank<n.rank&&(e=Hr(e,po(e.shape,s))),{x:()=>br(e,Na(Ti(n,t),e.dtype))}}const Kp={kernelName:xt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],i=jp(e,t[1],r,y(a,r.shape));return{x:()=>i.x()}}},qp={kernelName:kt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>br(e,Na(Ui(n,s),"float32")),b:()=>br(e,Na(Xi(n,s),"float32"))}}};const Xp=Ls({maxPool3dGrad_:function(e,t,n,s,a,r,o){const l=Os(e,"dy","maxPool3dGrad"),u=Os(t,"input","maxPool3dGrad"),c=Os(n,"output","maxPool3dGrad");let h=l,d=u,f=c,m=!1;4===u.rank&&(m=!0,h=Hr(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=Hr(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),f=Hr(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),i(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),i(5===d.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`)),i(5===f.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${f.rank}.`)),null!=o&&i(p(r),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const g={dy:h,input:d,output:f},y={filterSize:s,strides:a,pad:r,dimRoundingMode:o},b=Ts.runKernel(It,g,y);return m?Hr(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),Yp={kernelName:Nt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>Xp(e,s,a,r,i,o,l)}}};const Jp=Ls({maxPoolGrad_:function(e,t,n,s,a,r,o){const l=Os(e,"dy","maxPoolGrad"),u=Os(t,"input","maxPoolGrad"),c=Os(n,"output","maxPoolGrad");i(u.rank===l.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`)),i(4===l.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),i(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=o&&i(p(r),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const h={dy:l,input:u,output:c},d={filterSize:s,strides:a,pad:r,dimRoundingMode:o};return Ts.runKernel(vt,h,d)}}),Zp={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>Yr(e,r,s.shape)}}},Qp={kernelName:gn,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>Zr(e,s,a)}}},ed={kernelName:yn,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>qr(e,s)}}};const td=[Hh,jh,Kh,qh,Xh,Yh,Jh,Zh,Qh,ep,tp,np,ap,ip,op,lp,up,cp,hp,pp,dp,fp,gp,mp,bp,xp,kp,wp,vp,Np,{kernelName:ze,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{const t=yr(e,Na(s,"float32")),r=$i(n.shape,a);return r.length>0?Hr(oo(t,r),n.shape):t},b:()=>{let t=br(e,Na(n,"float32"));const r=$i(s.shape,a);r.length>0&&(t=Hr(oo(t,r),s.shape));const i=Fo(s);return no(yr(t,Na(i,"float32")))}}}},Ip,$p,Cp,Tp,Sp,Ap,Ep,Rp,Fp,Op,Mp,Lp,zp,Bp,Pp,Wp,Vp,Up,Hp,Kp,Kp,qp,Yp,{kernelName:wt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o}=n;return{x:()=>Jp(e,s,a,r,i,o)}}},{kernelName:Ct,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,r=y(a,s.shape),i=c(ho(s.shape,r)[1]);return{x:()=>{const t=s.shape.slice();r.forEach((e=>{t[e]=1}));const n=Hr(e,t);return yr(br(n,Lo(s.shape,"float32")),i)}}}},{kernelName:Tt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,i]=t,o=jp(e,i,r,y(a,r.shape));return{x:()=>o.x()}}},{kernelName:St,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>br(e,Na(Yi(n,s),"float32")),b:()=>br(e,Na(Vi(n,s),"float32"))}}},{kernelName:Et,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>Yr(e,r,s.shape)}}},{kernelName:At,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{const t=$i(n.shape,a);return t.length>0?Hr(oo(e,t),n.shape):e},b:()=>{const t=br(e,no(Pi(yr(n,s)))),r=$i(s.shape,a);return r.length>0?Hr(oo(t,r),s.shape):t}}}},{kernelName:Ft,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{const t=br(e,Na(s,"float32")),r=$i(n.shape,a);return r.length>0?Hr(oo(t,r),n.shape):t},b:()=>{const t=br(e,Na(n,"float32")),r=$i(s.shape,a);return r.length>0?Hr(oo(t,r),s.shape):t}}}},{kernelName:Dt,gradFunc:e=>({x:()=>no(e)})},{kernelName:Bt,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Mo(n.shape,"float32")}}},{kernelName:zt,gradFunc:e=>({x:()=>Ei(e)})},{kernelName:Pt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Gl(e,s).map((e=>()=>e))}},Zp,Zp,{kernelName:Vt,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,a]=t,r=n,i=s,o=Ci(r.shape,i.shape);return{a:()=>{const t=Na(i,"float32");let n=br(e,br(t,Vo(r,io(t,fl(1)))));const s=$i(r.shape,o);return s.length>0&&(n=oo(n,s)),Hr(n,r.shape)},b:()=>{const t=Vi(r,0),n=Si(t,Qi(r),Ei(r));let s=br(e,br(a,n));const l=$i(i.shape,o);return l.length>0&&(s=oo(s,l)),Hr(s,i.shape)}}}},{kernelName:Ut,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=Vi(n,0);return{x:()=>Si(a,e,br(e,s)),alpha:()=>{let t=Si(a,Ei(e),br(e,n));const r=$i(s.shape,e.shape);return r.length>0&&(t=oo(t,r)),Hr(t,s.shape)}}}},{kernelName:Kt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,no(Fo(n)))}}},{kernelName:en,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=br(Yi(n,6),Ol(n));return{x:()=>br(e,Na(s,"float32"))}}},{kernelName:qt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,Na(Ol(n),"float32"))}}},{kernelName:Xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Hr(e,n.shape)}}},{kernelName:Zt,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>Ts.runKernel(Qt,a,n)}}},{kernelName:Yt,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>Ts.runKernel(Jt,a,n)}}},{kernelName:tn,gradFunc:(e,t,n)=>{const{dims:s}=n,a=y(s,e.shape);return{x:()=>hl(e,a)}}},{kernelName:nn,gradFunc:e=>({x:()=>Ei(e)})},{kernelName:sn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(yr(e,br(Vo(n,1.5),2)))}}},{kernelName:rn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Na(Ei(n),"float32"),t:()=>br(e,Na(n,e.dtype)),e:()=>br(e,Na(ko(n),e.dtype))}}},{kernelName:on,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Vi(n,fl(0)),s=fl(sc),a=fl(ac),r=br(e,a),i=br(br(e,s),_i(Na(n,"float32")));return Si(t,r,i)}}}},{kernelName:pn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,br(n,io(fl(1),n)))}}},{kernelName:hn,gradFunc:e=>({x:()=>Ei(e)})},{kernelName:un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(yi(Na(n,"float32")),e)}}},{kernelName:cn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(bi(Na(n,"float32")),e)}}},{kernelName:ln,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,i=s.shape,[o,l]=nr(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>Bo(e,u)}}},{kernelName:bn,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,r=br(e,s);return{logits:()=>io(r,br(oo(r,[a],true),s))}}},{kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,Xr(n))}}},Qp,Qp,ed,ed,{kernelName:fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,br(Rl(Na(n,"float32")),2))}}},{kernelName:xn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=fl(2);return{a:()=>br(e,br(a,io(n,s))),b:()=>br(e,br(a,io(s,n)))}}},{kernelName:kn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(e,br(Na(n,"float32"),2))}}},{kernelName:Dn,gradFunc:e=>({x:()=>Ei(e)})},{kernelName:wn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Ci(n.shape,s.shape);return{a:()=>{let t=e;const s=$i(n.shape,a);return s.length>0&&(t=oo(t,s)),Hr(t,n.shape)},b:()=>{let t=e;const n=$i(s.shape,a);return n.length>0&&(t=oo(t,n)),Hr(no(t),s.shape)}}}},{kernelName:mn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:r}=n;y(r,s.shape).forEach((e=>{a[e]=1}));const i=Hr(e,a),o=br(i,Lo(s.shape,"float32"));return{x:()=>o}}},{kernelName:In,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>yr(e,Fo(yi(n)))}}},{kernelName:$n,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>br(io(fl(1),Fo(n)),e)}}},{kernelName:Cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=Ei(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=mr(t,Yr(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=mr(t,Yr(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)t=mr(t,Yr(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=mr(t,Yr(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Sn,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=go(a);return{x:()=>Oa(e,r)}}},{kernelName:An,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>_l(e,a)}}},{kernelName:Rn,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Co(t,Ei(t)),s=Wi(e,n);let a=Ui(t,fl(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=Oi(a,e+1);a=xo(a,Lo(s.shape,"bool"));const i=Ei(s);return Si(a,s,i)}(e,n)}}},{kernelName:Fn,gradFunc:e=>({x:()=>Ei(e)})}];for(const e of td)Hn(e);let nd;function sd(){return null==nd&&(nd=Ts.backend.epsilon()),nd}cs().prototype.abs=function(){return this.throwIfDisposed(),xr(this)},cs().prototype.acos=function(){return this.throwIfDisposed(),kr(this)},cs().prototype.acosh=function(){return this.throwIfDisposed(),wr(this)},cs().prototype.add=function(e){return this.throwIfDisposed(),mr(this,e)},cs().prototype.all=function(e,t){return this.throwIfDisposed(),Nr(this,e,t)},cs().prototype.any=function(e,t){return this.throwIfDisposed(),Ir(this,e,t)},cs().prototype.argMax=function(e){return this.throwIfDisposed(),$r(this,e)},cs().prototype.argMin=function(e){return this.throwIfDisposed(),Cr(this,e)},cs().prototype.asScalar=function(){return this.throwIfDisposed(),i(1===this.size,(()=>"The array must have only 1 element.")),Hr(this,[])},cs().prototype.asType=function(e){return this.throwIfDisposed(),Na(this,e)},cs().prototype.as1D=function(){return this.throwIfDisposed(),Hr(this,[this.size])},cs().prototype.as2D=function(e,t){return this.throwIfDisposed(),Hr(this,[e,t])},cs().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Hr(this,[e,t,n])},cs().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Hr(this,[e,t,n,s])},cs().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),Hr(this,[e,t,n,s,a])},cs().prototype.asin=function(){return this.throwIfDisposed(),Tr(this)},cs().prototype.asinh=function(){return this.throwIfDisposed(),Sr(this)},cs().prototype.atan=function(){return this.throwIfDisposed(),Er(this)},cs().prototype.atan2=function(e){return this.throwIfDisposed(),Ar(this,e)},cs().prototype.atanh=function(){return this.throwIfDisposed(),Rr(this)},cs().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),jr(this,e,t,n,s)},cs().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Zr(this,e,t)},cs().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),Qr(this,e,t,n,s,a)},cs().prototype.broadcastTo=function(e){return this.throwIfDisposed(),ai(this,e)},cs().prototype.cast=function(e){return this.throwIfDisposed(),Na(this,e)},cs().prototype.ceil=function(){return this.throwIfDisposed(),ri(this)},cs().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),ii(this,e,t)},cs().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof us&&(e=[e]),qr([this,...e],t)},cs().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),pi(this,e,t,n,s,a,r)},cs().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),fi(this,e,t,n,s,a)},cs().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),hi(this,e,t,n,s,a,r)},cs().prototype.cos=function(){return this.throwIfDisposed(),yi(this)},cs().prototype.cosh=function(){return this.throwIfDisposed(),bi(this)},cs().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),xi(this,e,t,n)},cs().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),wi(this,e,t)},cs().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),vi(this,e,t,n,s,a,r)},cs().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),Ni(this,e,t,n,s,a)},cs().prototype.divNoNan=function(e){return this.throwIfDisposed(),Ai(this,e)},cs().prototype.div=function(e){return this.throwIfDisposed(),yr(this,e)},cs().prototype.dot=function(e){return this.throwIfDisposed(),Ri(this,e)},cs().prototype.elu=function(){return this.throwIfDisposed(),Fi(this)},cs().prototype.equal=function(e){return this.throwIfDisposed(),Ti(this,e)},cs().prototype.erf=function(){return this.throwIfDisposed(),Di(this)},cs().prototype.exp=function(){return this.throwIfDisposed(),_i(this)},cs().prototype.expandDims=function(e){return this.throwIfDisposed(),Oi(this,e)},cs().prototype.expm1=function(){return this.throwIfDisposed(),Mi(this)},cs().prototype.fft=function(){return this.throwIfDisposed(),Cl(this)},cs().prototype.flatten=function(){return this.throwIfDisposed(),Hr(this,[this.size])},cs().prototype.floor=function(){return this.throwIfDisposed(),Pi(this)},cs().prototype.floorDiv=function(e){return this.throwIfDisposed(),gr(this,e)},cs().prototype.gather=function(e,t){return this.throwIfDisposed(),Wi(this,e,t)},cs().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Ui(this,e)},cs().prototype.greater=function(e){return this.throwIfDisposed(),Vi(this,e)},cs().prototype.ifft=function(){return this.throwIfDisposed(),Tl(this)},cs().prototype.irfft=function(){return this.throwIfDisposed(),Sl(this)},cs().prototype.isFinite=function(){return this.throwIfDisposed(),Hi(this)},cs().prototype.isInf=function(){return this.throwIfDisposed(),ji(this)},cs().prototype.isNaN=function(){return this.throwIfDisposed(),Ki(this)},cs().prototype.leakyRelu=function(e){return this.throwIfDisposed(),qi(this,e)},cs().prototype.lessEqual=function(e){return this.throwIfDisposed(),Yi(this,e)},cs().prototype.less=function(e){return this.throwIfDisposed(),Xi(this,e)},cs().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Zi(this,e,t,n,s)},cs().prototype.logSigmoid=function(){return this.throwIfDisposed(),ao(this)},cs().prototype.logSoftmax=function(e){return this.throwIfDisposed(),lo(this,e)},cs().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),bo(this,e,t)},cs().prototype.log=function(){return this.throwIfDisposed(),Qi(this)},cs().prototype.log1p=function(){return this.throwIfDisposed(),eo(this)},cs().prototype.logicalAnd=function(e){return this.throwIfDisposed(),xo(this,e)},cs().prototype.logicalNot=function(){return this.throwIfDisposed(),ko(this)},cs().prototype.logicalOr=function(e){return this.throwIfDisposed(),wo(this,e)},cs().prototype.logicalXor=function(e){return this.throwIfDisposed(),vo(this,e)},cs().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Da(this,e,t,n)},cs().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),No(this,e,t,n,s)},cs().prototype.max=function(e,t){return this.throwIfDisposed(),ro(this,e,t)},cs().prototype.maximum=function(e){return this.throwIfDisposed(),Co(this,e)},cs().prototype.mean=function(e,t){return this.throwIfDisposed(),To(this,e,t)},cs().prototype.min=function(e,t){return this.throwIfDisposed(),So(this,e,t)},cs().prototype.minimum=function(e){return this.throwIfDisposed(),Eo(this,e)},cs().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Ao(this,e,t)},cs().prototype.mod=function(e){return this.throwIfDisposed(),Ro(this,e)},cs().prototype.mul=function(e){return this.throwIfDisposed(),br(this,e)},cs().prototype.neg=function(){return this.throwIfDisposed(),no(this)},cs().prototype.norm=function(e,t,n){return this.throwIfDisposed(),ql(this,e,t,n)},cs().prototype.notEqual=function(e){return this.throwIfDisposed(),Oo(this,e)},cs().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),_a(this,e,t,n)},cs().prototype.onesLike=function(){return this.throwIfDisposed(),zo(this)},cs().prototype.pad=function(e,t){return this.throwIfDisposed(),Bo(this,e,t)},cs().prototype.pool=function(e,t,n,s,a){return this.throwIfDisposed(),Wo(this,e,t,n,s,a)},cs().prototype.pow=function(e){return this.throwIfDisposed(),Vo(this,e)},cs().prototype.prelu=function(e){return this.throwIfDisposed(),Uo(this,e)},cs().prototype.prod=function(e,t){return this.throwIfDisposed(),Go(this,e,t)},cs().prototype.reciprocal=function(){return this.throwIfDisposed(),ll(this)},cs().prototype.relu=function(){return this.throwIfDisposed(),ul(this)},cs().prototype.relu6=function(){return this.throwIfDisposed(),cl(this)},cs().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Hr(this,e.shape)},cs().prototype.reshape=function(e){return this.throwIfDisposed(),Hr(this,e)},cs().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Su(this,e,t,n)},cs().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Eu(this,e,t,n)},cs().prototype.reverse=function(e){return this.throwIfDisposed(),hl(this,e)},cs().prototype.rfft=function(){return this.throwIfDisposed(),Al(this)},cs().prototype.round=function(){return this.throwIfDisposed(),pl(this)},cs().prototype.rsqrt=function(){return this.throwIfDisposed(),dl(this)},cs().prototype.selu=function(){return this.throwIfDisposed(),ml(this)},cs().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),gl(this,e,t,n,s,a,r)},cs().prototype.sigmoid=function(){return this.throwIfDisposed(),Xr(this)},cs().prototype.sign=function(){return this.throwIfDisposed(),bl(this)},cs().prototype.sin=function(){return this.throwIfDisposed(),xl(this)},cs().prototype.sinh=function(){return this.throwIfDisposed(),kl(this)},cs().prototype.slice=function(e,t){return this.throwIfDisposed(),Yr(this,e,t)},cs().prototype.softmax=function(e){return this.throwIfDisposed(),$l(this,e)},cs().prototype.softplus=function(){return this.throwIfDisposed(),so(this)},cs().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Po(this,e,t)},cs().prototype.split=function(e,t){return this.throwIfDisposed(),El(this,e,t)},cs().prototype.sqrt=function(){return this.throwIfDisposed(),Rl(this)},cs().prototype.square=function(){return this.throwIfDisposed(),Fo(this)},cs().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Fl(this,e)},cs().prototype.squeeze=function(e){return this.throwIfDisposed(),Dl(this,e)},cs().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof us?[this,e]:[this,...e];return _l(n,t)},cs().prototype.step=function(e){return this.throwIfDisposed(),Ol(this,e)},cs().prototype.stridedSlice=function(e,t,n,s,a,r,i,o){return this.throwIfDisposed(),Ml(this,e,t,n,s,a,r,i,o)},cs().prototype.sub=function(e){return this.throwIfDisposed(),io(this,e)},cs().prototype.sum=function(e,t){return this.throwIfDisposed(),oo(this,e,t)},cs().prototype.tan=function(){return this.throwIfDisposed(),Ll(this)},cs().prototype.tanh=function(){return this.throwIfDisposed(),Jr(this)},cs().prototype.tile=function(e){return this.throwIfDisposed(),Li(this,e)},cs().prototype.toBool=function(){return this.throwIfDisposed(),Na(this,"bool")},cs().prototype.toFloat=function(){return this.throwIfDisposed(),Na(this,"float32")},cs().prototype.toInt=function(){return this.throwIfDisposed(),Na(this,"int32")},cs().prototype.topk=function(e,t){return this.throwIfDisposed(),Pl(this,e,t)},cs().prototype.transpose=function(e){return this.throwIfDisposed(),Oa(this,e)},cs().prototype.unique=function(e){return this.throwIfDisposed(),Vl(this,e)},cs().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Ul(this,e,t)},cs().prototype.unstack=function(e){return this.throwIfDisposed(),Gl(this,e)},cs().prototype.where=function(e,t){return this.throwIfDisposed(),Si(e,this,t)},cs().prototype.zerosLike=function(){return this.throwIfDisposed(),Ei(this)};class ad extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ad.prototype)}}class rd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,rd.prototype)}}class id extends Error{constructor(e){super(e),Object.setPrototypeOf(this,id.prototype)}}class od extends Error{constructor(e){super(e),Object.setPrototypeOf(this,od.prototype)}}class ld extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ld.prototype)}}function ud(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function cd(e,t){if(!e)throw new ld(t)}function hd(e,t){let n=0;for(const s of e)s===t&&n++;return n}function pd(e){return 1===e.length?e[0]:e}function dd(e){return Array.isArray(e)?e:[e]}function fd(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function md(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let gd={};function yd(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function bd(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>bd(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?bd(t):e[n]=t.value)}}}function xd(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in gd)r=gd[a];else if(r=t[a],null==r)throw new id(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new id(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const i=r.className;let o,l;if(i in n?[o,l]=n[i]:i in gd?[o,l]=gd.className:i in t&&([o,l]=t[i]),null==o)throw new id(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(gd))e[t]=gd[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},gd);for(const e of Object.keys(n))gd[e]=n[e];bd(r.config);const s=l(o,r.config,n,a);return gd=Object.assign({},t),s}{const e=Object.assign({},gd);for(const e of Object.keys(n))gd[e]=n[e];const t=new o(r.config);return gd=Object.assign({},e),t}}}function kd(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function wd(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function vd(e){if(null==e)throw new id(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Nd(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new id(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Id(e,t,n=0,s=1/0){return cd(n>=0),cd(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function $d(e,t){Array.isArray(e)?(i(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>$d(e,`element ${n+1} of ${t}`)))):i(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Cd(e)}.`))}function Cd(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Cd(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Td(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Sd(e,t){return cr((()=>Rl(oo(br(e,e),t,!0))))}class Ed extends rr{getConfig(){return{}}}class Ad extends Ed{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return cr((()=>{const t=Sd(e,this.axis),n=ii(t,0,this.maxValue);return br(e,yr(n,mr(sd(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Ad.className="MaxNorm",or(Ad);class Rd extends Ed{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return cr((()=>yr(e,mr(sd(),Sd(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Rd.className="UnitNorm",or(Rd);class Fd extends Ed{apply(e){return ul(e)}}Fd.className="NonNeg",or(Fd);class Dd extends Ed{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return cr((()=>{const t=Sd(e,this.axis),n=mr(br(this.rate,ii(t,this.minValue,this.maxValue)),br(1-this.rate,t));return br(e,yr(n,mr(sd(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Dd.className="MinMaxNorm",or(Dd);const _d={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Od(e){return yd(e)}function Md(e,t={}){return xd(e,ir.getMap().classNameMap,t,"constraint")}function Ld(e){if(null==e)return null;if("string"==typeof e){return Md({className:e in _d?_d[e]:e,config:{}})}return e instanceof Ed?e:Md(e)}const zd=["channelsFirst","channelsLast"],Bd=["nearest","bilinear"],Pd=["valid","same","causal"],Wd=["max","avg"],Vd=["sum","mul","concat","ave"],Ud=new Map;function Gd(e){Nd(zd,"DataFormat",e)}function Hd(e){Nd(Pd,"PaddingMode",e)}function jd(e){Nd(Wd,"PoolMode",e)}const Kd=[];function qd(e,t){Kd.push(e);try{const e=t();return Kd.pop(),e}catch(e){throw Kd.pop(),e}}function Xd(e){if(!Zd(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Kd.length?"":Kd.join("/")+"/")+e}function Yd(e){if(!Zd(e))throw new Error("Not a valid tensor name: '"+e+"'");Ud.has(e)||Ud.set(e,0);const t=Ud.get(e);if(Ud.set(e,Ud.get(e)+1),t>0){const n=`${e}_${t}`;return Ud.set(n,1),n}return e}const Jd=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Zd(e){return!!e.match(Jd)}function Qd(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function ef(e){return zl(e=Array.isArray(e)?new Float32Array(e):e)}function tf(e){return So(ef(e)).dataSync()[0]}function nf(e){return ro(ef(e)).dataSync()[0]}function sf(e,t){if(t<e)throw new id(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function af(e,t){return e.asType(t)}function rf(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function of(e,t,n){return cr((()=>{switch(e.rank){case 1:return wl(e,t,n);case 2:return vl(e,[t,0],[n,e.shape[1]]);case 3:return Nl(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Il(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Yr(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Yr(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new id(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function lf(e,t,n){return cr((()=>{switch(e.rank){case 1:return wl(e,t,n);case 2:return vl(e,[0,t],[e.shape[0],n]);case 3:return Nl(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Il(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new id(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function uf(e,t,n,s){return cr((()=>{switch(e.rank){case 1:return wl(e,t,n);case 2:switch(s){case 1:return of(e,t,n);case 2:return lf(e,t,n);default:throw new id(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return of(e,t,n);case 2:return Nl(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return lf(e,t,n);default:throw new id(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return of(e,t,n);case 2:return Il(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Il(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return lf(e,t,n);default:throw new id(`The axis is not within the rank of the tensor ${s}`)}default:throw new id(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function cf(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),qr(e,t)}function hf(e,t){switch(e.rank){case 1:return oi([e,t]);case 2:return li([e,t],0);case 3:return ui([e,t],0);case 4:return ci([e,t],0);default:throw new id(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function pf(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new id(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Li(e,t)}function df(e,t=0,n=1,s,a){return al(e,t,n,s,a)}function ff(e,t,n,s){if(e.rank<2||t.rank<2)throw new od(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new od(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return lu({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?yf(e.rank,s,"channelsLast"):null,activation:n})}{const a=e.shape.slice(),r=a.pop();e=e.reshape([-1,r]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...a,...u];return lu({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?yf(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function mf(e,t,n){return cr((()=>(t=Array.isArray(t)?zl(t,"int32"):t.toInt(),Wi(e,t,n))))}function gf(e){return br(e,e)}function yf(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new id(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new id(`Unsupported input rank by biasAdd: ${t.rank}`)}function bf(e,t,n){return cr((()=>(null==n&&(n="channelsLast"),Gd(n),e.add(yf(e.rank,t,n)))))}function xf(e,t,n,s){return cr((()=>Zl(e,t,n,s)))}function kf(e,t,n=!1){return n?e():t()}const wf=["fanIn","fanOut","fanAvg"],vf=["normal","uniform","truncatedNormal"];class Nf extends rr{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class If extends Nf{apply(e,t){return Mo(e,t)}}If.className="Zeros",or(If);class $f extends Nf{apply(e,t){return Lo(e,t)}}$f.className="Ones",or($f);class Cf extends Nf{constructor(e){if(super(),"object"!=typeof e)throw new id(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new id(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return cr((()=>br(fl(this.value),Lo(e,t))))}getConfig(){return{value:this.value}}}Cf.className="Constant",or(Cf);class Tf extends Nf{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return rl(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Tf.className="RandomUniform",or(Tf);class Sf extends Nf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new od(`randomNormal does not support dType ${t}.`);return df(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Sf.className="RandomNormal",or(Sf);class Ef extends Nf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new od(`truncatedNormal does not support dType ${t}.`);return Wl(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ef.className="TruncatedNormal",or(Ef);class Af extends Nf{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return cr((()=>{if(2!==e.length||e[0]!==e[1])throw new id("Identity matrix initializer can only be used for 2D square matrices.");return br(this.gain,zi(e[0]))}))}getConfig(){return{gain:this.gain}}}Af.className="Identity",or(Af);class Rf extends Nf{constructor(e){if(super(),e.scale<0)throw new id(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Nd(wf,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Nd(vf,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Gd(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Qd(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Qd(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Qd(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],a=n[1];let r=this.scale;if("fanIn"===this.mode?r/=Math.max(1,s):"fanOut"===this.mode?r/=Math.max(1,a):r/=Math.max(1,(s+a)/2),"normal"===this.distribution){const n=Math.sqrt(r);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new od(`${this.getClassName()} does not support dType ${t}.`);return Wl(e,0,n,t,this.seed)}{const n=Math.sqrt(3*r);return rl(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Rf.className="VarianceScaling",or(Rf);class Ff extends Rf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}Ff.className="GlorotUniform",or(Ff);class Df extends Rf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}Df.className="GlorotNormal",or(Df);class _f extends Rf{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}_f.className="HeNormal",or(_f);class Of extends Rf{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}Of.className="HeUniform",or(Of);class Mf extends Rf{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}Mf.className="LeCunNormal",or(Mf);class Lf extends Rf{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Rf.className}}Lf.className="LeCunNormal",or(Lf);class zf extends Nf{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new od("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return cr((()=>{if(e.length<2)throw new od("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=df(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Ou.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),br(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}zf.className="Orthogonal",or(zf);const Bf={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Pf(e,t={}){return xd(e,ir.getMap().classNameMap,t,"initializer")}function Wf(e){return yd(e)}function Vf(e){if("string"==typeof e){const t=e in Bf?Bf[e]:e;if("GlorotNormal"===t)return new Df;if("GlorotUniform"===t)return new Ff;if("HeNormal"===t)return new _f;if("HeUniform"===t)return new Of;if("LeCunNormal"===t)return new Mf;if("LeCunUniform"===t)return new Lf;{const e={};return e.className=t,e.config={},Pf(e)}}return e instanceof Nf?e:Pf(e)}let Uf=0;function Gf(){return Uf++}const Hf={};function jf(e=""){return e in Hf||(Hf[e]=0),Hf[e]+=1,e+Hf[e].toString()}function Kf(e){return Array.isArray(e)&&Array.isArray(e[0])}function qf(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Xf(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new id(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Yf(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new id(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Jf(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const Zf="Variable";class Qf{constructor(e,t="float32",n="Variable",s=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Gf(),n=null==n?Zf:n,this.originalName=Xd(n),this.name=Yd(this.originalName),this.trainable_=s,this.constraint=a,this.val=function(e,t=!0,n,s){return Ts.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function em(e){return e.map((e=>e.read()))}function tm(e){e.forEach((e=>{e[0].write(e[1])}))}class nm{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class sm{constructor(e,t,n,s,a,r,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=i,this.id=Gf(),null!=r&&(this.originalName=Xd(r),this.name=Yd(this.originalName)),this.rank=t.length}}let am=0;class rm{constructor(e,t){this.callArgs=t,this.id=am++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let im=0;class om extends rr{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=im++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=fd(e)+"_"+jf(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new rd(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new id(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return pd(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return pd(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new ad(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new ad(`Layer ${this.name} is not connected, no input to return.`);return pd(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new ad(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new ad(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return pd(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=dd(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=dd(this.inputSpec);if(e.length!==t.length)throw new id(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],a=t[n];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new id(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new id(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new id(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new id(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const e=s.shape;for(const t in a.axes){const s=Number(t),r=a.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=r&&-1===[r,null].indexOf(i))throw new id(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],r=s.shape[e];if(null!=t&&null!=r&&t!==r)throw new id(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=dd(e);let s=!0;for(const e of n)if(!(e instanceof sm)){s=!1;break}let a=!0;for(const e of n)if(e instanceof sm){a=!1;break}if(s===a)throw new id("Arguments to apply() must be all SymbolicTensors or all Tensors");return qd(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of dd(e))t.push(n.shape);this.build(pd(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);const a=dd(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=pd(r),null!=this.activityRegularizer)throw new od("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=dd(e);const t=[];for(const n of e)t.push(n.shape);return pd(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new sm(r,n,this,dd(e),t,this.name,s))):new sm(r,s,this,dd(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new od("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new ad(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new ad(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new rd(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Jf(this.weights)}build(e){this.built=!0}getWeights(e=!1){return em(e?this.trainableWeights:this.weights)}setWeights(e){cr((()=>{const t=this.weights;if(t.length!==e.length)throw new id(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=em(t);for(let a=0;a<s.length;++a){const r=s[a],i=t[a],o=e[a];if(!h(r.shape,o.shape))throw new id(`Layer weight shape ${r.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}tm(n)}))}addWeight(e,t,n,s,a,r,i){if(-1!==this._addedWeightNames.indexOf(e))throw new id(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Vf("zeros"));const o=s.apply(t,n),l=new Qf(o,n,e,r,i);return o.dispose(),null!=a&&this.addLoss((()=>a.apply(l.read()))),null==r&&(r=!0),r?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=dd(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,a,r,i=null){const o=dd(e);t=dd(t),n=dd(n),s=dd(s),a=qf(a),r=qf(r);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new rm({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function lm(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=lm(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class um extends om{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:jf("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new id("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new id("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new id("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new sm(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new rm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new id(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function cm(e){if(null==e)return;const t=[],n=[],s=[];for(const a in e){const r=e[a];if("number"!=typeof r){const e=r;t.push(e.data()),n.push(a),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];hr(s)}}function hm(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var pm;um.className="InputLayer",or(um),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(pm||(pm={}));class dm{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class fm{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class mm extends dm{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=cr((()=>mr(this.totals[e],br(s,n))));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:cr((()=>{const n=br(yr(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),pr(t[e])})))}}class gm extends dm{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const i=a[r];e.push(i.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class ym extends dm{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");$(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=Xn();return(...a)=>{const r=Xn();return r-s<t||(s=r,n=e(...a)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await cm(n),s.push(this.yield(e,t,n))),s.push(Ku()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await cm(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await cm(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Ku()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await cm(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await cm(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Ku()):$(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await cm(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await cm(e),await this.trainEnd(e))}}function bm(e,t){if(null==e&&(e={}),e instanceof dm)return[e];if(Array.isArray(e)&&e[0]instanceof dm)return e;return dd(e).map((e=>new ym(e,t)))}class xm{constructor(){}static registerCallbackConstructor(e,t){i(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),xm.checkForDuplicate(t),null==xm.constructors[e]&&(xm.constructors[e]=[]),xm.constructors[e].push(t)}static checkForDuplicate(e){for(const t in xm.constructors){xm.constructors[+t].forEach((t=>{if(t===e)throw new id("Duplicate callback constructor.")}))}}static clear(){xm.constructors={}}static createCallbacks(e){const t=[];for(const n in xm.constructors){const s=+n;e>=s&&t.push(...xm.constructors[s])}return t.map((e=>new e))}}function km(e,t,n,s,a,r,i,o,l){const u=new gm,c=[new mm,...xm.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new fm(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function wm(e,t={},n=!1){return xd(e,ir.getMap().classNameMap,t,"layer",n)}function vm(e,t){return cr((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=oo(gf(e),t,!0),s=Bi(n.shape,sd()),a=Rl(Co(n,s));return yr(e,a)}))}function Nm(e,t){return cr((()=>To(gf(io(t,e)),-1)))}function Im(e,t){return cr((()=>To(xr(io(t,e)),-1)))}function $m(e,t){return cr((()=>{const n=io(e,t),s=ii(xr(e),sd(),Number.MAX_VALUE),a=xr(yr(n,s));return br(100,To(a,-1))}))}function Cm(e,t,n=!1){return cr((()=>{if(n)t=$l(t);else{const e=oo(t,t.shape.length-1,!0);t=yr(t,e)}return t=ii(t,sd(),1-sd()),no(oo(br(e.toFloat(),Qi(t)),t.shape.length-1))}))}function Tm(e,t,n=!1){return cr((()=>{const s=Pi(function(e){const t=[Qd(e.shape)];return e.reshape(t)}(e)).toInt(),a=(t=ii(t,sd(),1-sd())).shape;return Cm(_a(s,a[a.length-1]).reshape(a),t,n)}))}function Sm(e,t){return cr((()=>{let n;return n=ii(t,sd(),1-sd()),n=Qi(yr(n,io(1,n))),To(function(e,t){if(!h(e.shape,t.shape))throw new id(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return cr((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function Em(e,t){return cr((()=>{const n=vm(e,-1),s=vm(t,-1),a=br(n,s);return no(oo(a,-1))}))}xm.constructors={};const Am={meanSquaredError:Nm,meanAbsoluteError:Im,meanAbsolutePercentageError:$m,meanSquaredLogarithmicError:function(e,t){return cr((()=>{const n=ii(t,sd(),Number.MAX_VALUE),s=Qi(mr(1,n)),a=ii(e,sd(),Number.MAX_VALUE),r=Qi(mr(1,a));return To(gf(io(s,r)),-1)}))},squaredHinge:function(e,t){return cr((()=>{const n=Co(0,io(1,br(e,t)));return To(gf(n),-1)}))},hinge:function(e,t){return cr((()=>{const n=Co(0,io(1,br(e,t)));return To(n,-1)}))},categoricalHinge:function(e,t){return cr((()=>{const n=oo(br(e,t),-1),s=ro(br(io(1,e),t),-1);return Co(0,mr(1,io(s,n)))}))},logcosh:function(e,t){return cr((()=>{const n=Math.log(2),s=io(t,e),a=io(mr(s,so(br(-2,s))),n);return To(a,-1)}))},categoricalCrossentropy:Cm,sparseCategoricalCrossentropy:Tm,binaryCrossentropy:Sm,kullbackLeiblerDivergence:function(e,t){return cr((()=>{const n=ii(e,sd(),1),s=ii(t,sd(),1);return oo(br(e,Qi(yr(n,s))),-1)}))},poisson:function(e,t){return cr((()=>{const n=Qi(mr(sd(),t));return To(io(t,br(e,n)),-1)}))},cosineProximity:Em};function Rm(e){if("string"==typeof e){if(e in Am)return Am[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new id(t)}return e}function Fm(e,t){return cr((()=>{const n=br(.5,zo(t)),s=af(Vi(t,n),e.dtype);return To(Ti(e,s),-1)}))}function Dm(e,t){return cr((()=>af(Ti($r(e,-1),$r(t,-1)),"float32")))}function _m(e,t){return Sm(e,t)}function Om(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),Ti(e,t).asType("float32")}const Mm=Cm,Lm=Tm,zm={binaryAccuracy:Fm,categoricalAccuracy:Dm,precision:function(e,t){return cr((()=>{const n=function(e,t){return cr((()=>xo(e.equal(1),t.equal(1)).sum().cast("float32")))}(e,t),s=function(e,t){return cr((()=>xo(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),a=n.add(s);return Si(Vi(a,0),n.div(a),0).cast("float32")}))},categoricalCrossentropy:Mm,sparseCategoricalCrossentropy:Lm,mse:Nm,MSE:Nm,mae:Im,MAE:Im,mape:$m,MAPE:$m,cosine:Em};function Bm(e){if("string"==typeof e&&e in zm)return zm[e];if("string"!=typeof e&&null!=e)return e;throw new id(`Unknown metric ${e}`)}function Pm(e){if(cd(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Am))if(Am[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(zm))if(zm[n]===e){t=n;break}return void 0!==t?t:e.name}}const Wm=1048576;function Vm(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Um(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>Wm&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Um(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Um(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Um(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Gm(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Output shape","Param #"];let i;if(a?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){r.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Hm(r,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)a?jm(o[e],n,s):Km(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?Jf(e.collectedTrainableWeights):Jf(e.trainableWeights);return t}(e),u=Jf(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function Hm(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function jm(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Hm([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Km(e,t,n,s){let a;try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const r=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];r.push(`${n}[${s}][${a}]`)}const i=e.name,o=e.getClassName(),l=0===r.length?"":r[0];Hm([`${i} (${o})`,a,e.countParams().toString(),l],t,s);for(let e=1;e<r.length;++e)Hm(["","","",r[e]],t,s)}function qm(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Xm(e,t){if(null===e)return null;if("string"==typeof e)return md(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];qm(t,a,s)?n.push(s):n.push(Xm(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=md(n);t[e]=Xm(s,e)}}return t}}function Ym(e,t){if(null==e)return null;if("string"==typeof e)return fd(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];qm(t,a,s)?n.push(s):n.push(Ym(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],a=fd(n);t[a]="name"!==n&&"className"!==n||"string"!=typeof s?Ym(s,n):s}return t}}class Jm{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Jm)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new id(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Na(t,e.dtype)}catch(n){throw new id(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof sm){if(null==this.id2Value[e.id])throw new id(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new id(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof sm){if(null==this.id2Value[e.id])throw new id(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new id(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&hr(this.id2Mask)}}const Zm={},Qm={};function eg(e,t,n,s){const a=null!=n&&n.training,r=Array.isArray(e),o=r?e:[e],l=o.map((e=>e.name)),u=[],c=t.names();for(const e of l)-1!==c.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=l.join(",")+"|"+t.names().join(",");let p,d;if(null==Zm[h]){const e=function(e,t){i(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const a=ng(e[0],t);n=a.sorted,s=a.recipientMap}else{const a=new Set;for(const r of e){const{sorted:e,recipientMap:i}=ng(r,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:tg(s)}}(o,t);p=e.sorted,d=e.recipientCounts,Zm[h]=p,Qm[h]=d}p=Zm[h],d={},a||Object.assign(d,Qm[h]);const f=new Jm(t);for(let e=0;e<p.length;++e){if(null!=s){const e=ur().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const r=p[e],i=r.sourceLayer;if(i instanceof um)continue;const o=[],c=[],h=[];let m=!1;for(const e of r.inputs){const n=f.getValue(e),s=f.getMask(e);o.push(n),c.push(s),null!=s&&(m=!0),a||(d[e.name]--,0!==d[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||h.push(n))}m&&((n=n||{}).mask=c[0]);const g=dd(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=sg(r),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){f.hasKey(x[e])||f.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=l.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}a||hr(h)}return f.disposeMasks(),r?u:u[0]}function tg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function ng(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],i=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=i[i.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function sg(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class ag extends om{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=jf(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],wd(this.inputs).length!==this.inputs.length)throw new id(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);wd(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;cd(0===n,"input layer has >1 nodes"),cd(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof um))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},a={},r={},i=[],o=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new rd(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(ag.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,a,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,i),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],i=e.nodeIndices[s],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(r+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(kd);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof ag&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(kd);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new rd(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new rd(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new rm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new id("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new id(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new id(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new id(`${e.length} of ${s} weights are not set: ${e}`)}tm(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.0.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Ym(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return cr((()=>{e=dd(e);const n=new Jm;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return eg(this.outputs,n,t)}))}computeMask(e,t){return cr((()=>{let n;return e=dd(e),n=null==t?ud(null,e.length):dd(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=qf(e);if(t.length!==this.inputLayers.length)throw new id(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(kd);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${a.name}_${r}_${i}`];s.push(o)}const a=qf(t.computeOutputShape(pd(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++){n[`${t.name}_${r}_${e}`]=a[e]}}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];cd(t in n),a.push(n[t])}return pd(a)}runInternalGraph(e,t){null==t&&(t=ud(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],i=t[s];n[a.id]=[r,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(kd);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),o=dd(t.call(e,u)),l=dd(t.computeMask(e,n)),s=[e],i=[n]}else s=r.map((e=>e[0])),i=r.map((e=>e[1])),null==u.mask&&(u.mask=i),o=dd(t.call(s,u)),l=dd(t.computeMask(s,i));if(t.activityRegularizer)throw new od("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=o[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],i=[];for(const e of this.outputs){cd(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),a.push(t),r.push(s)}return[a,r,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof ag?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=ag.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new id(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new id("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new id(`No such layer: ${e}`)}calculateLosses(){return cr((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=ag.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=ag.nodeKey(e,n);let i={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[ag.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,o,i])}r.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=a,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=ag.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=ag.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function i(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function o(e,t){const n=[];let s;for(const r of t){const o=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(o in a))return void i(e,t);const c=a[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(pd(n),s)}function l(e){const n=e.name,r=wm(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new id(`Corrupted configuration, expected array for nodeData: ${e}`);i(r,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!vd(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];cd(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];cd(t in a);const r=a[t].inboundNodes[n].outputTensors;p.push(r[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new id("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){cr((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function rg(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function ig(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=cr((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());hr(t);const a=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),zl(a,"float32")}return null}function og(e,t){return br(e,t)}function lg(e,t){let n,s;const a=t;n=a.xs,s=a.ys,i(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const r=ug("input",e.inputNames,n),o=ug("output",e.outputNames,s),l=r[0].shape[0];i(r.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),i(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<r.length;t++)i(r[t].shape[0]===l,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${r[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)i(o[t].shape[0]===l,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));return{xs:r,ys:o}}function ug(e,t,n){if(n instanceof us)return[n];if(Array.isArray(n))return i(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const a of t){if(null==n[a])throw new id(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);s.push(n[a])}return s}}async function cg(e,t,n){const s=null!=n.batchesPerEpoch;if(i(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),i(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),i(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),i(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),i(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let r,o;if(a)if(hg(n.validationData))i(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new od("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);r=e.xs,o=e.ys}const l=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=a?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const h=bm(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=km(h,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const i={};await d.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:a}=lg(e,t.value),r={};r.batch=h,r.size=s[0].shape[0],await d.onBatchBegin(h,r);const i=[];if(null!=n.classWeight){const t=rg(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await ig(a[e],null,t[e]))}const o=s.concat(a).concat(i),p=l(o);hr(o);for(let e=0;e<u.length;++e){const t=u[e],n=p[e];r[t]=n,pr(n)}await d.onBatchEnd(h,r),hm(r),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=hg(n.validationData)?dd(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):dd(e.evaluate(r,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)i[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,i),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function hg(e){return"function"==typeof e.iterator}function pg(e){i(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function dg(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>of(e,t,n-t))):of(e,t,n-t)}function fg(e,t){return cr((()=>null==e?null:Array.isArray(e)?e.map((e=>fg(e,t))):mf(e,"int32"===t.dtype?t:t.toInt())))}function mg(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}async function gg(e,t,n,a={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,i,o,l,u,c,h;e.isTraining=!0;try{const p=null==a.batchSize?32:a.batchSize;pg(p);const d=!1,f=await e.standardizeUserData(t,n,a.sampleWeight,a.classWeight,d,p);r=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=a.validationData&&a.validationData.length>0){if(g=!0,2!==a.validationData.length)throw 3===a.validationData.length?new od("validationData including sample weights is not supported yet."):new id(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${a.validationData} is invalid.`);o=a.validationData[0],l=a.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=a.validationSplit&&a.validationSplit>0&&a.validationSplit<1){g=!0;const e=Math.floor(r[0].shape[0]*(1-a.validationSplit)),t=r[0].shape[0];u=dg(r,e,t),r=dg(r,0,e),c=dg(i,e,t),i=dg(i,0,e),m=u.concat(c)}else null!=a.validationSteps&&(g=!0);const y=r.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let k,w;g?(e.makeTestFunction(),k=e.testFunction,w=x.slice().concat(x.map((e=>"val_"+e)))):(k=null,m=[],w=x.slice());const v=bm(a.callbacks,a.yieldEvery);return await async function(e,t,n,a,r,i,o,l,u,c,h,p,d,f,m){null==r&&(r=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=u&&null!=c&&(g=!0),null!=m&&(g=!0,null==f))throw new id("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=e.checkNumSamples(n,r,f,"steps_per_epoch");let b;null!=y&&(b=sf(0,y)),null==o&&(o=1);const{callbackList:x,history:k}=km(l,o,i,d,y,f,r,g,p);x.setModel(e),e.history=k,await x.onTrainBegin(),e.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};if(null!=f)throw new od("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new od("batch shuffling is not implemneted yet");h&&s(b);const o=zl(b),l=mg(y,r);for(let s=0;s<l.length;++s){const h={};if(await x.onBatchBegin(s,h),cr((()=>{const p=l[s][0],d=l[s][1],f=of(o,p,d-p);h.batch=s,h.size=d-p;const m=fg(n,f),y=t(m);for(let e=0;e<a.length;++e){const t=a[e],n=y[e];h[t]=n,pr(n)}if(s===l.length-1&&g){const t=e.testLoop(u,c,r);for(let e=0;e<a.length;++e){const n=a[e],s=t[e];pr(s),i["val_"+n]=s}}})),await x.onBatchEnd(s,h),hm(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,a.epochs,a.verbose,v,k,m,a.shuffle,w,a.initialEpoch,null,null)}finally{e.isTraining=!1,bg(r,t),bg(i,n),bg(u,o),bg(c,l),null!=h&&hr(h)}}function yg(e){const t=[];e instanceof us&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(rf(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function bg(e,t){if(null==e)return;const n=[];if(t instanceof us)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof us)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&s.push(a)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function xg(e){return Array.isArray(e)}function kg(e){return!function(e){return e instanceof us}(e)&&!xg(e)}function wg(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(xg(e)&&e.length>0)t=!0;else if(kg(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new id(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let r;if(kg(e)){e=e,r=[];for(const n of t){if(null==e[n])throw new id(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(xg(e)){if((e=e).length!==t.length)throw new id(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(e=e,t.length>1)throw new id(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=yg(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new id(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l>=0&&o!==l)throw new id(`Error when checking ${a}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return r}function vg(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new id(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new id(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new id(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l!==o)throw new id(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Ng extends ag{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new id("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Gm(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Hu.adagrad(.01),Adadelta:()=>Hu.adadelta(1,.95,sd()),Adam:()=>Hu.adam(.001,.9,.999,sd()),Adamax:()=>Hu.adamax(.002,.9,.999,sd(),0),RMSProp:()=>Hu.rmsprop(.001,.9,0,sd()),SGD:()=>Hu.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new id(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Mu))throw new id("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new id(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Rm(e)))}else{const n=Rm(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new id(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Rm(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],qd("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};qd("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,r;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===Sm?-1!==["accuracy","acc"].indexOf(i)?s=Fm:-1!==["crossentropy","ce"].indexOf(i)&&(s=_m):this.lossFunctions[e]===Tm?-1!==["accuracy","acc"].indexOf(i)?s=Om:-1!==["crossentropy","ce"].indexOf(i)&&(s=Lm):-1!==["accuracy","acc"].indexOf(i)?s=Dm:-1!==["crossentropy","ce"].indexOf(i)&&(s=Mm),-1!==["accuracy","acc"].indexOf(i)?a="acc":-1!==["crossentropy","ce"].indexOf(i)&&(a="ce"),r=s,n=""+a}else{const e=Bm(i);r=e,n=""+Pm(i)}let t;qd(n,(()=>{t=r})),a(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;pg(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const r=a[0].concat(a[1]);this.makeTestFunction();const i=this.testFunction;return pd(this.testLoop(i,r,s,n.verbose,n.steps))}finally{bg(a[0],e),bg(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let r=[];if(n.verbose>0)throw new od("Verbose mode is not implemented yet.");i(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let l=0,u=0;for(;!s||u<n.batches;){const t=await o.next();if(r=cr((()=>{if(t.value){const{xs:n,ys:s}=lg(e,t.value),i=n.concat(s),o=cr((()=>a(i)));if(hr(i),0===u)for(let e=0;e<o.length;++e)r.push(fl(0));const c=i[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=r[e];r[e]=cr((()=>mr(r[e],br(c,t)))),u>0&&hr(n)}hr(o),l+=c,++u}return r})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<r.length;++e){const t=r[e];r[e]=yr(r[e],l),hr(t)}return pd(r)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new id(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new id(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new id("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],a=this.retrieveSymbolicTensors(s),r=new Jm;if(e instanceof us&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new id(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new id(`No value is provided for the model's input ${t.name}`);r.add(t,n)}const i=eg(a,r);return n?i:i[0]}retrieveSymbolicTensors(e){const t=ud(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map((e=>e.name));for(let s=0;s<e.length;++s){const i=r.indexOf(e[s]);if(-1!==i&&(t[s]=a[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new id(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return cr((()=>{const s=this.checkNumSamples(e);if(n)throw new od("Verbose predictLoop() is not implemented yet.");const a=mg(s,t),r=this.outputs.map((e=>[]));for(let t=0;t<a.length;++t){cr((()=>{const n=a[t][0],s=a[t][1],r=dg(e,n,s),i=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)i.push({key:this.inputs[e],value:r[e]});else i.push({key:this.inputs[0],value:r});const o=new Jm(i);return eg(this.outputs,o)})).forEach(((e,t)=>r[t].push(e)))}return pd(r.map((e=>qr(e,0))))}))}predict(e,t={}){const n=yg(e);vg(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return pg(s),this.predictLoop(n,s)}finally{bg(n,e)}}predictOnBatch(e){vg(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new rd("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Tm?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t,n){const s=wd(e.map((e=>e.shape[0])));s.sort();const a=wd(t.map((e=>e.shape[0])));if(a.sort(),s.length>1)throw new id(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new id(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&a.length>0&&!h(s,a))throw new id(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=wg(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=wg(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[Nm,Sm,Cm];for(let a=0;a<e.length;++a){const r=e[a],i=t[a],o=n[a];if(null!=i){if(i===Cm&&1===r.shape[r.shape.length-1])throw new id(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=r.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new id(`A target Tensor with shape ${r.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new id(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,a=!0,r){const[i,o]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=rg(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await ig(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,a){return cr((()=>{const r=this.checkNumSamples(t,n,a,"steps"),i=[];if(s>0)throw new od("Verbose mode is not implemented yet.");if(null!=a)throw new od("steps mode in testLoop() is not implemented yet");{const s=mg(r,n),a=zl(sf(0,r));for(let n=0;n<s.length;++n){const r=s[n][0],o=s[n][1],l=of(a,r,o-r),u=fg(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(fl(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=mr(i[e],br(o-r,t))}}for(let e=0;e<i.length;++e)i[e]=yr(i[e],r)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;if(hd(e,s)>1){a+=`_${hd(e.slice(0,n),s)}`}t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),r=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Jm(e),o=eg(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=a[e]&&(n=og(n,a[e]));const r=To(n);t.push(r),l=0===e?n:mr(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=To(t(s[a],o[a]))}pr(n),r.push(n)}return l=To(l),this.calculateLosses().forEach((e=>{l=mr(l,e)})),l}),!0,i)].concat(r)}}makeTestFunction(){this.testFunction=e=>cr((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=[];for(let e=0;e<this.inputs.length;++e)r.push({key:this.inputs[e],value:s[e]});const i=new Jm(r),o=eg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],r=To(s(a[e],o[e]));n=0===e?r:mr(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],r=To(n(a[s],o[s]));t.push(r)}return t}))}async fit(e,t,n={}){return gg(this,e,t,n)}async fitDataset(e,t){return cg(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],a=n[1],r=this.makeTrainFunction()(s.concat(a)),i=[];for(const e of r){const t=await e.data();i.push(t[0])}return hr(r),pd(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=ur().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-ur().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=fd(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>fd(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=fd(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[fd(Pm(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>fd(Pm(e))));{const e={};for(const t in this.metrics)e[t]=fd(Pm(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=wm(Xm(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=md(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>md(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=md(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>md(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=md(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Ys(e);if(0===t.length)throw new id(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new id(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new id("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Vs(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.0.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await Vs(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=js([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Vm(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Vm(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ng.className="Model",or(Ng);class Ig extends Ng{}Ig.className="Functional",or(Ig);class $g extends Ng{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:jf("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new id(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof $g||e instanceof Ng;let n;if(t){if(n=e,1!==n.outputs.length)throw new id("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new id("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new id("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new id("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new um({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new id(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new id("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=lm(this.outputs[0])}this.inboundNodes=[],new rm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ud(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Yf(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ng({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new rd("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new rd("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new rd("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new rd("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,r={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new id("Legacy serialization format not supported yet.");a=t}else i(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,r=t;const o=new e(r);if(!(o instanceof $g))throw new od(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of a){const t=wm(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new id("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new id("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}$g.className="Sequential",or($g);class Cg extends rr{getConfig(){return{}}}class Tg extends Cg{apply(e,t=1){return function(e,t=1){if(1!==t)throw new od(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Fi(e)}(e,t)}}Tg.className="elu",or(Tg);class Sg extends Cg{apply(e){return ml(e)}}Sg.className="selu",or(Sg);class Eg extends Cg{apply(e){return ul(e)}}Eg.className="relu",or(Eg);class Ag extends Cg{apply(e){return cr((()=>Eo(6,ul(e))))}}Ag.className="relu6",or(Ag);class Rg extends Cg{apply(e){return e}}Rg.className="linear",or(Rg);class Fg extends Cg{apply(e){return Xr(e)}}Fg.className="sigmoid",or(Fg);class Dg extends Cg{apply(e){return function(e){return cr((()=>{const t=mr(.5,br(.2,e));return ii(t,0,1)}))}(e)}}Dg.className="hardSigmoid",or(Dg);class _g extends Cg{apply(e){return so(e)}}_g.className="softplus",or(_g);class Og extends Cg{apply(e){return function(e){return cr((()=>yr(e,xr(e).add(1))))}(e)}}Og.className="softsign",or(Og);class Mg extends Cg{apply(e){return Jr(e)}}Mg.className="tanh",or(Mg);class Lg extends Cg{apply(e,t=-1){return $l(e,t)}}Lg.className="softmax",or(Lg);class zg extends Cg{apply(e,t=-1){return lo(e,t)}}zg.className="logSoftmax",or(zg);class Bg extends Cg{apply(e,t=1){return cr((()=>Xr(e.mul(t)).mul(e)))}}function Pg(e){return e.getClassName()}function Wg(e,t={}){return xd(e,ir.getMap().classNameMap,t,"activation")}function Vg(e){if(null==e){const e={className:"linear",config:{}};return Wg(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},Wg(t)}return e instanceof Cg?e:Wg(e)}Bg.className="swish",or(Bg);class Ug extends rr{}class Gg extends Ug{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return cr((()=>{let t=Mo([1]);return this.hasL1&&(t=mr(t,oo(br(this.l1,xr(e))))),this.hasL2&&(t=mr(t,oo(br(this.l2,gf(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Gg.className="L1L2",or(Gg);const Hg={l1l2:"L1L2"};function jg(e){return yd(e)}function Kg(e,t={}){return xd(e,ir.getMap().classNameMap,t,"regularizer")}function qg(e){if(null==e)return null;if("string"==typeof e){return Kg({className:e in Hg?Hg[e]:e,config:{}})}return e instanceof Ug?e:Kg(e)}class Xg extends om{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Xf(e);let n=ul(e);return null!=this.maxValue&&(n=ii(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Xg.className="ReLU",or(Xg);class Yg extends om{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Xf(e);return qi(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Yg.className="LeakyReLU",or(Yg);class Jg extends om{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Vf(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=qg(e.alphaRegularizer),this.alphaConstraint=Ld(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new id(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Yf(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new nm({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Xf(e),Uo(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Wf(this.alphaInitializer),alphaRegularizer:jg(this.alphaRegularizer),alphaConstraint:Od(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Jg.className="PReLU",or(Jg);class Zg extends om{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new od(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Xf(e);return Fi(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Zg.className="ELU",or(Zg);class Qg extends om{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Xf(e);return n.mul(af(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Qg.className="ThresholdedReLU",or(Qg);class ey extends om{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Lg).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Xf(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function ty(e,t,n){if("number"==typeof e)return ud(e,t);if(e.length!==t)throw new id(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const r=e[a];if((s=r)!==parseInt(s.toString(),10))throw new id(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e;var s}function ny(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function sy(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+nf([n-t,0]);else{if("same"!==s)throw new id(`Unsupport padding mode: ${s}.`);e*=t}return e}function ay(e,t){return cr((()=>(Gd(t),"channelsFirst"===t?Oa(e,[0,2,3,1]):e)))}function ry(e,t){return cr((()=>(Gd(t),"channelsFirst"===t?Oa(e,[0,2,3,4,1]):e)))}function iy(e,t,n,s=[1,1],a="valid",r,i,o=null){return cr((()=>{if(null==r&&(r="channelsLast"),Gd(r),3!==e.rank&&4!==e.rank)throw new id(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new id(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=ay(e,r);if("causal"===a)throw new od("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=au({x:l,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===r&&(l=Oa(l,[0,3,1,2])),l}))}ey.className="Softmax",or(ey);class oy extends om{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",oy.verifyArgs(t),this.rank=e,$d(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new od(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ty(t.kernelSize,e,"kernelSize"),this.strides=ty(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Hd(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Gd(this.dataFormat),this.activation=Vg(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Vf(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ld(t.biasConstraint),this.biasRegularizer=qg(t.biasRegularizer),this.activityRegularizer=qg(t.activityRegularizer),this.dilationRate=ty(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new id(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new id(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new id(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(cd("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Id(e.kernelSize,"number",1,3))throw new id(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Pg(this.activation),useBias:this.useBias,biasInitializer:Wf(this.biasInitializer),biasRegularizer:jg(this.biasRegularizer),activityRegularizer:jg(this.activityRegularizer),biasConstraint:Od(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class ly extends oy{constructor(e,t){super(e,t),this.kernel=null,ly.verifyArgs(t),this.filters=t.filters,$d(this.filters,"filters"),this.kernelInitializer=Vf(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ld(t.kernelConstraint),this.kernelRegularizer=qg(t.kernelRegularizer)}build(e){e=Yf(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new id(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return cr((()=>{let t;e=Xf(e);const n=null==this.bias?null:this.bias.read(),s=Td(this.activation.getClassName());if(null!=s&&2===this.rank)t=iy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,a="valid",r,i=1){return cr((()=>{if(null==r&&(r="channelsLast"),Gd(r),3!==e.shape.length)throw new id(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new id(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new id(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===r&&(e=Oa(e,[0,2,1])),"causal"===a)throw new od("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=pi(e,t,s,"same"===a?"same":"valid","NWC",i);return null!=n&&(o=bf(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=iy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new od("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],a="valid",r,i){return cr((()=>{if(null==r&&(r="channelsLast"),Gd(r),4!==e.rank&&5!==e.rank)throw new id(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new id(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=ry(e,r);if("causal"===a)throw new od("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=mi(o,t,s,"same"===a?"same":"valid","NDHWC",i),null!=n&&(o=bf(o,n)),"channelsFirst"===r&&(o=Oa(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Yf(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=ny(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Wf(this.kernelInitializer),kernelRegularizer:jg(this.kernelRegularizer),kernelConstraint:Od(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new id(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class uy extends ly{constructor(e){super(2,e),uy.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Id(e.kernelSize,"number",1,2))throw new id(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}uy.className="Conv2D",or(uy);class cy extends ly{constructor(e){super(3,e),cy.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new id(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}cy.className="Conv3D",or(cy);class hy extends uy{constructor(e){if(super(e),this.inputSpec=[new nm({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new id(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Yf(e)).length)throw new id("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new id("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new nm({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return cr((()=>{let t=Xf(e);if(4!==t.shape.length)throw new id(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r;"channelsFirst"===this.dataFormat?(a=2,r=3):(a=1,r=2);const i=n[a],o=n[r],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,sy(i,c,l,this.padding),sy(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Oa(t,[0,2,3,1]));let d=fi(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Oa(d,[0,3,1,2])),null!=this.bias&&(d=bf(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Yf(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=sy(t[s],o,r,this.padding),t[a]=sy(t[a],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}hy.className="Conv2DTranspose",or(hy);class py extends ly{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new id("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new id("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new id(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Vf(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=qg(t.depthwiseRegularizer),this.depthwiseConstraint=Ld(t.depthwiseConstraint),this.pointwiseInitializer=Vf(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=qg(t.pointwiseRegularizer),this.pointwiseConstraint=Ld(t.pointwiseConstraint)}build(e){if((e=Yf(e)).length<this.rank+2)throw new id(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new id(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new nm({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return cr((()=>{let t;if(e=Xf(e),1===this.rank)throw new od("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Oa(e,[0,2,3,1])),t=gl(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=bf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Oa(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Wf(this.depthwiseInitializer),e.pointwiseInitializer=Wf(this.pointwiseInitializer),e.depthwiseRegularizer=jg(this.depthwiseRegularizer),e.pointwiseRegularizer=jg(this.pointwiseRegularizer),e.depthwiseConstraint=Od(this.depthwiseConstraint),e.pointwiseConstraint=Od(this.pointwiseConstraint),e}}py.className="SeparableConv";class dy extends py{constructor(e){super(2,e)}}dy.className="SeparableConv2D",or(dy);class fy extends ly{constructor(e){super(1,e),fy.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Id(e.kernelSize,"number",1,1))throw new id(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}fy.className="Conv1D",or(fy);class my extends om{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return cr((()=>{if(e=Xf(e),"channelsLast"===this.dataFormat){const t=uf(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return uf(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=uf(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return uf(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}my.className="Cropping2D",or(my);class gy extends om{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gd(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Nd(Bd,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return cr((()=>{let t=Xf(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Oa(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],a="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return Oa(a,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}gy.className="UpSampling2D",or(gy);class yy extends oy{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Vf(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ld(e.depthwiseConstraint),this.depthwiseRegularizer=qg(e.depthwiseRegularizer)}build(e){if((e=Yf(e)).length<4)throw new id(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new id(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return cr((()=>{let t=function(e,t,n=[1,1],s="valid",a,r){return cr((()=>{null==a&&(a="channelsLast"),Gd(a);let i=ay(e,a);if(4!==e.rank)throw new id(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new id(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=vi(i,t,n,"same"===s?"same":"valid","NHWC",r),"channelsFirst"===a&&(i=Oa(i,[0,3,1,2])),i}))}(e=Xf(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=bf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Yf(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=ny(t,this.kernelSize[0],this.padding,this.strides[0]),r=ny(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Wf(this.depthwiseInitializer),e.depthwiseRegularizer=jg(this.depthwiseRegularizer),e.depthwiseConstraint=Od(this.depthwiseRegularizer),e}}function by(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new id("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function xy(e,t,n,s=!1,a,r,i=!1,o=!1){return cr((()=>{const l=t.shape.length;if(l<3)throw new id(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(sf(2,l));if(t=Oa(t,u),null!=r)throw new od("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=a.asType("bool").asType("float32")).rank===l-1&&(a=Oi(a,-1)),a=Oa(a,u)),s&&(t=hl(t,0),null!=a&&(a=hl(a,0)));const c=[];let h,p=n;const d=t.shape[0],f=Gl(t);let m,g;null!=a&&(m=Gl(a));for(let t=0;t<d;++t){const n=f[t],s=cr((()=>e(n,p)));if(null==a)h=s[0],p=s[1];else{const e=cr((()=>{const e=m[t],n=zo(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,a)=>s[1][a].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=_l(c,1)}return[h,g,p]}))}yy.className="DepthwiseConv2D",or(yy);class ky extends om{constructor(e){let t;if(super(e),null==e.cell)throw new id("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Sy({cells:e.cell}):e.cell,null==t.stateSize)throw new id("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new nm({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return sf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Kf(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return cr((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new od("Constants support is not implemented in RNN yet.");Kf(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new nm({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!h(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new id(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new nm({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){cr((()=>{if(!this.stateful)throw new ad("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new id("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Mo([n,e]))):this.states_=[Mo([n,this.cell.stateSize])];else if(null==e)hr(this.states_),null!=this.keptStates&&(hr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Mo([n,e]))):this.states_[0]=Mo([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new id(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):hr(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,r=[n,a];if(!h(s.shape,r))throw new id(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>pr(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=by(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],i=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new nm({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length);if(r[0]instanceof sm){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return cr((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let a=null==t?null:t.initialState;e=Xf(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new id(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=xy(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return cr((()=>{let t=Mo(e.shape);return t=oo(t,[1,2]),t=rf(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?pf(t,[1,e]):t)):this.cell.stateSize>1?[pf(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===ky.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=wm(t.cell,n);return new e(Object.assign(t,{cell:s}))}}ky.className="RNN",or(ky);class wy extends om{}class vy extends wy{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,$d(this.units,"units"),this.activation=Vg(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Vf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Vf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Vf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=qg(e.kernelRegularizer),this.recurrentRegularizer=qg(e.recurrentRegularizer),this.biasRegularizer=qg(e.biasRegularizer),this.kernelConstraint=Ld(e.kernelConstraint),this.recurrentConstraint=Ld(e.recurrentConstraint),this.biasConstraint=Ld(e.biasConstraint),this.dropout=tf([1,nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=tf([1,nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Yf(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return cr((()=>{if(2!==(e=e).length)throw new id(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ey({ones:()=>zo(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ey({ones:()=>zo(n),rate:this.recurrentDropout,training:s}));const r=this.dropoutMask,i=this.recurrentDropoutMask;a=ff(null!=r?br(e,r):e,this.kernel.read()),null!=this.bias&&(a=bf(a,this.bias.read())),null!=i&&(n=br(n,i));let o=mr(a,ff(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pg(this.activation),useBias:this.useBias,kernelInitializer:Wf(this.kernelInitializer),recurrentInitializer:Wf(this.recurrentInitializer),biasInitializer:Wf(this.biasInitializer),kernelRegularizer:jg(this.kernelRegularizer),recurrentRegularizer:jg(this.recurrentRegularizer),biasRegularizer:jg(this.biasRegularizer),activityRegularizer:jg(this.activityRegularizer),kernelConstraint:Od(this.kernelConstraint),recurrentConstraint:Od(this.recurrentConstraint),biasConstraint:Od(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}vy.className="SimpleRNNCell",or(vy);class Ny extends ky{constructor(e){e.cell=new vy(e),super(e)}call(e,t){return cr((()=>{null!=this.cell.dropoutMask&&(hr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return new e(t)}}Ny.className="SimpleRNN",or(Ny);class Iy extends wy{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new id("GRUCell does not support reset_after parameter set to true.");this.units=e.units,$d(this.units,"units"),this.activation=Vg(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Vg(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Vf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Vf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Vf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=qg(e.kernelRegularizer),this.recurrentRegularizer=qg(e.recurrentRegularizer),this.biasRegularizer=qg(e.biasRegularizer),this.kernelConstraint=Ld(e.kernelConstraint),this.recurrentConstraint=Ld(e.recurrentConstraint),this.biasConstraint=Ld(e.biasConstraint),this.dropout=tf([1,nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=tf([1,nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Yf(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return cr((()=>{if(2!==(e=e).length)throw new id(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ey({ones:()=>zo(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ey({ones:()=>zo(s),rate:this.recurrentDropout,training:n,count:3}));const a=this.dropoutMask,r=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=br(e,a[0]));let u=ff(e,this.kernel.read());this.useBias&&(u=bf(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=br(s,r[0]));const c=this.recurrentKernel.read(),[h,p]=El(c,[2*this.units,this.units],c.rank-1),d=ff(s,h),[f,m,g]=El(u,3,u.rank-1),[y,b]=El(d,2,d.rank-1);i=this.recurrentActivation.apply(mr(f,y)),o=this.recurrentActivation.apply(mr(m,b));const x=ff(br(o,s),p);l=this.activation.apply(mr(g,x));const k=mr(br(i,s),br(mr(1,no(i)),l));return[k,k]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pg(this.activation),recurrentActivation:Pg(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Wf(this.kernelInitializer),recurrentInitializer:Wf(this.recurrentInitializer),biasInitializer:Wf(this.biasInitializer),kernelRegularizer:jg(this.kernelRegularizer),recurrentRegularizer:jg(this.recurrentRegularizer),biasRegularizer:jg(this.biasRegularizer),activityRegularizer:jg(this.activityRegularizer),kernelConstraint:Od(this.kernelConstraint),recurrentConstraint:Od(this.recurrentConstraint),biasConstraint:Od(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Iy.className="GRUCell",or(Iy);class $y extends ky{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Iy(e),super(e)}call(e,t){return cr((()=>{null!=this.cell.dropoutMask&&(hr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}$y.className="GRU",or($y);class Cy extends wy{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,$d(this.units,"units"),this.activation=Vg(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Vg(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Vf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Vf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Vf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=qg(e.kernelRegularizer),this.recurrentRegularizer=qg(e.recurrentRegularizer),this.biasRegularizer=qg(e.biasRegularizer),this.kernelConstraint=Ld(e.kernelConstraint),this.recurrentConstraint=Ld(e.recurrentConstraint),this.biasConstraint=Ld(e.biasConstraint),this.dropout=tf([1,nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=tf([1,nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Yf(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Nf{apply(t,s){const a=e.apply([n]),r=(new $f).apply([n]),i=e.apply([2*n]);return hf(hf(a,r),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return cr((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new id(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ey({ones:()=>zo(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ey({ones:()=>zo(s),rate:this.recurrentDropout,training:n,count:4}));const r=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=br(e,r[0]));let h=ff(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=br(s,i[0])),h=mr(h,ff(s,this.recurrentKernel.read())),this.useBias&&(h=bf(h,this.bias.read()));const[p,d,f,m]=El(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=mr(br(l,a),br(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=br(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pg(this.activation),recurrentActivation:Pg(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Wf(this.kernelInitializer),recurrentInitializer:Wf(this.recurrentInitializer),biasInitializer:Wf(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:jg(this.kernelRegularizer),recurrentRegularizer:jg(this.recurrentRegularizer),biasRegularizer:jg(this.biasRegularizer),activityRegularizer:jg(this.activityRegularizer),kernelConstraint:Od(this.kernelConstraint),recurrentConstraint:Od(this.recurrentConstraint),biasConstraint:Od(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Cy.className="LSTMCell",or(Cy);class Ty extends ky{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Cy(e),super(e)}call(e,t){return cr((()=>{null!=this.cell.dropoutMask&&(hr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Ty.className="LSTM",or(Ty);class Sy extends wy{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return cr((()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const a=[];let r;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],r=0===i?[e[0]].concat(n):[r[0]].concat(n),r=o.call(r,t),a.push(r.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[r[0]].concat(n)}))}build(e){let t;Kf(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{qd(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(wm(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return em(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}tm(t)}}function Ey(e){const{ones:t,rate:n,training:s=!1,count:a=1}=e,r=()=>xf(t(),n),i=()=>kf(r,t,s);if(!a||a<=1)return pr(i().clone());return Array(a).fill(void 0).map(i).map((e=>pr(e.clone())))}Sy.className="StackedRNNCells",or(Sy);var Ay=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n};class Ry extends ky{constructor(e){if(e.unroll)throw new od("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new od("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new nm({ndim:5})]}call(e,t){return cr((()=>{if(null!=this.cell.dropoutMask&&(hr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(hr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new id("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return cr((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=Mo([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]}))}resetStates(e,t=!1){cr((()=>{if(!this.stateful)throw new ad("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new id("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Mo(a))):this.states_=[Mo(a)];else if(null==e)hr(this.states_),null!=this.keptStates&&(hr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Mo(a))):this.states_[0]=Mo(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new id(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):hr(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!h(n.shape,s))throw new id(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>pr(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=ny(l,s[0],a,r[0],i[0]),h=ny(u,s[1],a,r[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Ry.className="ConvRNN2D";class Fy extends Cy{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,$d(this.filters,"filters"),this.kernelSize=ty(n,2,"kernelSize"),this.kernelSize.forEach((e=>$d(e,"kernelSize"))),this.strides=ty(s||1,2,"strides"),this.strides.forEach((e=>$d(e,"strides"))),this.padding=a||"valid",Hd(this.padding),this.dataFormat=r||"channelsLast",Gd(this.dataFormat),this.dilationRate=ty(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>$d(e,"dilationRate")))}build(e){var t;e=Yf(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new id(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],a=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Nf{apply(e,t){return cf([n.apply([s]),Lo([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return cr((()=>{if(3!==e.length)throw new id(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],r=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ey({ones:()=>zo(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?br(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ey({ones:()=>zo(a),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(a,p,0),f=o(a,p,1),m=o(a,p,2),g=o(a,p,3);const[y,b,x,k]=El(this.kernel.read(),4,3),[w,v,N,I]=this.useBias?El(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,w,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,k,I,this.padding);const[$,C,T,S]=El(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,C),m=this.recurrentConv(m,T),g=this.recurrentConv(g,S);const E=this.recurrentActivation.apply(mr(l,d)),A=this.recurrentActivation.apply(mr(u,f)),R=mr(br(A,r),br(E,this.activation.apply(mr(c,m)))),F=br(this.recurrentActivation.apply(mr(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),t=Ay(e,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},t,n)}inputConv(e,t,n,s){const a=hi(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?bf(a,n,this.dataFormat):a}recurrentConv(e,t){return hi(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Fy.className="ConvLSTM2DCell",or(Fy);class Dy extends Ry{constructor(e){const t=new Fy(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Dy.className="ConvLSTM2D",or(Dy);class _y extends om{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return kf((()=>xf(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}_y.className="Dropout",or(_y);class Oy extends _y{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Oy.className="SpatialDropout1D",or(Oy);class My extends om{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,$d(this.units,"units"),this.activation=Vg(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Vf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Vf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ld(e.kernelConstraint),this.biasConstraint=Ld(e.biasConstraint),this.kernelRegularizer=qg(e.kernelRegularizer),this.biasRegularizer=qg(e.biasRegularizer),this.activityRegularizer=qg(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Yf(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Yf(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e),s=Td(this.activation.getClassName());let a;return null!=s?a=ff(n,this.kernel.read(),s,this.bias?this.bias.read():null):(a=ff(n,this.kernel.read()),null!=this.bias&&(a=bf(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:Pg(this.activation),useBias:this.useBias,kernelInitializer:Wf(this.kernelInitializer),biasInitializer:Wf(this.biasInitializer),kernelRegularizer:jg(this.kernelRegularizer),biasRegularizer:jg(this.biasRegularizer),activityRegularizer:jg(this.activityRegularizer),kernelConstraint:Od(this.kernelConstraint),biasConstraint:Od(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}My.className="Dense",or(My);class Ly extends om{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Yf(e);for(const t of e.slice(1))if(null==t)throw new id(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Qd(e,1)]}call(e,t){return cr((()=>{this.invokeCallHook(e,t);let n=Xf(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new id(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Qd(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Ly.className="Flatten",or(Ly);class zy extends om{constructor(e){super(e),this.supportsMasking=!0,this.activation=Vg(e.activation)}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Pg(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}zy.className="Activation",or(zy);class By extends om{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return cr((()=>{return e=Xf(e),t=e,n=this.n,cr((()=>{if(2!==t.shape.length)throw new id(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return pf(rf(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}By.className="RepeatVector",or(By);class Py extends om{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new id("Can only specifiy one unknown dimension.");r=e}else a*=t}const i=Qd(e);if(null!==r){if(0===a||i%a!=0)throw new id(n);s[r]=i/a}else if(i!==a)throw new id(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Py.className="Reshape",or(Py);class Wy extends om{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=sf(1,e.dims.length+1);if(!h(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new nm({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Yf(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Oa(Xf(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Wy.className="Permute",or(Wy);class Vy extends om{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Xf(e);return Ir(Oo(n,this.maskValue),-1)}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e),s=Ir(Oo(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}Vy.className="Masking",or(Vy);class Uy extends om{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(dd(e.inputLength))}this.inputDim=e.inputDim,$d(this.inputDim,"inputDim"),this.outputDim=e.outputDim,$d(this.outputDim,"outputDim"),this.embeddingsInitializer=Vf(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=qg(e.embeddingsRegularizer),this.activityRegularizer=qg(e.activityRegularizer),this.embeddingsConstraint=Ld(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return cr((()=>this.maskZero?(e=Xf(e),Oo(e,Ei(e))):null))}computeOutputShape(e){if(e=Yf(e),null==this.inputLength)return[...e,this.outputDim];const t=dd(this.inputLength);if(t.length!==e.length-1)throw new id(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new id(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(e,t){return cr((()=>{this.invokeCallHook(e,t);let n=Xf(e);"int32"!==n.dtype&&(n=af(n,"int32"));return mf(this.embeddings.read(),n.as1D()).reshape(Yf(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Wf(this.embeddingsInitializer),embeddingsRegularizer:jg(this.embeddingsRegularizer),activityRegularizer:jg(this.activityRegularizer),embeddingsConstraint:Od(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Uy.className="Embedding",or(Uy);class Gy extends om{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new od}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new id("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Yf(e)]),(e=e).length<2)throw new id(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=wd(t),t.length>1)throw new id(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===wd(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return cr((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=nf(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=rf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,a=e[0],r=e.slice(1).concat([a]);let i=s.reshape([a].concat(Qd(e.slice(1))));i=Oa(i,[1,0]),i=i.reshape(r),t.push(i),n=!0}else if(e>1){const a=sf(1,e).concat([0]);t.push(Oa(s,a)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Oa(s.reshape([-1,t]),[1,0]).reshape(n)}else if(a>1){const e=[a-1].concat(sf(0,a-1));s=Oa(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=wd(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return cr((()=>{if(null==t)return null;if(!Array.isArray(t))throw new id("`mask` should be an Array");if(!Array.isArray(e))throw new id("`inputs` should be an Array");if(t.length!==e.length)throw new id(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Oi(e,0))))[0];for(let e=1;e<t.length-1;++e)n=xo(n,t[e]);return n}))}}class Hy extends Gy{constructor(e){super(e)}mergeFunction(e){return cr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=mr(t,e[n]);return t}))}}Hy.className="Add",or(Hy);class jy extends Gy{constructor(e){super(e)}mergeFunction(e){return cr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=br(t,e[n]);return t}))}}jy.className="Multiply",or(jy);class Ky extends Gy{constructor(e){super(e)}mergeFunction(e){return cr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=mr(t,e[n]);return br(1/e.length,t)}))}}Ky.className="Average",or(Ky);class qy extends Gy{constructor(e){super(e)}mergeFunction(e){return cr((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Co(t,e[n]);return t}))}}qy.className="Maximum",or(qy);class Xy extends Gy{constructor(e){super(e)}mergeFunction(e){return cr((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Eo(t,e[n]);return t}))}}Xy.className="Minimum",or(Xy);class Yy extends Gy{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new id("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let a=!1;for(const e of n)if(h(e,s)){a=!0;break}a||n.push(s)}if(n.length>1)throw new id("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return cr((()=>cf(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new id("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new id("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new id("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new id(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return cr((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(zo(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(Oi(t[n],-1)):s.push(t[n]);const a=qr(s,this.axis);return Nr(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Jy(e,t){for(;e<0;)e+=t;return e}Yy.className="Concatenate",or(Yy);class Zy extends Gy{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){i(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new od("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new id(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new id(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Jy(t,e[n].shape.length))):[Jy(this.axes,n.shape.length),Jy(this.axes,s.shape.length)],this.normalize&&(n=vm(n,t[0]),s=vm(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new od("batchDot is not implemented for tensors of 4D or higher rank yet");if(i(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),i(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new od("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const r=n;return cr((()=>{let n,i;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=r[0]===r[1]?e.mul(t).sum(r[0]):e.transpose([1,0]).mul(t).sum(r[1]);else{const n=r[0]!==e.shape.length-1,s=r[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Jy(this.axes,e.length),Jy(this.axes,t.length)],n}computeOutputShape(e){i(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new od("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Zy.className="Dot",or(Zy);class Qy extends om{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e);return kf((()=>df(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}Qy.className="GaussianNoise",or(Qy);class eb extends om{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return cr((()=>{this.invokeCallHook(e,t);const n=Xf(e);if(this.rate>0&&this.rate<1){return kf((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(df(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}eb.className="GaussianDropout",or(eb);class tb extends om{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Xf(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return cr((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return kf((()=>{const t=Xf(e),s=-1.7580993408473766;let a=Ui(rl(n),this.rate);a=af(a,"float32");const r=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-r*s*this.rate;return t.mul(a).add(a.add(-1).mul(s)).mul(r).add(i)}),(()=>Xf(e)),t.training||!1)}return e}))}}function nb(e,t,n,s,a,r=.001){let i;if(2===e.rank)i=ei(e,t,n,s,a,r);else if(3===e.rank)i=ti(e,t,n,s,a,r);else{if(4!==e.rank)throw new od(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=ni(e,t,n,s,a,r)}return i}function sb(e,t,n,s,a=.001){return h(s.slice().sort(),sf(0,e.rank-1))?function(e,t,n,s,a=.001){return cr((()=>{const r=Do(e,s),i=r.mean,o=r.variance;return[nb(e,i,o,n,t,a),i,o]}))}(e,t,n,s,a):function(e,t,n,s,a=.001){return cr((()=>{const r=Do(e,s),i=r.mean,o=r.variance,l=[];for(const t of sf(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[nb(e,u,c,p,h,a),i,o]}))}(e,t,n,s,a)}tb.className="AlphaDropout",or(tb);class ab extends om{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Vf(e.betaInitializer||"zeros"),this.gammaInitializer=Vf(e.gammaInitializer||"ones"),this.movingMeanInitializer=Vf(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Vf(e.movingVarianceInitializer||"ones"),this.betaConstraint=Ld(e.betaConstraint),this.gammaConstraint=Ld(e.gammaConstraint),this.betaRegularizer=qg(e.betaRegularizer),this.gammaRegularizer=qg(e.gammaRegularizer)}build(e){e=Yf(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new id(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new nm({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return cr((()=>{const n=null!=t.training&&t.training,s=Xf(e),a=s.shape,r=a.length,i=sf(0,r),o=this.axis>=0?this.axis:this.axis+r;i.splice(o,1);const l=ud(1,r);l[o]=a[o];const u=i.slice();u.sort();const c=!h(u,sf(0,r).slice(0,r-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,a=this.scale?this.gamma.read().reshape(l):null;return nb(s,e,t,n,a,this.epsilon)}return nb(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=sb(s,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{cr((()=>{const s=1-n,a=e.read(),r=a.sub(t).mul(s);e.write(a.sub(r))}))};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Wf(this.betaInitializer),gammaInitializer:Wf(this.gammaInitializer),movingMeanInitializer:Wf(this.movingMeanInitializer),movingVarianceInitializer:Wf(this.movingVarianceInitializer),betaRegularizer:jg(this.betaRegularizer),gammaRegularizer:jg(this.gammaRegularizer),betaConstraint:Od(this.betaConstraint),gammaConstraint:Od(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}ab.className="BatchNormalization",or(ab);class rb extends om{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Vf(e.betaInitializer||"zeros"),this.gammaInitializer=Vf(e.gammaInitializer||"ones"),this.betaRegularizer=qg(e.betaRegularizer),this.gammaRegularizer=qg(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Yf(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==wd(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=Xf(e),s=n.shape,a=s.length;return cr((()=>{let{mean:e,variance:t}=Do(n,this.axis,!0);const r=ud(1,a);for(const e of this.axis)r[e]=s[e];const i=e=>null!=e&&e.shape.length!==a&&this.axis!==[a-1]?e.reshape(r):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),nb(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Wf(this.betaInitializer),gammaInitializer:Wf(this.gammaInitializer),betaRegularizer:jg(this.betaRegularizer),gammaRegularizer:jg(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}rb.className="LayerNormalization",or(rb);class ib extends om{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new id(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new id(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new id(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new nm({ndim:4})]}computeOutputShape(e){let t,n;return e=Yf(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return cr((()=>{return t=Xf(e),n=this.padding,s=this.dataFormat,cr((()=>{if(4!==t.rank)throw new id(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new id("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new id(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Bo(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function ob(e,t,n,s,a,r){return cr((()=>{let i;Gd(a),jd(r),Hd(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=ay(e,a);const o="same"===s?"same":"valid";return i="max"===r?No(e,t,n,o):jr(e,t,n,o),"channelsFirst"===a&&(i=Oa(i,[0,3,1,2])),i}))}function lb(e,t,n,s,a,r){return cr((()=>{let i;Gd(a),jd(r),Hd(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=ry(e,a);const o="same"===s?"same":"valid";return i="max"===r?Io(e,t,n,o):Kr(e,t,n,o),"channelsFirst"===a&&(i=Oa(i,[0,4,1,2,3])),i}))}ib.className="ZeroPadding2D",or(ib);class ub extends om{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new id(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if($d(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new id(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}$d(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Hd(this.padding),this.inputSpec=[new nm({ndim:3})]}computeOutputShape(e){const t=ny((e=Yf(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return cr((()=>{this.invokeCallHook(e,t),e=rf(Xf(e),2);const n=this.poolingFunction(Xf(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Dl(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class cb extends ub{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),ob(e,t,n,s,a,"max")}}cb.className="MaxPooling1D",or(cb);class hb extends ub{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),ob(e,t,n,s,a,"avg")}}hb.className="AveragePooling1D",or(hb);class pb extends om{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new id(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];$d(this.poolSize,"poolSize"),$d(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gd(this.dataFormat),Hd(this.padding),this.inputSpec=[new nm({ndim:4})]}computeOutputShape(e){e=Yf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=ny(t,this.poolSize[0],this.padding,this.strides[0]),n=ny(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return cr((()=>(this.invokeCallHook(e,t),this.poolingFunction(Xf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class db extends pb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),ob(e,t,n,s,a,"max")}}db.className="MaxPooling2D",or(db);class fb extends pb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),ob(e,t,n,s,a,"avg")}}fb.className="AveragePooling2D",or(fb);class mb extends om{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new id(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];$d(this.poolSize,"poolSize"),$d(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gd(this.dataFormat),Hd(this.padding),this.inputSpec=[new nm({ndim:5})]}computeOutputShape(e){e=Yf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=ny(t,this.poolSize[0],this.padding,this.strides[0]),n=ny(n,this.poolSize[1],this.padding,this.strides[1]),s=ny(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return cr((()=>(this.invokeCallHook(e,t),this.poolingFunction(Xf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class gb extends mb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),lb(e,t,n,s,a,"max")}}gb.className="MaxPooling3D",or(gb);class yb extends mb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Gd(a),Hd(s),lb(e,t,n,s,a,"avg")}}yb.className="AveragePooling3D",or(yb);class bb extends om{constructor(e){super(e),this.inputSpec=[new nm({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new od}}class xb extends bb{constructor(e){super(e||{})}call(e,t){return cr((()=>{const t=Xf(e);return To(t,1)}))}}xb.className="GlobalAveragePooling1D",or(xb);class kb extends bb{constructor(e){super(e||{})}call(e,t){return cr((()=>{const t=Xf(e);return ro(t,1)}))}}kb.className="GlobalMaxPooling1D",or(kb);class wb extends om{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Gd(this.dataFormat),this.inputSpec=[new nm({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new od}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class vb extends wb{call(e,t){return cr((()=>{const t=Xf(e);return"channelsLast"===this.dataFormat?To(t,[1,2]):To(t,[2,3])}))}}vb.className="GlobalAveragePooling2D",or(vb);class Nb extends wb{call(e,t){return cr((()=>{const t=Xf(e);return"channelsLast"===this.dataFormat?ro(t,[1,2]):ro(t,[2,3])}))}}Nb.className="GlobalMaxPooling2D",or(Nb);class Ib extends om{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=wm(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class $b extends Ib{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Yf(e)).length<3)throw new id(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Yf(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return cr((()=>xy(((e,n)=>[Xf(this.layer.call(e,t)),[]]),e=Xf(e),[],!1,null,null,!1,!0)[1]))}}$b.className="TimeDistributed",or($b);class Cb extends Ib{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=wm(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=wm(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,Nd(Vd,"BidirectionalMergeMode",a),e.weights)throw new od("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),a=a,this.returnState?(s=a.slice(1),t=a[0]):t=a[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):pd(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=by(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new id("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map((e=>new nm({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new od("Support for constants in Bidirectional layers is not implemented yet.");const o=r[0]instanceof sm;for(const e of r)if(e instanceof sm!==o)throw new id("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return cr((()=>{const n=t.initialState;let s,a,r,i;if(null==n)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(r=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=hl(a,1)),"concat"===this.mergeMode?i=cf([s,a]):"sum"===this.mergeMode?i=mr(s,a):"ave"===this.mergeMode?i=br(.5,mr(s,a)):"mul"===this.mergeMode?i=br(s,a):null==this.mergeMode&&(i=[s,a]),this.returnState?null==this.mergeMode?i.concat(r):[i].concat(r):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){qd(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),qd(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=wm(t.layer);if(delete t.layer,null!=t.numConstants)throw new od("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}var Tb;function Sb(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}Cb.className="Bidirectional",or(Cb),function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Tb||(Tb={}));const Eb=Hl;class Ab extends t{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new e(this,lr())}write(e,t,n){this.firstUse&&(this.firstUse=!1,W().get("IS_NODE")&&hc("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&I(n[0])){const a=n.map((e=>Yn(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s){this.data.set(e,{values:t,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return pc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Jn(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return va(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return lr().makeTensorFromDataId(s,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=Xn();e();return{kernelMs:Xn()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Sb([e],"where");const t=this.readSync(e.dataId);return Eb(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Rb(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Fb={kernelName:j,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Sb(t,"abs");let s=new Float32Array(c(t.shape));return s=Rb(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}};function Db(e){return(t,n,s,a,r)=>{const i=Ci(t,n),o=i.length,l=E(i),u=x(r,c(i)),h=t.length,p=n.length,d=E(t),f=E(n),m=Ii(t,i),g=Ii(n,i);if(m.length+g.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<u.length;++t){const n=L(t,o,l),r=n.slice(-h);m.forEach((e=>r[e]=0));const i=M(r,h,d),c=n.slice(-p);g.forEach((e=>c[e]=0));const y=M(c,p,f);u[t]=e(s[i],a[y])}return[u,i]}}function _b(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",i)},o}const Ob={kernelName:ge,backendName:"cpu",kernelFunc:_b};function Mb(e,t,n="float32"){if("complex64"===n){return _b({inputs:{real:Mb(e,t,"float32"),imag:Mb(e,t,"float32")},backend:e})}const s=D(c(t),n);return e.makeTensorInfo(t,n,s)}function Lb(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const zb={kernelName:nt,backendName:"cpu",kernelFunc:Lb};function Bb(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Pb={kernelName:jt,backendName:"cpu",kernelFunc:Bb};function Wb(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:r}=s;if("complex64"===r){if("complex64"===a.dtype)return Lb({inputs:{x:a},backend:n});const e=Mb(n,a.shape,a.dtype),t=Wb({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=_b({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=Bb({inputs:{input:a},backend:n}),t=Wb({inputs:{x:e},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(e),t}if(!w(a.dtype,r)){const e=Lb({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:r}}if("int32"===r){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===r){const e=n.data.get(a.dataId).values,t=qn([0],a.dtype),[s,r]=Db(((e,t)=>e!==t?1:0))(a.shape,[],e,t,"bool");return n.makeTensorInfo(r,"bool",s)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${r}`)}const Vb={kernelName:de,backendName:"cpu",kernelFunc:Wb};function Ub(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:r,b:i}=n,o=a;Sb([r,i],e);const l=o.data.get(r.dataId).values,u=o.data.get(i.dataId).values,c=s||r.dtype,[h,p]=t(r.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:a})=>{const{a:r,b:i}=e,o=a;if("complex64"===r.dtype||"complex64"===i.dtype){const e=Wb({inputs:{x:r},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(a.dataId).values,c=Wb({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(r.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),k=o.makeTensorInfo(b,"float32",y),w=_b({inputs:{real:x,imag:k},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(k),w}{const e=o.data.get(r.dataId).values,n=o.data.get(i.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,i.shape,e,n,a);return o.makeTensorInfo(u,a,l)}}}function Gb(e){return(t,n,s,a,r,i)=>{const o=Ci(t,n),l=c(o),u=o.length,h=E(o),p=x("float32",l),d=x("float32",l),f=Ii(t,o),m=Ii(n,o),g=pc(s,a),y=pc(r,i),b=t.length,k=E(t),w=n.length,v=E(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,s=t%y.length,a=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){const n=L(t,u,h),s=n.slice(-b);f.forEach((e=>s[e]=0));const a=M(s,b,k),r=n.slice(-w);m.forEach((e=>r[e]=0));const i=M(r,w,v),o=e(g[2*a],g[2*a+1],y[2*i],y[2*i+1]);p[t]=o.real,d[t]=o.imag}return[p,d,o]}}const Hb=Db(((e,t)=>e+t)),jb=Gb(((e,t,n,s)=>({real:e+n,imag:t+s}))),Kb=Ub(X,Hb,jb),qb={kernelName:X,backendName:"cpu",kernelFunc:Kb};function Xb(e,t,n,s,a){const r=c(s),i=D(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(i[s]+=r>0?t[n]:1)}return i}function Yb(e,t,n,s=!1){const a=e.shape[0],r=e.shape[1],i=va([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<r;a++){const r=e.get(o,a);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(s?i.set(1,o,r):t.size>0?i.set(i.get(o,r)+t.get(o,a),o,r):i.set(i.get(o,r)+1,o,r))}return i}function Jb(e){return(t,n,s)=>{const a=x(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}function Zb(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if(Sb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=c(i.shape),h=n||i.dtype,p=k(h,u);for(let e=0;e<u;++e)p[e]=t(l[e],a);return o.makeTensorInfo(i.shape,h,p)}}function Qb(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if(Sb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,a);return o.makeTensorInfo(i.shape,u,c)}}const ex=Jb((e=>Math.ceil(e))),tx=Qb(fe,ex),nx={kernelName:fe,backendName:"cpu",kernelFunc:tx};function sx(e,t,n,s){const a=k(n,c(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=c(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const r="string"===n?$c(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[o+t]=r[i++]}s+=e.shape[1]}))}return a}const ax=Jb((e=>Math.exp(e))),rx=Qb(Ue,ax),ix={kernelName:Ue,backendName:"cpu",kernelFunc:rx},ox=Jb((e=>Math.expm1(e))),lx=Qb(He,ox),ux={kernelName:He,backendName:"cpu",kernelFunc:lx},cx=Jb((e=>Math.floor(e))),hx=Qb(Xe,cx),px={kernelName:Xe,backendName:"cpu",kernelFunc:hx};function dx(e,t,n){const s=va(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],i=a[2],o=t.locToIndex([r,i]);a[2]=t.values[o];const l=e.locToIndex(a);s.values[n]=e.values[l]}return s}const fx=Db(((e,t)=>e>t?1:0)),mx=Ub(et,fx,null,"bool"),gx={kernelName:et,backendName:"cpu",kernelFunc:mx},yx=Db(((e,t)=>e<t?1:0)),bx=Ub(ut,yx,null,"bool"),xx={kernelName:ut,backendName:"cpu",kernelFunc:bx};function kx(e,t,n){const s=(t-e)/(n-1),a=D(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const wx=Jb((e=>Math.log(e))),vx=Qb(pt,wx),Nx={kernelName:pt,backendName:"cpu",kernelFunc:vx};function Ix(e,t,n,s){const a=x(s,c(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>r&&(r=t)}a[n]=r}return a}const $x=Db(((e,t)=>Math.max(e,t))),Cx=Ub(kt,$x),Tx={kernelName:kt,backendName:"cpu",kernelFunc:Cx},Sx=Db(((e,t)=>Math.min(e,t))),Ex=Ub(St,Sx),Ax={kernelName:St,backendName:"cpu",kernelFunc:Ex},Rx=Db(((e,t)=>e*t)),Fx=Gb(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),Dx=Ub(Ft,Rx,Fx),_x={kernelName:Ft,backendName:"cpu",kernelFunc:Dx};function Ox(e,t,n){const s=Kn(-1,n);return Rx([],t,s,e,n)}const Mx={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Sb(s,"neg");const a=n.data.get(s.dataId).values,[r,i]=Ox(a,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,r)}},Lx=Db(((e,t)=>e!==t?1:0)),zx=Ub(_t,Lx,null,"bool"),Bx={kernelName:_t,backendName:"cpu",kernelFunc:zx};function Px(e,t,n,s,a){const r=t.length,i=c(t),o=E(t),l=E(a),u=x(n,c(a));for(let t=0;t<i;++t){const n=L(t,r,o),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];u[M(a,r,l)]=e[t]}return u}function Wx(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;Sb(a,"transpose");const i=a.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=a.shape[r[e]];const l=Px(s.data.get(a.dataId).values,a.shape,a.dtype,r,o);return{dataId:s.write(l,o,a.dtype),shape:o,dtype:a.dtype}}const Vx={kernelName:Sn,backendName:"cpu",kernelFunc:Wx};function Ux(e,t,n,s){const[a,r]=ho(e,s),i=bs(t,"int32"),o=D(c(a),i),l=c(r);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:a,outDtype:i}}const Gx={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;Sb(a,"prod");const o=a.shape.length,l=y(r,a.shape),u=mo(l,o);let c=l,h=a;const p=[];null!=u&&(h=Wx({inputs:{x:a},backend:n,attrs:{perm:u}}),p.push(h),c=yo(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=Ux(h.shape,h.dtype,d,c);let b=m;return i&&(b=po(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(b,g,f)}};function Hx(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return D(0,s);const a=D(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const jx=Jb((e=>1/Math.sqrt(e))),Kx=Qb(sn,jx),qx={kernelName:sn,backendName:"cpu",kernelFunc:Kx};function Xx(e,t,n,s,a){const r=er(s,t,n),i=c(n),o=E(s);if(r){const n=tr(t,o);return"string"===a?e.slice(n,n+i):e.subarray(n,n+i)}const l=va(s,a,"string"===a?$c(e):e),u=va(n,a);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===a?Cc(u.values):u.values}function Yx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:i}=s;Sb(a,"slice");const[o,l]=nr(a,r,i);Va(a,o,l);const u=Xx(n.data.get(a.dataId).values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}const Jx={kernelName:ln,backendName:"cpu",kernelFunc:Yx},Zx=Db(((e,t)=>{const n=e-t;return n*n})),Qx=Ub(xn,Zx),ek={kernelName:xn,backendName:"cpu",kernelFunc:Qx};function tk(e,t,n,s){const a=va(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),i=new Array(r.length);for(let e=0;e<i.length;e++)i[e]=r[e]*n[e]+s[e];a.set(t.get(...i),...r)}return a}const nk=Db(((e,t)=>e-t)),sk=Gb(((e,t,n,s)=>({real:e-n,imag:t-s}))),ak=Ub(wn,nk,sk),rk={kernelName:wn,backendName:"cpu",kernelFunc:ak};function ik(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=va(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}function ok(e,t,n,s,a){const r=t[t.length-1],[i,o]=[e.length/r,r],l=x(n,i*s),u=x("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o),r=[];for(let e=0;e<a.length;e++)r.push({value:a[e],index:e});r.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=r[e].value,h[e]=r[e].index}const c=t.slice();return c[c.length-1]=s,[va(c,n,l),va(c,"int32",u)]}function lk(e,t,n,s){const a=y(t,n)[0],r=[1,n[0],1];for(let e=0;e<a;e++)r[0]*=n[e];r[1]=n[a];for(let e=a+1;e<n.length;e++)r[2]*=n[e];const i={},o=new Int32Array(n[a]),l=new is(r,s,e),u=[],c=1===r[0]&&1===r[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=r.slice();h[1]=Object.keys(i).length;const p=new is(h,s);u.forEach(((e,t)=>{for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[a]=h[1],{outputValues:p.values,outputShape:d,indices:o}}var uk=Object.freeze({__proto__:null,simpleAbsImpl:Rb,addImpl:Hb,bincountImpl:Xb,bincountReduceImpl:Yb,ceilImpl:ex,concatImpl:sx,expImpl:ax,expm1Impl:ox,floorImpl:cx,gatherV2Impl:dx,greaterImpl:fx,lessImpl:yx,linSpaceImpl:kx,logImpl:wx,maxImpl:Ix,maximumImpl:$x,minimumImpl:Sx,multiplyImpl:Rx,negImpl:Ox,notEqualImpl:Lx,prodImpl:Ux,rangeImpl:Hx,rsqrtImpl:jx,sliceImpl:Xx,squaredDifferenceImpl:Zx,stridedSliceImpl:tk,subImpl:nk,tileImpl:ik,topKImpl:ok,transposeImpl:Px,uniqueImpl:lk});fr("cpu",(()=>new Ab),1);const ck=Zb(Be,(e=>e>=0?e:Math.exp(e)-1)),hk={kernelName:Be,backendName:"cpu",kernelFunc:ck};function pk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s;Sb([a],"leakyRelu");const i=c(a.shape),o=n.data.get(a.dataId).values,l=x("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?r*o[e]:o[e];return n.makeTensorInfo(a.shape,"float32",l)}const dk={kernelName:lt,backendName:"cpu",kernelFunc:pk},fk=Db(((e,t)=>e<0?t*e:e));function mk(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;Sb([s,a],"prelu");const r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,[o,l]=fk(s.shape,a.shape,r,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const gk={kernelName:Ut,backendName:"cpu",kernelFunc:mk},yk=Zb(qt,(e=>Math.max(0,e))),bk={kernelName:qt,backendName:"cpu",kernelFunc:yk},xk=Zb(en,(e=>Math.min(Math.max(0,e),6))),kk={kernelName:en,backendName:"cpu",kernelFunc:xk};function wk(e,t,n,s,a){if("linear"===n)return Lb({inputs:{x:t},backend:e});if("relu"===n)return yk({inputs:{x:t},backend:e});if("elu"===n)return ck({inputs:{x:t},backend:e});if("relu6"===n)return xk({inputs:{x:t},backend:e});if("prelu"===n)return mk({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return pk({inputs:{x:t},backend:e,attrs:{alpha:a}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function vk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=c(a.shape),l=g(r,o),u=c(l);i(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const h=n.data.get(a.dataId);if(null!=h.complexTensorInfos){const e=h.complexTensorInfos.real,t=h.complexTensorInfos.imag;e.shape=l,t.shape=l}return{dataId:a.dataId,shape:l,dtype:a.dtype}}const Nk={kernelName:Xt,backendName:"cpu",kernelFunc:vk};function Ik(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:o,transposeB:l}=s;Sb([a,r],"matMul");const u=a.shape.length,h=r.shape.length,p=o?a.shape[u-2]:a.shape[u-1],d=l?r.shape[h-1]:r.shape[h-2],f=o?a.shape[u-1]:a.shape[u-2],m=l?r.shape[h-2]:r.shape[h-1],g=a.shape.slice(0,-2),y=r.shape.slice(0,-2),b=c(g),x=c(y);i(u>=2&&h>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const k=(b>x?a.shape.slice(0,-2):r.shape.slice(0,-2)).concat([f,m]);i(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${a.shape} and ${r.shape} and transposeA=${o} and transposeB=${l} must match.`));const w=l?[x,m,d]:[x,d,m],v=vk({inputs:{x:a},backend:n,attrs:{shape:o?[b,p,f]:[b,f,p]}}),N=vk({inputs:{x:r},backend:n,attrs:{shape:w}}),I=o?v.shape[1]:v.shape[2],$=o?v.shape[2]:v.shape[1],C=l?N.shape[1]:N.shape[2],T=Math.max(b,x),S=n.data.get(v.dataId).values,A=n.data.get(N.dataId).values,R=E(v.shape),F=E(N.shape),[D,_,O]=o?[R[0],1,R[1]]:[R[0],R[1],1],[M,L,z]=l?[1,F[1],F[0]]:[F[1],1,F[0]],B=$*C,P=va([T,$,C],v.dtype),W=P.values,V=n.blockSize;for(let e=0;e<T;e++)for(let t=0;t<$;t+=V)for(let n=0;n<C;n+=V)for(let s=0;s<I;s+=V){const a=Math.min(t+V,$),r=Math.min(n+V,C),i=Math.min(s+V,I);for(let o=t;o<a;o++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<i;a++){const s=Math.min(e,b-1)*D,r=Math.min(e,x-1)*z;n+=S[s+o*_+a*O]*A[a*M+t*L+r]}W[e*B+(o*C+t)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(k,P.dtype,P.values)}const $k={kernelName:ce,backendName:"cpu",kernelFunc:Ik};const Ck={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Ik({inputs:{a:a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Kb({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=wk(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}},Tk=Zb(K,(e=>Math.acos(e))),Sk={kernelName:K,backendName:"cpu",kernelFunc:Tk},Ek=Zb(q,(e=>Math.acosh(e))),Ak={kernelName:q,backendName:"cpu",kernelFunc:Ek};const Rk={kernelName:Y,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Sb(t,"addN");const a=s.map((e=>n.data.get(e.dataId).values)),r=va(s[0].shape,s[0].dtype),i=r.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};const Fk={kernelName:J,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;Sb(a,"all");const o=y(r,a.shape);let l=o;const u=mo(l,a.shape.length);let h=a;null!=u&&(h=Wx({inputs:{x:a},backend:n,attrs:{perm:u}}),l=yo(l.length,a.shape.length)),fo("all",l,h.shape.length);const[p,d]=ho(h.shape,l),f=c(d),m=D(c(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,m);if(i){const e=vk({inputs:{x:b},backend:n,attrs:{shape:po(p,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}};const Dk={kernelName:Z,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;Sb(a,"any");const o=y(r,a.shape);let l=o;const u=mo(l,a.shape.length);let h=a;null!=u&&(h=Wx({inputs:{x:a},backend:n,attrs:{perm:u}}),l=yo(l.length,a.shape.length)),fo("any",l,h.shape.length);const[p,d]=ho(h.shape,l),f=c(d),m=D(c(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,m);if(i){const e=vk({inputs:{x:b},backend:n,attrs:{shape:po(p,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}};const _k={kernelName:Q,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;Sb(a,"argMax");let i=y(r,a.shape);const o=mo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Wx({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=yo(i.length,l.shape.length)),i=[i[0]],fo("argMax",i,l.shape.length);const[h,p]=ho(l.shape,i),d=D(c(h),"int32"),f=c(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const a=m[t+e];a>n&&(n=a,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(h,"int32",d)}};const Ok={kernelName:ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;Sb(a,"argMin");let i=y(r,a.shape);const o=mo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Wx({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=yo(i.length,l.shape.length)),i=[i[0]],fo("argMin",i,l.shape.length);const[h,p]=ho(l.shape,i),d=D(c(h),"int32"),f=c(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const a=m[t+e];a<n&&(n=a,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(h,"int32",d)}},Mk=Zb(te,(e=>Math.asin(e))),Lk={kernelName:te,backendName:"cpu",kernelFunc:Mk},zk=Zb(ne,(e=>Math.asinh(e))),Bk={kernelName:ne,backendName:"cpu",kernelFunc:zk},Pk=Zb(se,(e=>Math.atan(e))),Wk={kernelName:se,backendName:"cpu",kernelFunc:Pk},Vk=Db(((e,t)=>Math.atan2(e,t))),Uk=Ub(re,Vk),Gk={kernelName:re,backendName:"cpu",kernelFunc:Uk},Hk=Zb(ae,(e=>Math.atanh(e))),jk={kernelName:ae,backendName:"cpu",kernelFunc:Hk};function Kk(e,t,n,s,a,r){const i=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,h=a.effectiveFilterWidth,p=a.padInfo.top,d=a.padInfo.left,f="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=va(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){const k=y*i-p,w=Math.max(0,k),v=Math.min(a.inHeight,c+k),N=n+y*b;for(let n=0;n<a.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(a.inWidth,h+i);let y=f,b=0,k=0;for(let n=w;n<v;n+=l){const a=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[a+n*s[2]+t];"max"===r&&i>y?y=i:"avg"===r&&(b+=i,k++)}if(isNaN(y))break}g[N+n*x+t]="avg"===r?b/k:y}}}return m}function qk(e,t,n,s,a=!1,r=!1){const i=va(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=va(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let k=Number.NEGATIVE_INFINITY,w=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>k&&(k=u,w=a?r?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(w,e,n,o,t)}}return i}function Xk(e,t,n,s,a,r){const i=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,h=a.dilationWidth,p=a.effectiveFilterDepth,d=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=va(a.outShape,n),k=x.values,w=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],v=a.outShape[2]*a.outShape[3]*a.outShape[4],N=a.outShape[3]*a.outShape[4],I=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*w,x=t*s[0];for(let t=0;t<a.inChannels;++t)for(let w=0;w<a.outDepth;++w){const $=w*i-m;let C=$;for(;C<0;)C+=u;const T=Math.min(a.inDepth,p+$),S=n+w*v;for(let n=0;n<a.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(a.inHeight,d+i),w=S+n*N;for(let n=0;n<a.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(a.inWidth,f+i),g=w+n*I;let v=b,N=0,$=0;for(let n=C;n<T;n+=u){const a=x+n*s[1];for(let n=p;n<m;n+=c){const i=a+n*s[2];for(let n=o;n<d;n+=h){const a=e[i+n*s[3]+t];if("max"===r&&a>v?v=a:"avg"===r&&(N+=a,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}k[g+t]="avg"===r?N/$:v}}}}return x}const Yk={kernelName:ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Sb(a,"avgPool");const{filterSize:r,strides:o,pad:l,dimRoundingMode:u}=s;i(Ur(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Dr(a.shape,r,o,1,l,u);let p;if(1===c.filterWidth&&1===c.filterHeight&&h(c.inShape,c.outShape))p=Lb({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=E(a.shape),s=Kk(e,a.shape,a.dtype,t,c,"avg");p=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return p}};const Jk={kernelName:le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Sb(a,"avgPool3d");const c=_r(a.shape,r,i,1,o,l,u),h=Xk(n.data.get(a.dataId).values,a.shape,a.dtype,E(a.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Zk={kernelName:ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Sb([a,r],"avgPool3DGrad");const c=_r(r.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,k=c.effectiveFilterDepth,w=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=k-1-c.padInfo.front,I=v-1-c.padInfo.left,$=w-1-c.padInfo.top,C=va(r.shape,"float32"),T=1/(f*m*g),S=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-N,i=s-$,o=a-I;let l=0;for(let n=0;n<k;n+=y){const s=(r+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<w;n+=b){const a=(i+n)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<v;n+=x){const r=(o+n)/d;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;l+=S.get(e,s,a,r,t)}}}C.set(l*T,e,n,s,a,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const Qk={kernelName:oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;Sb([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Dr(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,k=y-1-c.padInfo.top,w=va(i.shape,"float32"),v=1/(d*f),N=n.data.get(a.dataId).values,I=va(a.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const a=n-k,r=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(a+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const a=(r+n)/p;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;i+=I.get(e,s,a,t)}}w.set(i*v,e,n,s,t)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const ew={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:r,offset:o,mean:l,variance:u}=t;i(l.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==o||l.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==r||l.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Sb([a,l,u,r,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,p=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values,f=r?n.data.get(r.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,k=p.length;let w=0,v=0,N=0,I=0;for(let e=0;e<h.length;++e)g[e]=m[w++]+(h[e]-p[v++])*f[N++]/Math.sqrt(d[I++]+c),w>=y&&(w=0),v>=k&&(v=0),N>=b&&(N=0),I>=x&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};const tw={kernelName:he,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:i}=s;Sb([a],"batchToSpaceND");const o=r.reduce(((e,t)=>e*t)),l=Zu(a.shape,r,o),u=Qu(l.length,r.length),c=ec(a.shape,r,o),h=tc(i,r.length),p=nc(c,i,r.length),d=vk({inputs:{x:a},backend:n,attrs:{shape:l}}),f=Wx({inputs:{x:d},backend:n,attrs:{perm:u}}),m=vk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Yx({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const nw={kernelName:pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=Xb(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,o)}},sw=Zb(me,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),aw={kernelName:me,backendName:"cpu",kernelFunc:sw},rw={kernelName:ye,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(c(t.shape)),a=n.data.get(t.dataId),r=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function iw(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const ow={kernelName:at,backendName:"cpu",kernelFunc:iw};function lw(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=y(a,t[0].shape)[0];let i=Xu(t.map((e=>e.shape)),r);if(0===c(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>c(e.shape)>0));if(1===o.length)return Lb({inputs:{x:o[0]},backend:n});if(qu(o.map((e=>e.shape)),r),"complex64"===o[0].dtype){const e=o.map((e=>Bb({inputs:{input:e},backend:n}))),t=o.map((e=>iw({inputs:{input:e},backend:n}))),s=lw({inputs:e,backend:n,attrs:{axis:r}}),a=lw({inputs:t,backend:n,attrs:{axis:r}}),i=_b({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}const l=o.map((e=>{const t=c(e.shape.slice(r));return vk({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Xu(l.map((e=>e.shape)),1);const h=1===l[0].shape[0],p=sx(u,i,t[0].dtype,h),d=Xu(o.map((e=>e.shape)),r),f=n.makeTensorInfo(d,t[0].dtype,p);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const uw={kernelName:be,backendName:"cpu",kernelFunc:lw};function cw(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Sb([a,r],"conv2d");const h=Gr(l),p=Or(a.shape,r.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,k=new is(p.outShape,a.dtype),w=E(a.shape),v=E(r.shape),N=w[0],I=x?w[1]:w[2],$=x?w[2]:1,C=x?1:w[1],T=k.strides[0],S=x?k.strides[1]:k.strides[2],A=x?k.strides[2]:1,R=x?1:k.strides[1],F=n.data.get(a.dataId).values,D=n.data.get(r.dataId).values,_=k.values;for(let e=0;e<p.batchSize;++e){const t=e*N,n=e*T;for(let e=0;e<p.outHeight;++e){const s=n+e*S,a=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=a+e*m;if(n<0||n>=p.inHeight)continue;const r=e*v[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=s+e*A,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const a=i+s*$;let o=r+e*v[1];for(let e=0;e<p.inChannels;++e){const n=F[a+e*C];for(let e=0;e<p.outChannels;++e)_[t+e*R]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,_)}const hw={kernelName:xe,backendName:"cpu",kernelFunc:cw};const pw={kernelName:ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Sb([a,r],"conv2dBackpropFilter");const h=Gr(l),p=Or(a.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new is(p.filterShape,"float32"),x=p.padInfo.left,k=p.padInfo.top,w=n.data.get(a.dataId).values,v=n.data.get(r.dataId).values,N=new is(a.shape,a.dtype,w),I=new is(r.shape,r.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((k-e)/d)),n=Math.min(p.outHeight,(p.inHeight+k-e)/d);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((x-s)/f)),r=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-k;for(let e=a;e<r;++e){const n=s+e*f-x;l+=y?N.get(u,t,n,i)*I.get(u,c,e,o):N.get(u,i,t,n)*I.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const dw={kernelName:we,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;Sb([a,r],"conv2dBackpropInput");const h=E(r.shape),p=E(a.shape);let d=Gr(u);const f=Or(i,r.shape,o,1,l,c,!1,d),m=new is(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(r.dataId).values,[x,k,w]=h,{batchSize:v,filterHeight:N,filterWidth:I,inChannels:$,inHeight:C,inWidth:T,outChannels:S,outHeight:A,outWidth:R,strideHeight:F,strideWidth:D}=f;d=f.dataFormat;const _=N-1-f.padInfo.top,O=I-1-f.padInfo.left,M="channelsLast"===d,L=m.strides[0],z=M?m.strides[1]:m.strides[2],B=M?m.strides[2]:1,P=M?1:m.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<$;++t)for(let n=0;n<C;++n){const s=n-_,a=Math.max(0,Math.ceil(s/F)),r=Math.min(A,(N+s)/F);for(let i=0;i<T;++i){const o=i-O,l=Math.max(0,Math.ceil(o/D)),u=Math.min(R,(I+o)/D);let c=0;for(let n=a;n<r;++n){const a=n*F-s;for(let s=l;s<u;++s){const r=W*e+V*n+U*s,i=x*(N-1-a)+k*(I-1-(s*D-o))+w*t;for(let e=0;e<S;++e){c+=y[r+G*e]*b[i+e]}}}g[L*e+z*n+B*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const fw={kernelName:ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s;Sb([a,r],"conv3d");const u=Mr(a.shape,r.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,k=new is(u.outShape,a.dtype),w=n.data.get(a.dataId).values,v=n.data.get(r.dataId).values,N=k.values,I=E(a.shape),$=E(r.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*k.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*k.strides[1],a=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=a+e*d;if(n<0||n>=u.inDepth)continue;const r=e*$[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=s+e*k.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const a=r+e*$[1],o=i+s*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const r=a+e*$[2],i=o+t*u.inChannels;let l=r;for(let e=0;e<u.inChannels;++e){const t=w[i+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const mw={kernelName:Ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s;Sb([a,r],"conv3dBackpropFilterV2");const u=E(a.shape),c=E(r.shape),h=Mr(a.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new is(h.filterShape,"float32"),x=b.values,[k,w,v,N]=b.strides,I=n.data.get(r.dataId).values,[$,C,T,S]=c,A=n.data.get(a.dataId).values,[R,F,D,_]=u,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/p)),n=Math.min(h.outDepth,(h.inDepth+O-e)/p),s=e*k;for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((L-a)/d)),i=Math.min(h.outHeight,(h.inHeight+L-a)/d),o=a*w+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((M-s)/f)),u=Math.min(h.outWidth,(h.inWidth+M-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*R,y=m*$;for(let m=t;m<n;++m){const t=(e+m*p-O)*F+h,n=m*C+y;for(let e=r;e<i;++e){const r=(a+e*d-L)*D+t,i=e*T+n;for(let e=l;e<u;++e){const t=e*S+i;g+=A[(s+e*f-M)*_+r+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const gw={kernelName:Ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s;Sb([a],"conv3dBackpropInputV2");const u=E(a.shape),c=E(r.shape),h=Mr(l,r.shape,o,1,i),p=new is(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(a.dataId).values,[x,k,w,v]=u,N=n.data.get(r.dataId).values,[I,$,C,T]=c,{batchSize:S,filterDepth:A,filterHeight:R,filterWidth:F,inChannels:D,inDepth:_,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=A-1-h.padInfo.front,H=R-1-h.padInfo.top,j=F-1-h.padInfo.left;for(let e=0;e<S;++e)for(let t=0;t<D;++t)for(let n=0;n<_;++n){const s=n-G,a=Math.max(0,Math.ceil(s/W)),r=Math.min(z,(A+s)/W);for(let i=0;i<O;++i){const o=i-H,l=Math.max(0,Math.ceil(o/V)),u=Math.min(B,(R+o)/V);for(let c=0;c<M;++c){const h=c-j,p=Math.max(0,Math.ceil(h/U)),S=Math.min(P,(F+h)/U);let E=0;for(let n=a;n<r;++n){const a=n*W-s;for(let s=l;s<u;++s){const r=s*V-o;for(let i=p;i<S;++i){const o=x*e+k*n+w*s+v*i,l=I*(A-1-a)+$*(R-1-r)+C*(F-1-(i*U-h))+T*t;for(let e=0;e<L;++e){E+=b[o+e]*N[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=E}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},yw=Zb($e,(e=>Math.cos(e))),bw={kernelName:$e,backendName:"cpu",kernelFunc:yw},xw=Zb(Ce,(e=>Math.cosh(e))),kw={kernelName:Ce,backendName:"cpu",kernelFunc:xw};const ww={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=a.shape,f=r.shape[0],[m,g]=o,y=va([f,m,g,d],"float32"),b=n.data.get(r.dataId).values,x=n.data.get(i.dataId).values,k=n.data.get(a.dataId).values,w=E(a.shape),v=E(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],a=b[t+2],r=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(a-n)*(h-1)/(m-1):0,f=g>1?(r-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+a)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+r)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let r=s+h*w[2]+n*w[1]+i*w[0];const u=k[r];r=s+m*w[2]+n*w[1]+i*w[0];const c=k[r];r=s+h*w[2]+a*w[1]+i*w[0];const p=k[r];r=s+m*w[2]+a*w[1]+i*w[0];const d=u+(c-u)*b,f=p+(k[r]-p)*b;r=s+l*v[2]+t*v[1]+e*v[0],y.values[r]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const a=g>1?s*(p-1)+n*f:.5*(s+r)*(p-1);if(a<0||a>p-1){for(let s=0;s<d;s++){const a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}continue}const o=Math.round(a),l=Math.round(c);for(let s=0;s<d;s++){const a=s+o*w[2]+l*w[1]+i*w[0],r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=k[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const vw={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;Sb(a,"cumsum");const l=mo([r],a.shape.length);let u=a;null!=l&&(u=Wx({inputs:{x:a},backend:n,attrs:{perm:l}}));const h=yo(1,a.shape.length)[0];if(h!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);const p=bs(u.dtype,"int32"),d=D(c(u.shape),p),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=i?0:f[n];else{const s=g(e,t-1);d[n]=i?f[s]+d[s]:f[n]+d[s]}}const y=n.makeTensorInfo(u.shape,p,d);if(null!=l){const e=Wx({inputs:{x:y},backend:n,attrs:{perm:go(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}};const Nw={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=Xb(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,e)}if(2===a.shape.length){const e=Yb(n.bufferSync(a),n.bufferSync(r),i,o);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};const Iw={kernelName:Ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s;i("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`)),i(r>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${r}`));const l=a.shape[0],u=a.shape[1],c=a.shape[2],h=a.shape[3],p=u*r,d=c*r,f=h/(r*r),m=n.data.get(a.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let e=0;e<l;++e)for(let t=0;t<p;++t){const n=Math.floor(t/r),s=t%r;for(let t=0;t<d;++t){const a=Math.floor(t/r),i=(s*r+t%r)*f;for(let t=0;t<f;++t){const s=t+i+h*(a+c*(n+u*e));g[y++]=m[s]}}}return n.makeTensorInfo([l,p,d,f],a.dtype,g)}};function $w(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;Sb([a,r],"depthwiseConv2DNative");const h=E(a.shape),p=E(r.shape);let d=u;null==d&&(d=[1,1]),i(Ur(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const f=Or(a.shape,r.shape,o,d,l,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,k=x.left,w=x.top,v=f.outChannels/f.inChannels,N=new is(f.outShape,a.dtype),I=n.data.get(a.dataId).values,$=n.data.get(r.dataId).values,C=N.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*N.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*N.strides[1],a=e*f.strideHeight-k;for(let e=0;e<m;++e){const n=a+e*y;if(n<0||n>=f.inHeight)continue;const r=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*N.strides[2],n=e*f.strideWidth-w;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const a=r+e*p[1],o=i+s*f.inChannels;let l=t,u=a;for(let e=0;e<f.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)C[l+e]+=t*$[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const Cw={kernelName:Re,backendName:"cpu",kernelFunc:$w};const Tw={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;Sb([a,r],"depthwiseConv2dNativeBackpropFilter");const h=Or(a.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new is(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,k=n.data.get(a.dataId).values,w=new is(a.shape,a.dtype,k),v=n.data.get(r.dataId).values,N=new is(r.shape,r.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const a=Math.max(0,Math.ceil((y-s)/d)),r=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=a;e<r;++e){const n=s+e*d-y;u+=w.get(l,t,n,o)*N.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Sw={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;Sb([a,r],"depthwiseConv2DNativeBackpropInput");const h=E(a.shape),p=E(r.shape),d=Or(c,r.shape,i,o,l,u,!0),f=new is(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(a.dataId).values,[k,w,v]=h,N=n.data.get(r.dataId).values,[I,$,C]=p,{batchSize:T,filterHeight:S,filterWidth:A,inChannels:R,inHeight:F,inWidth:D,outChannels:_,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=d,B=S-1-d.padInfo.top,P=A-1-d.padInfo.left,W=_/R;for(let e=0;e<T;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const s=n-B,a=Math.max(0,Math.ceil(s/L)),r=Math.min(O,(S+s)/L);for(let i=0;i<D;++i){const o=i-P,l=Math.max(0,Math.ceil(o/z)),u=Math.min(M,(A+o)/z);let c=0;for(let n=a;n<r;++n){const a=n*L-s;for(let s=l;s<u;++s){const r=k*e+w*n+v*s,i=I*(S-1-a)+$*(A-1-(s*z-o))+C*t;for(let e=0;e<W;++e){c+=x[r+(t*W+e)]*N[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const Ew={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=c(s.shape),r=n.data.get(s.dataId).values,i=va([a,a],s.dtype),o=i.values;for(let e=0;e<r.length;e++)o[e*a+e]=r[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Aw={kernelName:Oe,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:r,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,h=s.shape.length,p=l.data.get(a.dataId).values,d=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:N,filterHeight:I,filterWidth:$,dilationHeight:C,dilationWidth:T,outShape:S}=Fr(s.shape,a.shape,r,i,"NHWC",o),A=c(S),R=S.length,F=k(s.dtype,A);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*v-w.top;for(let r=0;r<x;++r){const i=r*N-w.left;for(let o=0;o<y;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const r=n+t*C;if(r>=0&&r<m)for(let n=0;n<$;++n){const c=i+n*T;if(c>=0&&c<g){const i=M([e,r,c,o],h,E(s.shape)),f=M([t,n,o],d,E(a.shape)),m=u[i]+p[f];m>l&&(l=m)}}}F[M([e,t,r,o],R,E(S))]=l}}}return{dataId:l.write(qn(F,s.dtype),S,s.dtype),shape:S,dtype:s.dtype}}},Rw={kernelName:Le,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=R(s.shape,c.data.get(s.dataId).values),p=R(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=Fr(s.shape,a.shape,o,l,"NHWC",u);i(r.rank===C.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${C.length}, but got ${r.rank}`));const T=R(C,c.data.get(r.dataId).values),S=_(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*k-x.top;for(let s=0;s<b;++s){const a=s*w-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=a+n*$;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=t,l=n)}}}S[o][l][r]+=T[e][t][s][r]}}}return{dataId:c.write(qn(S,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Fw={kernelName:Me,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=R(s.shape,c.data.get(s.dataId).values),p=R(a.shape,c.data.get(a.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=Fr(s.shape,a.shape,o,l,"NHWC",u);i(r.rank===C.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${C.length}, but got ${r.rank}`));const T=R(C,c.data.get(r.dataId).values),S=_(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*k-x.top;for(let s=0;s<b;++s){const a=s*w-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=a+n*$;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=s,l=u)}}}S[e][o][l][r]+=T[e][t][s][r]}}}return{dataId:c.write(qn(S,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};const Dw={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;Sb([s,a],"eluGrad");const r=new Float32Array(c(a.shape)),i=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];r[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",r)}},_w=Db(((e,t)=>e===t?1:0)),Ow=Ub(Ve,_w,null,"bool"),Mw={kernelName:Ve,backendName:"cpu",kernelFunc:Ow},Lw=Zb(We,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})),zw={kernelName:We,backendName:"cpu",kernelFunc:Lw};function Bw(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:r}=s,o=a.shape.length,l=a.shape.slice();let u=r;return r<0&&(i(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+r+1),l.splice(u,0,1),vk({inputs:{x:a},backend:n,attrs:{shape:l}})}const Pw={kernelName:Ge,backendName:"cpu",kernelFunc:Bw},Ww=Db(((e,t)=>e/t)),Vw=Ub(ze,Ww),Uw={kernelName:ze,backendName:"cpu",kernelFunc:Vw};function Gw(e,t,n){const s=e.shape,a=s[0],r=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[a,r],h=c(u),p=x("float32",h),d=x("float32",h);for(let e=0;e<a;e++){const s=Yx({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,r]}}),a=Yx({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,r]}}),i=_b({inputs:{real:s,imag:a},backend:n}),{real:u,imag:c}=Hw(i,t,n),h=pc(u,c);for(let t=0;t<r;t++){const n=gc(h,t);p[e*r+t]=n.real,d[e*r+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",p),m=n.makeTensorInfo(u,"float32",d),g=_b({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Hw(e,t,n){const s=c(e.shape),a=n.data.get(e.dataId),r=n.data.get(a.complexTensorInfos.real.dataId).values,i=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const a=jw(r,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",a.real),t=n.makeTensorInfo(o,"float32",a.imag),r=n.makeTensorInfo([],"float32",Kn(s,"float32")),i=Lb({inputs:{x:r},backend:n}),l=Uw.kernelFunc({inputs:{a:e,b:r},backend:n}),u=Uw.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return a}return dc(function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let r=0,i=0;for(let s=0;s<t;s++){const o=xc(a*s,t,n),l=gc(e,s);r+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(r/=t,i/=t),yc(s,r,i,a)}return s}(pc(r,i),s,t));var o}function jw(e,t,n,s,a){if(1===n)return{real:e,imag:t};const r=pc(e,t),i=n/2,o=fc(r),l=o.real,u=o.imag,c=[l.length],h=a.makeTensorInfo(c,"float32",l),p=a.makeTensorInfo(c,"float32",u),d=_b({inputs:{real:h,imag:p},backend:a}),f=mc(r),m=f.real,g=f.imag,y=[m.length],b=a.makeTensorInfo(y,"float32",m),x=a.makeTensorInfo(y,"float32",g),k=_b({inputs:{real:b,imag:x},backend:a}),w=jw(l,u,i,s,a),v=w.real,N=w.imag,I=[v.length],$=a.makeTensorInfo(I,"float32",v),C=a.makeTensorInfo(I,"float32",N),T=_b({inputs:{real:$,imag:C},backend:a}),S=jw(m,g,i,s,a),E=S.real,A=S.imag,R=[E.length],F=a.makeTensorInfo(R,"float32",E),D=a.makeTensorInfo(R,"float32",A),_=_b({inputs:{real:F,imag:D},backend:a}),O=bc(n,s),M=[O.real.length],L=a.makeTensorInfo(M,"float32",O.real),z=a.makeTensorInfo(M,"float32",O.imag),B=_b({inputs:{real:L,imag:z},backend:a}),P=Dx({inputs:{a:B,b:_},backend:a}),W=Kb({inputs:{a:T,b:P},backend:a}),V=ak({inputs:{a:T,b:P},backend:a}),U=Bb({inputs:{input:W},backend:a}),G=Bb({inputs:{input:V},backend:a}),H=iw({inputs:{input:W},backend:a}),j=iw({inputs:{input:V},backend:a}),K=lw({inputs:[U,G],backend:a,attrs:{axis:0}}),q=lw({inputs:[H,j],backend:a,attrs:{axis:0}}),X=a.data.get(K.dataId).values,Y=a.data.get(q.dataId).values;return a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(k),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(q),{real:X,imag:Y}}const Kw={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=c(s.shape),r=s.shape[s.shape.length-1],i=vk({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=Gw(i,!1,n),l=vk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function qw(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:r}=n,i=r||C(a),o=k(i,c(s));return function(e,t,n){e.fill(t)}(o,a),t.makeTensorInfo(s,i,o)}const Xw={kernelName:Ke,backendName:"cpu",kernelFunc:qw};const Yw={kernelName:qe,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,r=x(s.dtype,c(s.shape)),[i,o,l,u]=s.shape,h=a.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const a=s*u;for(let o=0;o<u;o++){const c=[i,e,s,o][2],p=Math.round(l-c),d=t+n+a+o;let f=h[d];if(p>=0&&p<l){f=h[t+n+p*u+o]}r[d]=f}}}}return{dataId:a.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Jw=Db(((e,t)=>Math.floor(e/t))),Zw=Ub(Ye,Jw,null,"int32"),Qw={kernelName:Ye,backendName:"cpu",kernelFunc:Zw};const ev={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=cw({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Kb({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=wk(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const tv={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=$w({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Kb({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=wk(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const nv={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=c(s.shape),i=a.shape,o=i[i.length-1],[l,u,h,p]=za(s,a);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=va([u,h],s.dtype),f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const a=f[e*o+s];n+=a*p[s],t.push(a)}if(n<0||n>=r/h)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<h;t++)d.values[e*h+t]=m[n*h+t]}return n.makeTensorInfo(l,d.dtype,d.values)}};const sv={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s;Sb([a,r],"gatherV2");let l=o;null==o&&(l=0);const u=c(r.shape),h=Nc(a,r,y(i,a.shape)[0],l),p=vk({inputs:{x:a},backend:n,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),d=vk({inputs:{x:r},backend:n,attrs:{shape:[h.batchSize,u/h.batchSize]}}),f=[h.batchSize,h.outerSize,u/h.batchSize,h.sliceSize],m=n.bufferSync(d),g=dx(n.bufferSync(p),m,f);return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(h.outputShape,g.dtype,g.values)}},av=Db(((e,t)=>e>=t?1:0)),rv=Ub(tt,av,null,"bool"),iv={kernelName:tt,backendName:"cpu",kernelFunc:rv};const ov={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=c(s.shape),r=s.shape[s.shape.length-1],i=vk({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=Gw(i,!0,n),l=vk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},lv=Zb(rt,(e=>Number.isFinite(e)?1:0),"bool"),uv={kernelName:rt,backendName:"cpu",kernelFunc:lv},cv=Zb(it,(e=>Math.abs(e)===1/0?1:0),"bool"),hv={kernelName:it,backendName:"cpu",kernelFunc:cv},pv=Zb(ot,(e=>Number.isNaN(e)?1:0),"bool"),dv={kernelName:ot,backendName:"cpu",kernelFunc:pv},fv=Db(((e,t)=>e<=t?1:0)),mv=Ub(ct,fv,null,"bool"),gv={kernelName:ct,backendName:"cpu",kernelFunc:mv};const yv={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=kx(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},bv=Zb(dt,(e=>Math.log1p(e))),xv={kernelName:dt,backendName:"cpu",kernelFunc:bv},kv=Db(((e,t)=>e&&t)),wv=Ub(ft,kv,null,"bool"),vv={kernelName:ft,backendName:"cpu",kernelFunc:wv},Nv=Zb(mt,(e=>e?0:1),"bool"),Iv={kernelName:mt,backendName:"cpu",kernelFunc:Nv},$v=Db(((e,t)=>e||t)),Cv=Ub(gt,$v,null,"bool"),Tv={kernelName:gt,backendName:"cpu",kernelFunc:Cv};const Sv={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s;Sb(a,"LRN");const u=a.shape[3],h=u-1,p=n.data.get(a.dataId).values,d=c(a.shape),f=new Float32Array(d);function m(e){const t=e%u;let n=e-t+Math.max(0,t-r);const s=e-t+Math.min(t+r,h);let a=0;for(;n<=s;n++){const e=p[n];a+=e*e}return a}for(let e=0;e<d;e++){const t=m(e),n=p[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(a.shape,a.dtype,f)}};const Ev={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=s;Sb(i,"LRNGrad");const p=c(i.shape),d=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(r.dataId).values,y=new Float32Array(p),b=p;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-o),s=e-t+Math.min(d,t+o+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(m[e],2);a=u*a+l;for(let t=n;t<s;t++){let n=-2*u*h*m[t]*g[e]/a;e===t&&(n+=Math.pow(a,-h)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(i.shape,a.dtype,y)}};function Av(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=n;let l=a.shape;const u=l.length,h=y(r,l);let p=h;const d=mo(p,u);let f=o.data.get(a.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];f=Px(f,l,a.dtype,d,e),p=yo(p.length,u),l=e}Sb(a,"max"),fo("max",p,u);const[m,g]=ho(l,p),b=Ix(f,c(g),m,a.dtype),x=o.write(b,m,a.dtype);let k=m;if(i){k=po(m,h)}return{dataId:x,shape:k,dtype:a.dtype}}const Rv={kernelName:xt,backendName:"cpu",kernelFunc:Av};const Fv={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Sb(a,"maxPool");const{filterSize:r,strides:o,pad:l,dimRoundingMode:u}=s;i(Ur(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Dr(a.shape,r,o,1,l,u);let p;if(1===c.filterWidth&&1===c.filterHeight&&h(c.inShape,c.outShape))p=Lb({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=E(a.shape),s=Kk(e,a.shape,a.dtype,t,c,"max");p=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return p}};const Dv={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Sb(a,"maxPool3d");const c=_r(a.shape,r,i,1,o,l,u),h=Xk(n.data.get(a.dataId).values,a.shape,a.dtype,E(a.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const _v={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Sb([a,r],"maxPool3DGrad");const c=_r(r.shape,i,o,1,l,u),h=function(e,t){const n=va(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,r=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const k=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*a-d;let p=u;for(;p<0;)p+=o;const w=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const d=a*r-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,$=-1;for(let t=x;t<k;t+=i){const n=t-b;for(let s=p;s<w;s+=o){const a=s-u;for(let r=v;r<N;r+=l){const i=r-d,o=e.get(m,t,s,r,g);o>=I&&(I=o,$=n*c*h+a*c+i)}}}n.set($,m,y,s,a,g)}}}return n}(n.bufferSync(r),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,k=c.effectiveFilterWidth,w=b-1-c.padInfo.front,v=k-1-c.padInfo.left,N=x-1-c.padInfo.top,I=va(r.shape,"float32"),$=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-w,i=s-N,o=a-v;let l=0;for(let n=0;n<b;n+=m){const s=(r+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let a=0;a<x;a+=g){const r=(i+a)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let i=0;i<k;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*k-1-h.get(e,s,r,u,t)===n*x*k+a*k+i?1:0;if(0===p)continue;l+=$.get(e,s,r,u,t)*p}}}I.set(l,e,n,s,a,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Ov={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;Sb([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Dr(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=va(p.outShape,o.dtype,qk(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,k=p.effectiveFilterWidth,w=k-1-p.padInfo.left,v=x-1-p.padInfo.top,N=va(o.shape,"float32"),I=n.data.get(a.dataId).values,$=va(a.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const a=n-v,r=s-w;let i=0;for(let n=0;n<x;n+=y){const s=(a+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let a=0;a<k;a+=b){const o=(r+a)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*k-1-f.get(e,s,o,t)===n*k+a?1:0;if(0===l)continue;i+=$.get(e,s,o,t)*l}}N.set(i,e,n,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Mv={kernelName:$t,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:i,includeBatchInIndex:o}=t,l=n;Sb(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Dr(s.shape,a,r,[1,1],i),[h,p]=function(e,t,n,s,a){const r=Kk(e,0,n,E(t),a,"max"),i=qk(e,t,n,a,!0,s);return[r.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function Lv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;let o;Sb(a,"sum"),o="bool"===a.dtype?Wb({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):Lb({inputs:{x:a},backend:n});const l=o.shape.length,u=y(r,o.shape),h=mo(u,l);let p=u,d=o;null!=h&&(d=Wx({inputs:{x:o},backend:n,attrs:{perm:h}}),p=yo(p.length,l)),fo("sum",p,d.shape.length);const[f,m]=ho(d.shape,p);let g=Mb(n,f,bs(d.dtype,"int32"));const b=c(m),x=n.data.get(g.dataId).values,k=n.data.get(d.dataId).values;for(let e=0;e<x.length;++e){const t=e*b;let n=0;for(let e=0;e<b;++e)n+=k[t+e];x[e]=n}if(i){const e=g;g=vk({inputs:{x:g},backend:n,attrs:{shape:po(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=h&&n.disposeIntermediateTensorInfo(d),g}const zv={kernelName:mn,backendName:"cpu",kernelFunc:Lv};const Bv={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=y(r,a.shape),l=c(ho(a.shape,o)[1]),u=[],h=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(h);const p=Wb({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});u.push(p);const d=Vw({inputs:{a:p,b:h},backend:n});u.push(d);const f=Lv({inputs:{x:d},backend:n,attrs:{axis:r,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Pv={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;Sb(a,"min");const o=y(r,a.shape);let l=o;const u=mo(l,a.shape.length);let h=a;null!=u&&(h=Wx({inputs:{x:a},backend:n,attrs:{perm:u}}),l=yo(l.length,a.shape.length)),fo("min",l,h.shape.length);const[p,d]=ho(h.shape,l),f=c(d),m=D(c(p),h.dtype),g=n.data.get(h.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];s<n&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,m);if(i){const e=vk({inputs:{x:b},backend:n,attrs:{shape:po(p,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}};const Wv={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,mode:i}=s;Sb(a,"mirrorPad");const o=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=r.map(((e,t)=>e[0]+a.shape[t])),h="reflect"===i?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,f=E(a.shape),m=c(o),g=o.length,y=E(o),b=x(a.dtype,m);for(let e=0;e<m;e++){let t=L(e,g,y);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-h:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+h);t=t.map(((e,t)=>e-l[t]));const n=M(t,d,f);b[e]=p[n]}return{dataId:n.write(b,o,a.dtype),shape:o,dtype:a.dtype}}},Vv=Db(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Uv=Ub(At,Vv),Gv={kernelName:At,backendName:"cpu",kernelFunc:Uv};function Hv(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=a.shape.length;let o=r;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=y([o],a.shape),u=Av({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=po(u.shape,l),h=vk({inputs:{x:u},backend:n,attrs:{shape:c}}),p=ak({inputs:{a:a,b:h},backend:n}),d=rx({inputs:{x:p},backend:n}),f=Lv({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=vk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Vw({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const jv={kernelName:bn,backendName:"cpu",kernelFunc:Hv};const Kv={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s;Sb(a,"multinomial");const l=o?a:Hv({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],h=l.shape[1],p=n.data.get(l.dataId).values,d=[u,r],f=D(c(d),"int32");for(let e=0;e<u;++e){const t=e*h,n=new Float32Array(h-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const s=tl.alea(i.toString()),a=e*r;for(let e=0;e<r;++e){const t=s();f[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[a+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",f)}},qv=gu;const Xv={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Sb(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=qv(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Yv=yu;const Jv={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Sb(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:p,validOutputs:d}=Yv(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},Zv=bu;const Qv={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Sb(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=Zv(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const eN={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s;Sb(a,"oneHot");const l=c(a.shape),u=new Float32Array(l*r);u.fill(o);const h=n.data.get(a.dataId).values;for(let e=0;e<l;++e)h[e]>=0&&h[e]<r&&(u[e*r+h[e]]=i);return n.makeTensorInfo([...a.shape,r],"int32",u)}};function tN(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Bb({inputs:{input:s},backend:n}),t=tN({inputs:{x:e},backend:n}),a=iw({inputs:{input:s},backend:n}),r=tN({inputs:{x:a},backend:n}),i=_b({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return qw({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const nN={kernelName:Fn,backendName:"cpu",kernelFunc:tN};const sN={kernelName:zt,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=Bb({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=iw({inputs:{input:a},backend:s}),i=tN({inputs:{x:r},backend:s}),o=_b({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return qw({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function aN(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return Bw({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,l=t[0].dtype;t.forEach((e=>{o(r,e.shape,"All tensors passed to stack must have matching shapes"),i(l===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=lw({inputs:t.map((e=>{const t=Bw({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const rN={kernelName:Pt,backendName:"cpu",kernelFunc:aN};const iN={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s;Sb(a,"pad");const o=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=n.data.get(a.dataId).values,h=c(a.shape),p=a.shape.length,d=E(a.shape),f=c(o),m=o.length,g=E(o),y=x(a.dtype,f);0!==i&&y.fill(i);for(let e=0;e<h;e++){y[M(L(e,p,d).map(((e,t)=>e+l[t])),m,g)]=u[e]}return{dataId:n.write(y,o,a.dtype),shape:o,dtype:a.dtype}}},oN=Db(((e,t)=>Math.pow(e,t))),lN=Ub(Vt,oN),uN={kernelName:Vt,backendName:"cpu",kernelFunc:lN};const cN={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:i}=n,o=Hx(s,a,i,r);return t.makeTensorInfo([o.length],r,o)}},hN=Zb(Kt,(e=>1/e)),pN={kernelName:Kt,backendName:"cpu",kernelFunc:hN};const dN={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;Sb(a,"resizeBilinear");const l=E(a.shape),[u,h]=o,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(c([p,u,h,m])),b=[r&&u>1?d-1:d,r&&h>1?f-1:f],x=[r&&u>1?u-1:u,r&&h>1?h-1:h];let k=0;const w=b[0]/x[0],v=b[1]/x[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(d-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+r*l[1];for(let e=0;e<h;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+r*l[2],d=u+r*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],r=t+(g[p+e]-t)*s,i=r+(n+(g[d+e]-n)*s-r)*a;y[k++]=i}}}return n.makeTensorInfo([p,u,h,m],"float32",y)}};const fN={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;Sb([r,a],"resizeBilinearGrad");const o=E(a.shape),[l,u,c,h]=a.shape,[,p,d]=r.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(r.dataId).values;let k=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),a=Math.min(Math.ceil(n),u-1),r=t+s*o[1],i=t+a*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,d=r+n*o[2],m=r+s*o[2],g=i+n*o[2],y=i+s*o[2],w=p*u,v=p*a,N=l*u,I=l*a;for(let e=0;e<h;e++){const t=x[k++];f[d+e]+=t*w,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*I}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const mN={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;Sb(a,"resizeNearestNeighbor");const l=E(a.shape),[u,c]=o,[h,p,d,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(h*u*c*f),y=[r&&u>1?p-1:p,r&&c>1?d-1:d],b=[r&&u>1?u-1:u,r&&c>1?c-1:c],x=y[0]/b[0],k=y[1]/b[1];let w=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,r?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const a=t+s*l[1];for(let e=0;e<c;e++){const t=i?k*(e+.5):k*e;let n=Math.min(d-1,r?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=a+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[w++]=t}}}}return n.makeTensorInfo([h,u,c,f],a.dtype,g)}};const gN={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;Sb([r,a],"resizeNearestNeighborGrad");const o=E(a.shape),l=E(r.shape),[u,c,h,p]=a.shape,[,d,f]=r.shape,m=new Float32Array(u*c*h*p),g=n.data.get(r.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],k=y[1]/b[1],w=1/x,v=1/k,N=2*Math.ceil(w)+2,I=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*w),a=Math.floor(s-N/2);for(let s=0;s<h;s++){const r=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-I/2);for(let n=0;n<p;n++){let o=0;for(let r=0;r<N;r++){const u=r+a;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+y;if(t<0||t>=f)continue;const a=p+t*l[2],r=t*k;s===Math.min(h-1,i?Math.round(r):Math.floor(r))&&(o+=g[a+n])}}m[r+n]=o}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}};const yN={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s;Sb(a,"reverse");const i=a.shape.length,o=y(r,a.shape);if(0===i)return Lb({inputs:{x:a},backend:n});const l=new is(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},bN={kernelName:On,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=x(s.dtype,c(s.shape)),[u,h,p,d]=s.shape,[f,m]=Ju(i,h,p),g=Math.sin(a),y=Math.cos(a),b=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*p*h*d;for(let e=0;e<h;e++){const n=e*(p*d);for(let s=0;s<p;s++){const a=s*d;for(let i=0;i<d;i++){const o=[u,e,s,i],c=o[2],x=o[1];let k=(c-f)*y-(x-m)*g,w=(c-f)*g+(x-m)*y;k=Math.round(k+f),w=Math.round(w+m);let v=r;if("number"!=typeof r&&(v=3===i?255:r[i]),k>=0&&k<p&&w>=0&&w<h){v=b[t+w*(p*d)+k*d+i]}l[t+n+a+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},xN=Zb(nn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),kN={kernelName:nn,backendName:"cpu",kernelFunc:xN};function wN(e,t,n,s,a,r,i,o,l,u){const c=[s/a,a],h=e.values,p=t.values;if(0===s)return va(n,t.dtype);const d=va(c,t.dtype);d.values.fill(l);for(let e=0;e<r;e++){const r=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];r.push(n),l+=n*o[t]}if(l<0||l>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)u?d.values[l*a+n]+=p[e*a+n]:d.values[l*a+n]=0===t.rank?p[0]:p[e*a+n]}return d}const vN={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Wa(0,a,i),p=wN(n.bufferSync(a),n.bufferSync(r),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const NN={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t;Sb([s,a,r],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,h=bs(a.dtype,r.dtype),p=D(c(a.shape),h);let d=0;const f=0===i||i>1||1===a.shape.length?1:c(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?p[d++]=l[e]:p[d++]=u[e];return n.makeTensorInfo(a.shape,h,p)}},IN=Zb(on,(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1))),$N={kernelName:on,backendName:"cpu",kernelFunc:IN},CN=Zb(pn,(e=>1/(1+Math.exp(-e)))),TN={kernelName:pn,backendName:"cpu",kernelFunc:CN},SN=Zb(hn,(e=>e<0?-1:e>0?1:0)),EN={kernelName:hn,backendName:"cpu",kernelFunc:SN},AN=Zb(un,(e=>Math.sin(e))),RN={kernelName:un,backendName:"cpu",kernelFunc:AN},FN=Zb(cn,(e=>Math.sinh(e))),DN={kernelName:cn,backendName:"cpu",kernelFunc:FN},_N=Math.log(1.1920928955078125e-7)+2,ON=Zb(dn,(e=>{const t=e>-_N,n=e<_N,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a})),MN={kernelName:dn,backendName:"cpu",kernelFunc:ON};const LN={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:i}=s;Sb([a],"spaceToBatchND");const o=c(r),l=[[0,0]];l.push(...i);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=iN.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=Zu(u.shape,r,o,!1),p=Qu(h.length,r.length,!1),d=ec(u.shape,r,o,!1),f=vk({inputs:{x:u},backend:n,attrs:{shape:h}}),m=Wx({inputs:{x:f},backend:n,attrs:{perm:p}}),g=vk({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const zN={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Wa(0,a,o),d=wN(n.bufferSync(a),n.bufferSync(r),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const BN={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=y(i,a.shape)[0],l=kc(a,r,o),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=Yx({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},PN=Zb(fn,(e=>Math.sqrt(e))),WN={kernelName:fn,backendName:"cpu",kernelFunc:PN},VN={kernelName:kn,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Sb(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},UN=Zb(Dn,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),GN={kernelName:Dn,backendName:"cpu",kernelFunc:UN};const HN={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;Sb(a,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=sr(a.shape,r,i,o,l,u,c,h,p),x=vk({inputs:{x:a},backend:n,attrs:{shape:y}});let k;if(d){const e=Yx({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});k=vk({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))k=n.makeTensorInfo(b,a.dtype,[]);else{const e=tk(b,n.bufferSync(x),m,f);k=n.makeTensorInfo(e.shape,e.dtype,e.values)}const w=vk({inputs:{x:k},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(k),w}},jN=Zb(In,(e=>Math.tan(e))),KN={kernelName:In,backendName:"cpu",kernelFunc:jN},qN=Zb($n,(e=>Math.tanh(e)));const XN=[Ck,Fb,Sk,Ak,qb,Rk,Fk,Dk,_k,Ok,Lk,Bk,Wk,Gk,jk,Yk,Jk,Zk,Qk,$k,ew,tw,nw,Vb,nx,aw,Ob,rw,uw,pw,dw,hw,mw,gw,fw,bw,kw,ww,vw,Nw,Iw,Cw,Tw,Sw,Ew,Aw,Fw,Rw,Uw,hk,Dw,Mw,zw,ix,Pw,ux,Kw,Xw,Yw,px,Qw,ev,tv,nv,sv,gx,iv,zb,ov,ow,uv,hv,dv,dk,xx,gv,yv,Nx,xv,vv,Iv,Tv,Sv,Ev,Tx,Fv,Dv,_v,Ov,Mv,Rv,Bv,Pv,Ax,Wv,Gv,Kv,_x,Mx,Xv,Jv,Qv,Bx,eN,sN,rN,iN,uN,gk,Gx,cN,Pb,pN,bk,kk,Nk,dN,fN,mN,gN,yN,bN,kN,qx,vN,NN,$N,TN,EN,RN,DN,Jx,jv,MN,LN,zN,BN,WN,VN,ek,GN,HN,rk,zv,KN,{kernelName:$n,backendName:"cpu",kernelFunc:qN},{kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;Sb(a,"tile");const i=ik(n.bufferSync(a),r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s;Sb(a,"topk");const o=n.data.get(a.dataId).values,[l,u]=ok(o,a.shape,a.dtype,r);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Vx,{kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;Sb(r,"unique");const i=s.data.get(r.dataId).values,{outputValues:o,outputShape:l,indices:u}=lk(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a.shape.length,o=a.shape[r],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(i).fill(0),h=a.shape.slice();h[r]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[r]=e;const t=Yx({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});p[e]=vk({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s;Sb(a,"unsortedSegmentSum");const o=[],l=[],u=a.shape.length-r.shape.length;let c=r;for(let e=0;e<u;++e){const t=Bw({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=Kn(e,"int32"),s=n.makeTensorInfo([],"int32",t),r=Ow({inputs:{a:s,b:c},backend:n}),i=Wb({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),u=Dx({inputs:{a:i,b:a},backend:n}),h=Lv({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(r),l.push(i),l.push(u),l.push(h)}const h=aN({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},nN];for(const e of XN)Gn(e);const YN={},JN={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function ZN(e){if(!(e in YN)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete YN[e]}),!1),1===e)return t.getContext("webgl",JN)||t.getContext("experimental-webgl",JN);return t.getContext("webgl2",JN)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;YN[e]=t}const t=YN[e];return t.isContextLost()?(delete YN[e],ZN(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),YN[e])}var QN,eI,tI;function nI(e,t){return[t,e]}function sI(e){const t=c(e);return d(Math.ceil(t/4))}function aI(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function rI(e,t){const n=e;let s,a,r,i,o,l,u,c,h,p;return 2===W().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,r=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,a=e.RGBA,r=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function iI(e,t){const n=t();return W().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(QN||(QN={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(eI||(eI={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(tI||(tI={}));function oI(e){return!!(W().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function lI(e,t){return yI(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function uI(e,t){const n=yI(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(iI(e,(()=>e.shaderSource(n,t))),iI(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=cI.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),r=a.length.toString().length+2,i=a.map(((e,t)=>f((t+1).toString(),r)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${f(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const cI=/ERROR: [0-9]+:([0-9]+):/g;function hI(e,t){if(iI(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function pI(e,t,n,s,a,r,i){const o=e.getAttribLocation(t,n);return-1!==o&&(iI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),iI(e,(()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,r,i))),iI(e,(()=>e.enableVertexAttribArray(o))),!0)}function dI(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),iI(e,(()=>e.activeTexture(e.TEXTURE0+n))),iI(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function fI(e,t,n){iI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),iI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function mI(e,t){iI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),iI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function gI(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function yI(e,t,n){const s=iI(e,(()=>t()));if(null==s)throw new Error(n);return s}function bI(e,t=2){return c(e.slice(0,e.length-t))}function xI(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function kI(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[bI(e),...xI(e)]),t}function wI(e){return e%2==0}function vI(e,t){if(h(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(wI(n)&&wI(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&wI(e[0])&&wI(t[0])}let NI,II;function $I(e,t){return null!=e.getExtension(t)}function CI(e){try{if(null!=ZN(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function TI(e){if(0===e)return!1;const t=ZN(e);if(1!==e){if($I(t,"EXT_color_buffer_float"))return SI(t);const e="EXT_color_buffer_half_float";if($I(t,e)){const n=t.getExtension(e);return function(e,t){const n=rI(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const a=1,r=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,r,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!$I(t,"OES_texture_float"))return!1;if(!$I(t,"WEBGL_color_buffer_float"))return!1;return SI(t)}function SI(e){const t=rI(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function EI(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const AI=W();function RI(){let e,t,n,s,a,r,i,o,l,u;return 2===W().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",r="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",r="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:r,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function FI(e,t,n="index"){const s=E(t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function DI(e){const t=E(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}AI.registerFlag("HAS_WEBGL",(()=>AI.getNumber("WEBGL_VERSION")>0)),AI.registerFlag("WEBGL_VERSION",(()=>CI(2)?2:CI(1)?1:0)),AI.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),AI.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===AI.get("WEBGL_VERSION"))),AI.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),AI.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),AI.registerFlag("WEBGL_PACK",(()=>AI.getBool("HAS_WEBGL"))),AI.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_CLIP",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),AI.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_PACK_REDUCE",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_LAZILY_UNPACK",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_CONV_IM2COL",(()=>AI.getBool("WEBGL_PACK"))),AI.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==NI){const t=ZN(e);NI=t.getParameter(t.MAX_TEXTURE_SIZE)}return NI}(AI.getNumber("WEBGL_VERSION")))),AI.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==II){const t=ZN(e);II=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,II)}(AI.getNumber("WEBGL_VERSION")))),AI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=AI.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=ZN(e);return t=$I(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:$I(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),AI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>AI.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Es())),AI.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=ZN(e);if(1===e){if(!$I(t,"OES_texture_float"))return!1}else if(!$I(t,"EXT_color_buffer_float"))return!1;return SI(t)}(AI.getNumber("WEBGL_VERSION")))),AI.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!AI.getBool("WEBGL_FORCE_F16_TEXTURES")&&AI.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),AI.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>TI(AI.getNumber("WEBGL_VERSION")))),AI.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=AI.getNumber("WEBGL_VERSION"))&&null!=ZN(e).fenceSync;var e})),AI.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>AI.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),AI.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const _I="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class OI{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=QN.DENSE;const t=sI(e),n=RI();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${FI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class MI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=QN.DENSE;const t=sI(e),n=RI();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${FI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class LI{constructor(e){this.variableNames=["A"],this.outTexUsage=eI.DOWNLOAD;const t=RI();this.outputShape=e,this.userCode=`\n      ${_I}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class zI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=eI.DOWNLOAD;const t=RI();this.outputShape=e,this.userCode=`\n      ${_I}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class BI{constructor(e,t,n=!1){this.variableNames=["A"];const s=RI(),[a,r]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${DI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${r};\n        int c = imod(flatIndex, ${r});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${r}.0, ${a}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class PI{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=RI(),[a,r]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${r};\n              c = imod(flatIndex, ${r});\n              uv = (vec2(c, r) + halfCR) / vec2(${r}.0, ${a}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${DI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function WI(e){const t=RI();return function(e,t){const n=yI(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(iI(e,(()=>e.shaderSource(n,t))),iI(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function VI(e){return function(e,t){const n=yI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return iI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),iI(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function UI(e){return function(e,t){const n=yI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return iI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),iI(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function GI(e,t,n,s,a,r){!function(e,t){const n=W().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return yI(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return iI(e,(()=>e.bindTexture(o,i))),iI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),iI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),iI(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),iI(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),iI(e,(()=>e.texImage2D(o,0,s,t,n,0,a,r,null))),iI(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function HI(e){return e.internalFormatFloat}function jI(e){return e.internalFormatHalfFloat}function KI(e){return e.downloadTextureFormat}function qI(e){return e.internalFormatPackedFloat}function XI(e){return e.internalFormatPackedHalfFloat}function YI(e,t,n,s,a,r,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=aI(e,t);return n*s*4}(r,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class JI{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=W().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){YN[e]=t}(t,e)):this.gl=ZN(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===W().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=lI(this.gl,e),$I(this.gl,t))this.textureHalfFloatExtension=lI(this.gl,t);else if(W().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),$I(this.gl,s))this.colorBufferHalfFloatExtension=lI(this.gl,s);else if(W().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",$I(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!$I(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=VI(this.gl),this.indexBuffer=UI(this.gl),this.framebuffer=function(e){return yI(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=rI(this.gl,this.textureHalfFloatExtension)}get debug(){return W().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;iI(e,(()=>e.finish())),iI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),iI(e,(()=>e.deleteFramebuffer(this.framebuffer))),iI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),iI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),iI(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=nI(t,n);return GI(e,a,r,HI(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=nI(t,n);return GI(e,a,r,jI(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=nI(t,n);return GI(e,a,r,KI(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){iI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?iI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):iI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),iI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,r){let i,o,l;iI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=r.internalFormatPackedFloat),i.set(a),iI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),iI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=aI(t,n);return GI(e,a,r,XI(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=aI(t,n);return GI(e,a,r,qI(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(mI(this.gl,this.framebuffer),this.outputTexture=null),iI(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[a,r]=nI(t,n),i=new Uint8Array(t*n*4);return iI(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return YI(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const a=e.createBuffer();iI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return iI(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),iI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),iI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(W().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return iI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=uI(t,e),s=WI(t),a=function(e){return yI(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return iI(t,(()=>t.attachShader(a,s))),iI(t,(()=>t.attachShader(a,n))),function(e,t){if(iI(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&hI(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(e,t,n){return iI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),pI(e,t,"clipSpacePos",n,3,20,0)&&pI(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&iI(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&hI(this.gl,this.program),iI(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return yI(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),iI(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){iI(e,(()=>dI(e,t,s))),iI(e,(()=>e.uniform1i(n,s)))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=aI(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&hI(this.gl,this.program),gI(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),iI(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),iI(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=lI(this.gl,2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await m((()=>this.disposed||this.isQueryAvailable(e,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||m((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),fI(this.gl,e,this.framebuffer),this.debug&&gI(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(fI(this.gl,this.outputTexture,this.framebuffer),this.debug&&gI(this.gl)):mI(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;fI(s,e,this.framebuffer),this.debug&&gI(s),this.outputTexture=e,iI(s,(()=>s.viewport(0,0,t,n))),iI(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),iI(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:ZI}=Ec;function QI(e,t,n,s){const a=[];e.forEach((e=>{const t=c(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))}));const r=a.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?t$(e):e$(e);const a=e.shapeInfo.logicalShape,r=t.logicalShape;a.length<=r.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=ZI(e.shapeInfo.logicalShape,t.logicalShape),l=u$(i),u=i-r;let h;const p=["x","y","z","w","u","v"];h=0===r?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let d="";d=i<2&&r>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let f="return outputValue;";const m=1===c(e.shapeInfo.logicalShape),g=1===c(t.logicalShape);if(1!==r||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=r-2,t=r-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&h(i,r))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=u$(l),c=ZI(e.shapeInfo.logicalShape,t.logicalShape),p=l-o;let d;const f=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";m=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", ");return`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${m});\n    }\n  `}(e,t));return s}(e,t,s))).join("\n"),o=t.texShape,l=RI(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let p,d,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${n$}\n    ${s$}\n    ${a$}\n  `}(l);t.isPacked?(p=function(e,t){switch(e.length){case 0:return i$();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(h(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let r=a,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)r*=e[e.length-t-1],i=`\n      int b${t} = index / ${r};\n      index -= b${t} * ${r};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),d=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(p=function(e,t){switch(e.length){case 0:return i$();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(h(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=FI(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=FI(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=FI(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=FI(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o),d=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(f+=r$);return[f,u,d,r,p,i,n].join("\n")}function e$(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[r,i]=e.shapeInfo.texShape,o=o$(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${r}, ${i}, ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${l$(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],r=s[1];if(1===r&&1===a)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=o$(t);if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${r}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${r}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&h(t,a)){const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:r,keptDims:i}=b(t),o=r;if(o.length<t.length){const t=["row","col"];return`\n      ${e$(c$(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${h$(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${l$(e)}\n      }\n    `;const l=a[0],u=a[1],c=o$(n);if(1===u)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],r=t[2],{newShape:i,keptDims:o}=b(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${e$(c$(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${h$(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${r}, 1)));\n        ${l$(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===a&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${r}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===r&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=o$(n);return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${r} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],r=t[2]*a,i=t[1]*r,{newShape:o,keptDims:l}=b(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${e$(c$(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${h$(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${r}, ${a}, 1)));\n        ${l$(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===a&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=o$(n);return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${r} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],r=t[3]*a,i=t[2]*r,o=t[1]*i,{newShape:l,keptDims:u}=b(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${e$(c$(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${h$(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${r}, ${a})) +\n          depth3;\n        ${l$(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=o$(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${r} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:r}=b(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${e$(c$(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${h$(t,r)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${l$(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=o$(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function t$(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=RI();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],r=RI();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${r.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=a[0],i=a[1],o=RI();if(null!=a&&h(t,a))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${r}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=Math.ceil(t[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===t[0]){const n=[1,2],a=["b","row","col"];return`\n        ${t$(c$(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${h$(a,n)});\n        }\n      `}const i=r[0],o=r[1],l=Math.ceil(t[2]/2),u=l*Math.ceil(t[1]/2),c=RI();return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;const d=RI();return`\n    vec4 ${a}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${s}, uv);\n    }\n  `}(e)}}const n$="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",s$="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",a$="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",r$="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function i$(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function o$(e){return`offset${e}`}function l$(e){const t=e.name,n=c(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function u$(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function c$(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function h$(e,t){return t.map((t=>e[t])).join(", ")}function p$(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],r=a.shape;if(!h(s,r))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${r} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!h(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:d$,bincountImpl:f$,bincountReduceImpl:m$,ceilImpl:g$,concatImpl:y$,expImpl:b$,expm1Impl:x$,floorImpl:k$,gatherV2Impl:w$,greaterImpl:v$,lessImpl:N$,linSpaceImpl:I$,logImpl:$$,maxImpl:C$,maximumImpl:T$,minimumImpl:S$,multiplyImpl:E$,negImpl:A$,prodImpl:R$,rangeImpl:F$,rsqrtImpl:D$,simpleAbsImpl:_$,sliceImpl:O$,stridedSliceImpl:M$,subImpl:L$,tileImpl:z$,topKImpl:B$,transposeImpl:P$,uniqueImpl:W$}=uk;function V$(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function U$(e,t){return 1===t?[e]:V$(e,t)}class G${constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=U$("rc",t),s=u$(t),a=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let a=e-2;a<e;a++)s+=`${n[a]} >= ${t[a]}`,a<e-1&&(s+="||");return s}(t,e,n),r=function(e,t,n,s){if(1===e)return"";const a=s.slice(-2);return`\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let a=0;a<=1;a++){let r=`${0===s?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<e;n++)r=`${t[t.length-1-n]},`+r;n.push(r)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class H${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${FI(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${DI(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class j${constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=q$(t,n),a=X$(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=K$(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let i;return s===tI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===tI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===tI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===tI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===tI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=q$(n,s),r=X$(t,a,s);r in this.freeTextures||(this.freeTextures[r]=[]);const i=K$(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=W().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[r].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[r],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function K$(e,t,n,s,a){const r=function(e,t){switch(e){case tI.PACKED_2X2_FLOAT32:return qI(t);case tI.PACKED_2X2_FLOAT16:return XI(t);case tI.UNPACKED_FLOAT32:return HI(t);case tI.UNPACKED_FLOAT16:return jI(t);case tI.PACKED_4X1_UNSIGNED_BYTE:return KI(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(a){const[t,n]=aI(e[0],e[1]);i=t*n}else{const[t,n]=nI(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,r)}function q$(e,t){if(e===eI.UPLOAD)return tI.PACKED_2X2_FLOAT32;if(e===eI.RENDER||null==e)return function(e){return W().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?tI.PACKED_2X2_FLOAT32:tI.UNPACKED_FLOAT32:e?tI.PACKED_2X2_FLOAT16:tI.UNPACKED_FLOAT16}(t);if(e===eI.DOWNLOAD||e===eI.PIXELS)return tI.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function X$(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Y${constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const J$="return abs(x);",Z$="return x;";class Q${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class eC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=U$("rc",t),s=u$(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),i=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const tC=Hl,nC={};class sC extends t{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!W().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const e=ZN(W().getNumber("WEBGL_VERSION"));this.binaryCache=((n=W().getNumber("WEBGL_VERSION"))in nC||(nC[n]={}),nC[n]),this.gpgpu=new JI(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new j$(this.gpgpu),this.numMBBeforeWarning=null==W().global.screen?1024:W().global.screen.height*W().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new e(this,lr())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((W().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||W().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:eI.UPLOAD,refCount:1,complexParentRefCount:0}),s}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}decComplexRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.complexParentRefCount>0&&t.refCount--}}move(e,t,n,s){if(W().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:eI.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:r,shape:i,isPacked:o}=t;if(null!=r){let t;t=o?new Q$(i,Z$):new Y$(i,Z$);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Xn()),"complex64"===s){c=pc(this.readSync(a.real.dataId),this.readSync(a.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Xn()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:r,complexTensorInfos:i,isPacked:o}=t;if(null!=a){let t;t=o?new Q$(s,Z$):new Y$(s,Z$);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(!W().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===W().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,h=null;if("complex64"!==r&&W().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...sI(s))}if(this.pendingRead.set(e,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=pc(e[0],e[1])}else if(null==h)u=this.getValuesFromTexture(e);else{const e=c(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const p=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),p}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Jn(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return va(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!oI(n)){if(W().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=c(t);if(W().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...sI(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const r=W().getBool("WEBGL_PACK")&&!0===s,i=r?kI(t):t,o=r?new zI(i):new LI(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=u(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),r=u(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:r[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Xn(),endMs:null}}endTimer(e){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Xn(),e)}async getQueryTime(e){if(W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return W().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=lr().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return W().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&c(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){hc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return tC(e.shape,t)}packedUnaryOp(e,t,n){const s=new Q$(e.shape,t);return this.compileAndRun(s,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=_$(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(W().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,J$,e.dtype);const t=new Y$(e.shape,J$);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&I(n[0])){const a=n.map((e=>Yn(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return lr().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new eC(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new G$(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[bI(e.shape),...xI(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[bI(t),...xI(t)],r=new H$(a,n),i=this.runWebGLProgram(r,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:a}=t,r=kI(s);let i;i=n?new MI(r):new OI(r);return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:r,dtype:a,dataId:e}],a,null,!0).dataId}}runWebGLProgram(e,t,n,s,a=!1){const r=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(r.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===QN.DENSE){const t=sI(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===c(r.shape))return i.values=x(r.dtype,0),r;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&c(t.shape)<=W().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!vI(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(r.dataId);const u={shape:r.shape,texData:i,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a,r}(e,l,u),p=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const a=t.userCode,r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=r.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=QI(r,o,a,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===W().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],a=!1;p[s]=e.getUniformLocation(u,s,a),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,a)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(e,t,n,s,a){p$(t.inShapeInfos,n),p$([t.outShapeInfo],[s]);const r=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(r,i[0],i[1]):e.setOutputMatrixTexture(r,i[0],i[1]),e.setProgram(t.webGLProgram),1===W().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const a=t.program.variableNames[s],r=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`];if(null!=r)if(n.isUniform)if(c(n.shape)<2)e.gl.uniform1f(r,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,r,s)})),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!W().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(r);return this.disposeIntermediateTensorInfo(r),e}return r}compileAndRun(e,t,n,s,a=!1){n=n||t[0].dtype;const r=this.runWebGLProgram(e,t,n,s,a);return lr().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!W().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=cr((()=>{if(!W().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=W().getBool("DEBUG");W().set("DEBUG",!1);const t=this.abs(fl(1e-8)).dataSync()[0];if(W().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let h;u&&(h=Xn());let p=t.texShape;if(null==p&&(p=function(e,t=!1){let n=W().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?r(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=b(e);e=t.newShape}let s=c(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=bI(e);let n=2,a=2;return e.length&&([n,a]=xI(e)),s=t*(n/2)*(a/2),d(s).map((e=>2*e))}return d(s)}(n,l),t.texShape=p),null!=a){const e=kI(n);let r,i=p[1],o=p[0];const c=a instanceof Uint8Array;l?([i,o]=aI(p[0],p[1]),r=new PI(e,[o,i],c)):r=new BI(e,[o,i],c);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=c?eI.PIXELS:eI.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,a);const f=!0,m=this.runWebGLProgram(r,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=Xn()-h)}else{const e=this.acquireTexture(p,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*N(t)}}As()&&fr("webgl",(()=>new sC),2);class aC{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ci(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class rC{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ci(t,n);const a=this.outputShape.length;let r="";if(s)if(0===a||1===c(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(r=`\n          ${u$(a)} coords = getOutputCoords();\n        `,1===a)r+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=U$("coords",a);r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${r}\n\n        setOutput(result);\n      }\n    `}}function iC(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const oC={kernelName:nt,backendName:"webgl",kernelFunc:iC};function lC(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(r.dataId),o=iC({inputs:{x:s},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=iC({inputs:{x:a},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},r}const uC={kernelName:ge,backendName:"webgl",kernelFunc:lC},cC="return (a < 0.) ? b * a : a;",hC="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const pC={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s,i=n.makeTensorInfo([],"float32",Kn(r,"float32")),o=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rC(hC,a.shape,i.shape):new aC(cC,a.shape,i.shape),l=n.runWebGLProgram(o,[a,i],a.dtype);return n.disposeIntermediateTensorInfo(i),l}},dC="return (a < 0.) ? b * a : a;",fC="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const mC={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,r=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rC(fC,s.shape,a.shape):new aC(dC,s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}};function gC({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:r})=>{const{x:i}=a,o=r,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Q$(i.shape,t):new Y$(i.shape,e),o.runWebGLProgram(u,[i],l)}}function yC({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:r}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new aC(e,l.shape,u.shape);return c.runWebGLProgram(i,[a,r],bs(n.dtype,s.dtype))})),r=lC({inputs:{real:s,imag:a},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(a),r}const h=r||bs(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=a){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=a(l.shape,u.shape,e.values,t.values,h),r=c.makeTensorInfo(s,h);return c.texData.get(r.dataId).values=n,r}let p;return p=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new rC(t,l.shape,u.shape,n):new aC(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function bC(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?fC:dC;if("leakyrelu"===e)return t?hC:cC;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class xC{constructor(e,t,n,s=!1,a=!1,r=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const kC="return areal * breal - aimag * bimag;",wC="return areal * bimag + aimag * breal;";class vC{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ci(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const NC="return a * b;";function IC(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=bs(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new vC(kC,s.shape,a.shape),i=new vC(wC,s.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=lC({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[i,o]=E$(s.shape,a.shape,e.values,t.values,r),l=n.makeTensorInfo(o,r);return n.texData.get(l.dataId).values=i,l}let i;return i=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rC(NC,s.shape,a.shape):new aC(NC,s.shape,a.shape),n.runWebGLProgram(i,[s,a],r)}const $C={kernelName:Ft,backendName:"webgl",kernelFunc:IC};function CC(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=n,l=c(a.shape),u=g(r,l),h=c(u);i(l===h,(()=>`The new shape (${u}) has ${h} elements and the old shape (${a.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`));const p=o.texData.get(a.dataId);return!p.isPacked||vI(a.shape,u)||null!==p.texture&&vI(p.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const s=[bI(e.shape),...xI(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[bI(t),...xI(t)],i=new H$(r,s),o=n.runWebGLProgram(i,[a],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,u,o)}const TC={kernelName:Xt,backendName:"webgl",kernelFunc:CC};class SC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${p(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class EC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function AC(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Yu(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let r=e;for(let i=0;i<a.length;i++){const{inSize:o,windowSize:l,outSize:u}=a[i];let c,h;c="mean"===n?0===i?new SC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new SC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new EC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=r,r=s.runWebGLProgram(c,[r],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return r}class RC{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=u$(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class FC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=u$(this.rank),a=V$("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const i=`vec2(${r.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function DC(e,t,n){const s=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FC(e.shape,t):new RC(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function _C(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;return function(e,t,n,s){const a=t,r=e.shape.length,i=y(a,e.shape);let o=i;const l=mo(o,r),u=null!=l;let h=e;u&&(h=DC(e,l,s),o=yo(o.length,r)),fo("sum",o,r);const[p,d]=ho(h.shape,o);let f=p;n&&(f=po(p,i));const m=c(d),g=CC({inputs:{x:h},attrs:{shape:[c(e.shape)/m,m]},backend:s}),b=AC(g,xs(e.dtype),"sum",s),x=CC({inputs:{x:b},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(h),x}(a,r,i,n)}const OC={kernelName:mn,backendName:"webgl",kernelFunc:_C};function MC(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,i=n,o=a.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(i.shouldExecuteOnCPU([a])){const e=i.texData.get(a.dataId).values,t=P$(e,a.shape,a.dtype,r,l);u=i.makeTensorInfo(l,a.dtype);i.texData.get(u.dataId).values=t}else u=DC(a,r,i);return u}const LC={kernelName:Sn,backendName:"webgl",kernelFunc:MC};function zC({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}){const h=e.shape.length,p=t.shape.length,d=n?e.shape[h-2]:e.shape[h-1],f=s?t.shape[p-1]:t.shape[p-2],m=n?e.shape[h-1]:e.shape[h-2],g=s?t.shape[p-2]:t.shape[p-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=c(y),k=c(b);i(h>=2&&p>=2&&(x===k||1===x||1===k),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${b}).`));const w=(x>k?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);i(d===f,(()=>`Error in matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,d,m]:[x,m,d],N=s?[k,g,f]:[k,f,g],I=CC({inputs:{x:e},backend:a,attrs:{shape:v}}),$=CC({inputs:{x:t},backend:a,attrs:{shape:N}}),C=[I,$],T=Math.max(x,k),S=n?I.shape[1]:I.shape[2],E=null!=r,A=null!=o,R="leakyrelu"===u,F=null!=u?bC(u,!0):null;let D;if((1===m||1===g)&&S>1e3&&!1===(E||A||R||null!=F)){let e=I,t=$;n&&(e=MC({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),C.push(e)),s&&(t=MC({inputs:{x:$},backend:a,attrs:{perm:[0,2,1]}}),C.push(t));const r=1===g;let i=e;1!==g&&(i=CC({inputs:{x:e},backend:a,attrs:{shape:[T,S,1]}}),C.push(i));const o=1===g?2:1;let l=t;r&&(l=CC({inputs:{x:t},backend:a,attrs:{shape:[T,1,S]}}),C.push(l));const u=IC({inputs:{a:i,b:l},backend:a});D=_C({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),C.push(u)}else{const i=bs(e.dtype,t.dtype),u=new xC(v,N,[T,m,g],n,s,E,F,A,R),c=[I,$];if(null!=r&&c.push(r),A&&c.push(o),R){const e=a.makeTensorInfo([],"float32",Kn(l,"float32"));c.push(e),C.push(e)}D=a.runWebGLProgram(u,c,i)}const _=CC({inputs:{x:D},backend:a,attrs:{shape:w}});C.push(D);for(const e of C)a.disposeIntermediateTensorInfo(e);return _}const BC={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return zC({a:a,b:r,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},PC="return abs(x);";const WC={kernelName:j,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=_$(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Q$(s.shape,PC):new Y$(s.shape,PC),n.runWebGLProgram(a,[s],s.dtype)}},VC=gC({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),UC={kernelName:K,backendName:"webgl",kernelFunc:VC},GC=gC({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),HC={kernelName:q,backendName:"webgl",kernelFunc:GC},jC="return a + b;",KC=yC({opSnippet:jC,packedOpSnippet:jC,supportsComplex:!0,cpuKernelImpl:d$}),qC={kernelName:X,backendName:"webgl",kernelFunc:KC};class XC{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class YC{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const JC={kernelName:Y,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return iC({inputs:{x:a[0]},backend:s});if(a.length>W().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const r=a.map((e=>e.dtype)).reduce(((e,t)=>bs(e,t))),i=a.map((e=>e.shape)),o=W().getBool("WEBGL_PACK")?new YC(a[0].shape,i):new XC(a[0].shape,i);return s.runWebGLProgram(o,a,r)}};const ZC={kernelName:J,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=y(r,a.shape);let u=l;const h=mo(u,o);let p=a;null!=h&&(p=MC({inputs:{x:a},backend:n,attrs:{perm:h}}),u=yo(u.length,o)),fo("all",u,o);const[d,f]=ho(p.shape,u),m=CC({inputs:{x:p},backend:n,attrs:{shape:[-1,c(f)]}}),g=AC(m,m.dtype,"all",n);let b;if(i){b=CC({inputs:{x:g},backend:n,attrs:{shape:po(d,l)}})}else b=CC({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),b}};const QC={kernelName:Z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=y(r,a.shape);let u=l;const h=mo(u,o);let p=a;null!=h&&(p=MC({inputs:{x:a},backend:n,attrs:{perm:h}}),u=yo(u.length,o)),fo("any",u,o);const[d,f]=ho(p.shape,u),m=CC({inputs:{x:p},backend:n,attrs:{shape:[-1,c(f)]}}),g=AC(m,m.dtype,"any",n);let b;if(i){b=CC({inputs:{x:g},backend:n,attrs:{shape:po(d,l)}})}else b=CC({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),b}};class eT{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class tT{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,i(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],r=Math.ceil(a/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,l=o.length,u=u$(l),c=U$("coords",l);let h,p;if(1===r){p=l+1;const e=u$(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[l-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[l-2]};`}else p=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=U$("sourceLocR",p-1).concat("inIdx.r"),y=U$("sourceLocG",p-1).concat("inIdx.g"),b=U$("sourceLocB",p-1).concat("inIdx.b"),x=U$("sourceLocA",p-1).concat("inIdx.a"),k="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,v=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${o[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${o[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${k}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function nT(e,t,n,s=null){let a=t.shape[0],r=t.shape[1];null!=s&&(a=s.shape[0],r=s.shape[1]);const i=Yu(r),o={windowSize:i,inSize:r,batchSize:a,outSize:Math.ceil(r/i)},l=new eT(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=nT(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function sT(e,t,n,s=null){const a=null!=s?s.shape:t.shape,r=Yu(a[a.length-1]),i=new tT(a,r,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=sT(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function aT(e,t,n,s){const a=[n];if(fo("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!W().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[r,i]=ho(t.shape,a),o=c(i),l=CC({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=nT(e,l,s);n.push(u);const h=CC({inputs:{x:u},backend:e,attrs:{shape:r}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return sT(e,t,s)}const rT={kernelName:Q,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=y(r,a.shape);const o=mo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=MC({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=yo(i.length,l.shape.length)),fo("argMax",[i[0]],l.shape.length);const c=aT(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const iT={kernelName:ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=y(r,a.shape);const o=mo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=MC({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=yo(i.length,l.shape.length)),fo("argMin",[i[0]],l.shape.length);const c=aT(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},oT=gC({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),lT={kernelName:te,backendName:"webgl",kernelFunc:oT},uT=gC({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),cT={kernelName:ne,backendName:"webgl",kernelFunc:uT},hT=gC({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),pT={kernelName:se,backendName:"webgl",kernelFunc:hT},dT=yC({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),fT={kernelName:re,backendName:"webgl",kernelFunc:dT},mT=gC({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),gT={kernelName:ae,backendName:"webgl",kernelFunc:mT};class yT{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(r/4),k=r%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class bT{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let k=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(k="avgValue / count");const w=4*Math.floor(r/4),v=r%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${k});\n        }\n      }\n    `}}const xT={kernelName:ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;EI(a,"avgPool");const{filterSize:r,strides:o,pad:l,dimRoundingMode:u}=s;i(Ur(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Dr(a.shape,r,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&h(c.inShape,c.outShape))return iC({inputs:{x:a},backend:n});const p=new yT(c,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};const kT={kernelName:le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=_r(a.shape,r,i,[1,1,1],o,l,u),h=new bT(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};class wT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const NT={kernelName:ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=_r(i.shape,o,l,[1,1,1],u,c),p=new vT(h);return n.runWebGLProgram(p,[a],i.dtype)}};const IT={kernelName:oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;EI([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Dr(i.shape,o,l,1,u),h=new wT(c);return n.runWebGLProgram(h,[a],i.dtype)}};const $T={kernelName:ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:i,transposeB:o}=s;return zC({a:a,b:r,transposeA:i,transposeB:o,backend:n})}};class CT{constructor(e,t,n,s,a,r){this.outputShape=[],this.variableNames=["x","mean","variance"],Ci(e,t),Ci(e,n);let i="0.0";null!=s&&(Ci(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=a&&(Ci(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${r}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class TT{constructor(e,t,n,s,a,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ci(e,t),Ci(e,n);let i="vec4(0.0)";null!=s&&(Ci(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(Ci(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${r}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ST={kernelName:Je,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:r,offset:o,scale:l}=e;i(a.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==l||a.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,a,r];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=W().getBool("WEBGL_PACK_NORMALIZATION")?new TT(s.shape,a.shape,r.shape,h,p,u):new CT(s.shape,a.shape,r.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class ET{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=u$(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return AT.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${AT[t]} = start[${t}] + coords.${AT[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${a}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const AT=["x","y","z","w","u","v"];class RT{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=u$(this.rank),n=U$("coords",this.rank),s=U$("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,i=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function FT(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:i}=s,[o,l]=nr(a,r,i);if(Va(a,o,l),0===c(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=O$(e.values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),h=er(a.shape,o,l);if(u||!h){const e=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new RT(l):new ET(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),r=s.makeTensorInfo(n,e.dtype),i=s.texData.get(r.dataId);Object.assign(i,a),i.complexParentRefCount=0,i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=tr(t,E(e.shape));a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),r}(a,o,l,n)}const DT={kernelName:ln,backendName:"webgl",kernelFunc:FT},_T={kernelName:he,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:o}=s;i(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=r.reduce(((e,t)=>e*t)),u=Zu(a.shape,r,l),c=Qu(u.length,r.length),h=ec(a.shape,r,l),p=tc(o,r.length),d=nc(h,o,r.length),f=[],m=CC({inputs:{x:a},backend:n,attrs:{shape:u}}),g=MC({inputs:{x:m},backend:n,attrs:{perm:c}}),y=CC({inputs:{x:g},backend:n,attrs:{shape:h}}),b=FT({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const OT={kernelName:pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=f$(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}},MT=yC({opSnippet:"return float(a != b);",dtype:"bool"}),LT={kernelName:_t,backendName:"webgl",kernelFunc:MT};function zT(e){const{inputs:t,backend:n}=e,{input:s}=t;return iC({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const BT={kernelName:jt,backendName:"webgl",kernelFunc:zT};const PT={kernelName:de,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:r}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===r.dtype)return iC({inputs:{x:r},backend:s});const t=Mo(r.shape),n=e({inputs:{x:r},backend:s,attrs:{dtype:"float32"}}),a=lC({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===r.dtype){const t=zT({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!w(r.dtype,i)){const e=iC({inputs:{x:r},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new Y$(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",x("bool",1)),t=MT({inputs:{a:r,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${i}`)}},WT="return ceil(x);",VT=gC({opSnippet:WT,packedOpSnippet:WT,cpuKernelImpl:g$}),UT={kernelName:fe,backendName:"webgl",kernelFunc:VT};class GT{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class HT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const jT={kernelName:me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:r,clipValueMax:i}=s;let o;o=W().getBool("WEBGL_PACK_CLIP")?new HT(a.shape):new GT(a.shape);const l=o.getCustomSetupFunc(r,i);return n.runWebGLProgram(o,[a],a.dtype,l)}};class KT{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function qT(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const XT={kernelName:ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new KT(s.shape),i=[qT(s,a.complexTensorInfos.real),qT(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,i,i[0].dtype)}};class YT{constructor(e){this.outputShape=[],this.outputShape=Xu(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class JT{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Xu(e,t);const n=this.outputShape,s=n.length,a=u$(s),r=U$("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${ZT(i,l,t)}),\n            vec2(${ZT(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${ZT(i,l,d)}),\n          vec2(${ZT(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${r}), 0., 0., 0.);\n\n        ${r[s-1]} = ${r[s-1]} + 1;\n        if (${r[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${r});\n        }\n\n        ${r[s-2]} = ${r[s-2]} + 1;\n        if (${r[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${r});\n        }\n\n        ${r[s-1]} = ${r[s-1]} - 1;\n        if (${r[s-2]} < ${n[s-2]} &&\n            ${r[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${r});\n        }\n        setOutput(result);\n      }\n    `}}function ZT(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function QT(e){const{inputs:t,backend:n}=e,{input:s}=t;return iC({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const eS={kernelName:at,backendName:"webgl",kernelFunc:QT};function tS(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>zT({inputs:{input:e},backend:n}))),a=e.map((e=>QT({inputs:{input:e},backend:n}))),r=tS(s,t,n),i=tS(a,t,n),o=lC({inputs:{real:r,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:a,outShape:r}=nS(e,t,n),i=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===a[0].shape[0],l=y$(i,r,s,o),u=Xu(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>W().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),a=tS(e.slice(0,s),t,n),r=tS(e.slice(s),t,n),i=tS([a,r],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}if(W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new JT(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:a,outShape:r}=nS(e,t,n),i=new YT(a.map((e=>e.shape))),o=n.runWebGLProgram(i,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=CC({inputs:{x:o},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(o),l}function nS(e,t,n){const s=Xu(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>CC({inputs:{x:e},attrs:{shape:[-1,c(e.shape.slice(t))]},backend:n}))),outShape:s}}function sS(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=y(a,t[0].shape)[0],i=Xu(t.map((e=>e.shape)),r);if(0===c(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>c(e.shape)>0));if(1===o.length)return iC({inputs:{x:o[0]},backend:n});return qu(o.map((e=>e.shape)),r),tS(o,r,n)}const aS={kernelName:be,backendName:"webgl",kernelFunc:sS};class rS{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",k="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,k="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${k}\n        setOutput(result);\n      }\n    `}}class iS{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oS{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:a,strideWidth:r,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=a*s,m=RI(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${r}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${a}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${a}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function lS({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===d)&&h>1e3,b=u[2]%2!=0&&!!c.isPacked;if(!y&&W().getBool("WEBGL_LAZILY_UNPACK")&&W().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const h=f?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,i(vI(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=CC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=zC({a:p,b:y,backend:s,transposeA:false,transposeB:false,bias:a,activation:l,preluActivationWeights:r,leakyreluAlpha:o}),x=s.texData.get(b.dataId);i(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,x.shape=n.outShape,m=iC({inputs:{x:b},backend:s}),m.shape=n.outShape,g.push(b)}else{const i=CC({inputs:{x:e},backend:s,attrs:{shape:[1,f?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=CC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=zC({a:i,b:c,transposeA:false,transposeB:false,backend:s,bias:a,activation:l,preluActivationWeights:r,leakyreluAlpha:o});m=CC({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(i),g.push(c),g.push(h)}for(const e of g)s.disposeIntermediateTensorInfo(e);return m}function uS({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=l*u*h,y=d*p,b=[g,y],x=[],k=CC({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=CC({inputs:{x:t},backend:s,attrs:{shape:[1,g,c(t.shape)/g]}});x.push(k),x.push(w);const v=new oS(b,k.shape,n),N=s.runWebGLProgram(v,[k],"float32"),I=CC({inputs:{x:N},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(N),x.push(I);const $=null!=a,C=null!=r,T="leakyrelu"===o,S=o?bC(o,!0):null,E=new xC(I.shape,w.shape,[1,y,n.outChannels],!0,!1,$,S,C,T),A=[I,w];if(a&&A.push(a),C&&A.push(r),T){const e=s.makeTensorInfo([],"float32",Kn(i,"float32"));A.push(e),x.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=CC({inputs:{x:R},backend:s,attrs:{shape:m?[1,d,p,n.outChannels]:[1,n.outChannels,d,p]}});x.push(R);for(const e of x)s.disposeIntermediateTensorInfo(e);return F}const cS={kernelName:xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Gr(l),p=Or(a.shape,r.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(W().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])d=uS({x:a,filter:r,convInfo:p,backend:n});else{const e=new rS(p);d=n.runWebGLProgram(e,[a,r],"float32")}else d=lS({x:a,filter:r,convInfo:p,backend:n});const f=CC({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class hS{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pS{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dS{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fS{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const mS={kernelName:ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Gr(l),p=Or(a.shape,c,i,1,o,u,!1,h),d=new hS(p);return n.runWebGLProgram(d,[a,r],"float32")}};const gS={kernelName:we,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Gr(u),p=Or(i,r.shape,o,1,l,c,!1,h),d=new pS(p);return n.runWebGLProgram(d,[a,r],"float32")}};const yS={kernelName:ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=Mr(a.shape,r.shape,i,l,o),c=new iS(u);return n.runWebGLProgram(c,[a,r],"float32")}};const bS={kernelName:Ne,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s,u=Mr(a.shape,l,i,1,o),c=new dS(u);return n.runWebGLProgram(c,[a,r],"float32")}};const xS={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s,u=Mr(l,r.shape,o,1,i),c=new fS(u);return n.runWebGLProgram(c,[a,r],"float32")}},kS=gC({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),wS={kernelName:$e,backendName:"webgl",kernelFunc:kS},vS=gC({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),NS={kernelName:Ce,backendName:"webgl",kernelFunc:vS};class IS{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,k]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${k};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const $S={kernelName:Se,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new IS(a.shape,r.shape,o,l,u);return n.runWebGLProgram(c,[a,r,i],"float32")}};class CS{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,a=t?"0.0":`getX(${TS(s,"coords")})`,r=e[e.length-1];let i="",o="";t?(i=n?"end != "+(r-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${r}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${u$(s)} coords = getOutputCoords();\n        int end = ${SS(s,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${SS(s,"coords")} = idx;\n          val += getX(${TS(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function TS(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function SS(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const ES={kernelName:Te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s,l=a.shape.length,u=mo([r],l);let c=a;null!=u&&(c=MC({inputs:{x:a},backend:n,attrs:{perm:u}}));const h=yo(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=${r}`);const p=a.shape[h];let d=iC({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new CS(c.shape,!1,o),s=t.getCustomSetupFunc(e),a=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(a)}if(i){const e=new CS(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=MC({inputs:{x:d},backend:n,attrs:{perm:go(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const AS={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=f$(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=m$(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class RS{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const FS={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s;i(r>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${r}`));const l=a.shape[0],u="NHWC"===o?a.shape[1]:a.shape[2],c="NHWC"===o?a.shape[2]:a.shape[3],h="NHWC"===o?a.shape[3]:a.shape[1],p=u*r,d=c*r,f=h/(r*r),m=new RS("NHWC"===o?[l,p,d,f]:[l,f,p,d],r,o);return n.runWebGLProgram(m,[a],a.dtype)}};class DS{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${r}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class _S{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.inHeight,o=e.inWidth,l=e.padInfo.top,u=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<f;e++)for(let t=0;t<g;t++){const n=2*t;if(y+=`\n          xR = xRCorner + ${e*p};\n          xC = xCCorner + ${n*d};\n        `,1===h){if(n<m&&(y+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<m)){const t=u%2==0?r(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(y+=`\n                  xCOffset = xC + ${u%2} + ${t};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<m&&(y+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,u%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<m&&(y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),y+="}");n<m&&(y+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<m&&(y+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let b="",x="";n&&(b=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${k}\n        ${x}\n        setOutput(result);\n      }\n    `}}const OS={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),i(Ur(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const p=Or(a.shape,r.shape,o,h,l,c,!0);let d;return d=W().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new _S(p):new DS(p),n.runWebGLProgram(d,[a,r],"float32")}};class MS{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LS{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const zS={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Or(a.shape,c,i,o,l,u,!0),p=new MS(h);return n.runWebGLProgram(p,[a,r],"float32")}};const BS={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Or(c,r.shape,i,o,l,u,!0),p=new LS(h);return n.runWebGLProgram(p,[a,r],"float32")}};class PS{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const WS={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],r=c(s.shape),i=CC({inputs:{x:s},backend:n,attrs:{shape:[r]}}),o=new PS(r),l=n.runWebGLProgram(o,[i],i.dtype),u=CC({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class VS{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const US={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=Fr(a.shape,r.shape,i,o,"NHWC",l);let c;const h=new VS(u);c=n.runWebGLProgram(h,[a,r],"float32");const p=CC({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},GS=gC({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),HS={kernelName:Be,backendName:"webgl",kernelFunc:GS},jS={kernelName:Pe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,r=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rC("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new aC("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}},KS=yC({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),qS={kernelName:Ve,backendName:"webgl",kernelFunc:KS},XS=gC({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${rc};\n  float a1 = ${ic};\n  float a2 = ${oc};\n  float a3 = ${lc};\n  float a4 = ${uc};\n  float a5 = ${cc};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),YS={kernelName:We,backendName:"webgl",kernelFunc:XS},JS="return exp(x);",ZS=gC({opSnippet:JS,packedOpSnippet:JS,cpuKernelImpl:b$}),QS={kernelName:Ue,backendName:"webgl",kernelFunc:ZS};function eE(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:r}=t,o=r.shape.length,l=r.shape.slice();let u=a;return a<0&&(i(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),l.splice(u,0,1),CC({inputs:{x:r},backend:s,attrs:{shape:l}})}const tE={kernelName:Ge,backendName:"webgl",kernelFunc:eE},nE="return exp(x) - 1.0;",sE=gC({opSnippet:nE,packedOpSnippet:nE,cpuKernelImpl:x$}),aE={kernelName:He,backendName:"webgl",kernelFunc:sE};class rE{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function iE(e,t,n){const s=n.texData.get(e.dataId),a=c(e.shape),r=e.shape[e.shape.length-1],i=CC({inputs:{x:e},backend:n,attrs:{shape:[a/r,r]}}),o=i.shape,l=new rE("real",o,t),u=new rE("imag",o,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],p=n.runWebGLProgram(l,h,"float32"),d=n.runWebGLProgram(u,h,"float32"),f=lC({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=CC({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const oE={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return iE(s,!1,n)}};class lE{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function uE(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:r}=n;if(r=r||C(a),"string"===r){const e=k(r,c(s));return e.fill(a),t.makeTensorInfo(s,r,e)}{const e=new lE(s,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],r,n)}}const cE={kernelName:Ke,backendName:"webgl",kernelFunc:uE};class hE{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const pE={kernelName:qe,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new hE(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},dE="return floor(x);",fE=gC({opSnippet:dE,packedOpSnippet:dE,cpuKernelImpl:k$}),mE={kernelName:Xe,backendName:"webgl",kernelFunc:fE},gE=yC({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),yE={kernelName:Ye,backendName:"webgl",kernelFunc:gE};class bE{constructor(e){this.variableNames=["A"];const t=RI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=RI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const kE={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:r}=s,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap,[u,c]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,u],p=[c,u,r];(o||i||l)&&(null==wE&&(wE=document.createElement("canvas").getContext("2d")),wE.canvas.width=u,wE.canvas.height=c,wE.drawImage(a,0,0,u,c),a=wE.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=eI.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const f=W().getBool("WEBGL_PACK")?new xE(p):new bE(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let wE;const vE={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Gr(c),g=Or(a.shape,r.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(W().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])y=uS({x:a,filter:r,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?bC(d,!1):null,u=new rS(g,e,l,t,s),c=[a,r];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",Kn(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=lS({x:a,filter:r,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=CC({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const NE={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),i(Ur(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const y=Or(a.shape,r.shape,u,g,c,p,!0),b=W().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?bC(d,b):null,k=[a,r],w=null!=o,v=null!=l,N="leakyrelu"===d;if(w&&k.push(o),v&&k.push(l),N){const e=n.makeTensorInfo([],"float32",Kn(f,"float32"));k.push(e),m.push(e)}let I;I=b?new _S(y,w,x,v,N):new DS(y,w,x,v,N);const $=n.runWebGLProgram(I,k,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),$}};class IE{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=u$(t.length),a=u$(n.length),r=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${r};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const $E={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=a.shape,i=r[r.length-1],[o,l,u,h]=za(s,a),p=CC({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),d=CC({inputs:{x:s},backend:n,attrs:{shape:[c(s.shape)/u,u]}}),f=new IE(i,h,[l,u]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=CC({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class CE{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=u$(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const TE={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s,l=Nc(a,r,y(i,a.shape)[0],o),u=c(r.shape),h=[],p=CC({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=CC({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});h.push(p),h.push(d);const f=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=w$(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const m=new CE(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const b=CC({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},SE=yC({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:v$,dtype:"bool"}),EE={kernelName:et,backendName:"webgl",kernelFunc:SE},AE=yC({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),RE={kernelName:tt,backendName:"webgl",kernelFunc:AE};const FE={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return iE(s,!0,n)}},DE=gC({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),_E={kernelName:rt,backendName:"webgl",kernelFunc:DE},OE=gC({opSnippet:"return float(isinf(x));",dtype:"bool"}),ME={kernelName:it,backendName:"webgl",kernelFunc:OE},LE=gC({opSnippet:"return float(isnan(x));",dtype:"bool"}),zE={kernelName:ot,backendName:"webgl",kernelFunc:LE},BE=yC({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:N$,dtype:"bool"}),PE={kernelName:ut,backendName:"webgl",kernelFunc:BE},WE=yC({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),VE={kernelName:ct,backendName:"webgl",kernelFunc:WE};const UE={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=I$(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},GE=gC({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:$$}),HE={kernelName:pt,backendName:"webgl",kernelFunc:GE},jE=gC({opSnippet:"return log(1.0 + x);"}),KE={kernelName:dt,backendName:"webgl",kernelFunc:jE},qE=yC({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),XE={kernelName:ft,backendName:"webgl",kernelFunc:qE},YE=gC({opSnippet:"return float(!(x >= 1.0));"}),JE={kernelName:mt,backendName:"webgl",kernelFunc:YE},ZE=yC({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),QE={kernelName:gt,backendName:"webgl",kernelFunc:ZE};class eA{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class tA{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const nA={kernelName:yt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s,u=W().getBool("WEBGL_PACK_NORMALIZATION")?new tA(a.shape,r,i,o,l):new eA(a.shape,r,i,o,l);return n.runWebGLProgram(u,[a],a.dtype)}};class sA{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const aA={kernelName:bt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new sA(a.shape,o,l,u,c);return n.runWebGLProgram(h,[a,r,i],a.dtype)}};function rA(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=a.shape.length,l=y(r,a.shape);let u=l;const h=mo(u,o),p=null!=h,d=n.shouldExecuteOnCPU([a]);let f=a;if(p){if(d){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=a.shape[h[e]];const s=P$(e,a.shape,a.dtype,h,t);f=n.makeTensorInfo(t,a.dtype);n.texData.get(f.dataId).values=s}else f=DC(a,h,n);u=yo(u.length,o)}fo("max",u,o);const[m,g]=ho(f.shape,u);let b,x=m;if(i&&(x=po(m,l)),d){const e=n.texData.get(f.dataId).values,t=C$(e,c(g),x,a.dtype);b=n.makeTensorInfo(x,a.dtype);n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const a=c(t),r=CC({inputs:{x:e},attrs:{shape:[c(e.shape)/a,a]},backend:s}),i=AC(r,e.dtype,"max",s),o=CC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(f,g,x,n);return p&&n.disposeIntermediateTensorInfo(f),b}const iA={kernelName:xt,backendName:"webgl",kernelFunc:rA},oA=yC({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:T$}),lA={kernelName:kt,backendName:"webgl",kernelFunc:oA};const uA={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;EI(a,"maxPool");const{filterSize:r,strides:o,pad:l,dimRoundingMode:u}=s;i(Ur(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Dr(a.shape,r,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&h(c.inShape,c.outShape))return iC({inputs:{x:a},backend:n});const p=new yT(c,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};const cA={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=_r(a.shape,r,i,[1,1,1],o,u,l),h=new bT(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};class hA{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pA{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const dA={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=_r(i.shape,o,l,[1,1,1],u,c),p=new bT(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new pA(h),m=n.runWebGLProgram(f,[a,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const fA={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;EI([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Dr(o.shape,l,u,1,c,h),d=new yT(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new hA(p),g=n.runWebGLProgram(m,[a,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const mA={kernelName:$t,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:o,includeBatchInIndex:l}=t,u=n;i(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];i(Ur(r,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`));const h=Dr(s.shape,a,r,c,o),[p,d]=function(e,t,n,s){let a=new yT(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new yT(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,l,h,u);return[p,d]}};const gA={kernelName:Ct,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:r}=t,i=n,o=s.shape.length,l=y(r,s.shape);let u=l;const h=mo(u,o),p=null!=h,d=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(p){if(d){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[h[e]];const n=P$(e,s.shape,s.dtype,h,t);m=i.makeTensorInfo(t,s.dtype);i.texData.get(m.dataId).values=n}else m=DC(s,h,i);f.push(m),u=yo(u.length,o)}fo("sum",u,o);const[g,b]=ho(m.shape,u);let x=g;a&&(x=po(g,l));const k=function(e,t,n,s){const a=c(t),r=CC({inputs:{x:e},attrs:{shape:[c(e.shape)/a,a]},backend:s}),i=AC(r,"float32","mean",s),o=CC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(m,b,x,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return k}};const yA={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=y(r,a.shape);let u=l;const h=mo(u,o);let p=a;null!=h&&(p=MC({inputs:{x:a},backend:n,attrs:{perm:h}}),u=yo(u.length,a.shape.length)),fo("min",u,o);const[d,f]=ho(p.shape,u),m=CC({inputs:{x:p},backend:n,attrs:{shape:[-1,c(f)]}}),g=AC(m,m.dtype,"min",n);let b;if(i){b=CC({inputs:{x:g},backend:n,attrs:{shape:po(d,l)}})}else b=CC({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),b}},bA=yC({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:S$}),xA={kernelName:St,backendName:"webgl",kernelFunc:bA};class kA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=u$(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class wA{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=u$(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=U$("rc",s),l=U$("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const vA={kernelName:Et,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:r}=n,i=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wA(s.shape,a,r):new kA(s.shape,a,r);return t.runWebGLProgram(i,[s],s.dtype)}},NA=yC({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),IA={kernelName:At,backendName:"webgl",kernelFunc:NA};class $A{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const CA=yC({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),TA={kernelName:ze,backendName:"webgl",kernelFunc:CA},SA="return a - b;",EA=yC({opSnippet:SA,packedOpSnippet:SA,supportsComplex:!0,cpuKernelImpl:L$}),AA={kernelName:wn,backendName:"webgl",kernelFunc:EA};function RA(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=y([r],a.shape),o=rA({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=po(o.shape,i),u=CC({inputs:{x:o},backend:n,attrs:{shape:l}}),c=EA({inputs:{a:a,b:u},backend:n}),h=ZS({inputs:{x:c},backend:n}),p=_C({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=CC({inputs:{x:p},backend:n,attrs:{shape:l}}),f=CA({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const FA={kernelName:bn,backendName:"webgl",kernelFunc:RA};const DA={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s,l=o?a:RA({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new $A(u,c,r),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},_A="return -x;";const OA={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=A$(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Q$(s.shape,_A):new Y$(s.shape,_A),n.runWebGLProgram(a,[s],s.dtype)}},MA=gu;const LA={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),{selectedIndices:h}=MA(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},zA=yu;const BA={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),{selectedIndices:p,validOutputs:d}=zA(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},PA=bu;const WA={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=PA(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class VA{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const UA={kernelName:Bt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s,l=c(a.shape),u=new VA(l,r,i,o),h=CC({inputs:{x:a},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(u,[h],a.dtype);n.disposeIntermediateTensorInfo(h);const d=CC({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,r]}});return n.disposeIntermediateTensorInfo(p),d}};function GA(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=zT({inputs:{input:s},backend:n}),t=GA({inputs:{x:e},backend:n}),a=QT({inputs:{input:s},backend:n}),r=GA({inputs:{x:a},backend:n}),i=lC({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return uE({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const HA={kernelName:Fn,backendName:"webgl",kernelFunc:GA};const jA={kernelName:zt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=zT({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=QT({inputs:{input:a},backend:s}),i=GA({inputs:{x:r},backend:s}),o=lC({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return uE({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}};const KA={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return eE({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,l=t[0].dtype;t.forEach((e=>{o(r,e.shape,"All tensors passed to stack must have matching shapes"),i(l===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=sS({inputs:t.map((e=>{const t=eE({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class qA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=u$(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class XA{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=u$(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=U$("rc",s),l=U$("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const YA=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s,o=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XA(a.shape,r,i):new qA(a.shape,r,i);return n.runWebGLProgram(o,[a],a.dtype)},JA={kernelName:Wt,backendName:"webgl",kernelFunc:YA},ZA=yC({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),QA={kernelName:Vt,backendName:"webgl",kernelFunc:ZA};const eR={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=[],u=y(r,a.shape);let h=u;const p=mo(h,o);let d,f=a;if(null!=p&&(f=MC({inputs:{x:a},backend:n,attrs:{perm:p}}),h=yo(h.length,o),l.push(f)),fo("prod",h,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:a}=R$(f.shape,f.dtype,e,h);d=n.makeTensorInfo(s,a,t)}else{const[e,t]=ho(f.shape,h),s=c(t),r=CC({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=AC(r,xs(a.dtype),"prod",n);d=CC({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(r),l.push(i)}if(i){l.push(d);const e=po(d.shape,u);d=CC({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},tR=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:i}=n,o=F$(s,a,r,i);return t.makeTensorInfo([o.length],i,o)},nR={kernelName:Ht,backendName:"webgl",kernelFunc:tR},sR=gC({opSnippet:"return 1.0 / x;"}),aR={kernelName:Kt,backendName:"webgl",kernelFunc:sR},rR=gC({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),iR={kernelName:qt,backendName:"webgl",kernelFunc:rR},oR=gC({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),lR={kernelName:en,backendName:"webgl",kernelFunc:oR};class uR{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class cR{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const hR={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=W().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new cR(a.shape,l,u,r,i):new uR(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],"float32")}};class pR{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const dR={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new pR(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class fR{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const mR={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new fR(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],a.dtype)}};class gR{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const yR={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new gR(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class bR{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=u$(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class xR{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=U$("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=u$(n);function o(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const kR={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s,i=a.shape.length,o=y(r,a.shape);if(0===i)return iC({inputs:{x:a},backend:n});const l=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xR(a.shape,o):new bR(a.shape,o);return n.runWebGLProgram(l,[a],a.dtype)}};class wR{constructor(e,t,n,s){this.variableNames=["Image"],this.outputShape=[];const a=e[1],r=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=Ju(s,a,r),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${a}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const vR={kernelName:On,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=new wR(s.shape,a,r,i);return o.runWebGLProgram(l,[s],s.dtype)}},NR=gC({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),IR={kernelName:nn,backendName:"webgl",kernelFunc:NR},$R=gC({opSnippet:"return inversesqrt(x);",cpuKernelImpl:D$}),CR={kernelName:sn,backendName:"webgl",kernelFunc:$R};class TR{constructor(e,t,n,s,a,r,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const o=u$(a.length),l=u$(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const SR={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Wa(0,a,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,a.dtype);const d=CC({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=CC({inputs:{x:r},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new TR(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=CC({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class ER{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=i.join()}const r=u$(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const AR={kernelName:rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t,i=new ER(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[s,a,r],bs(a.dtype,r.dtype))}},RR=gC({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${ac};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),FR={kernelName:on,backendName:"webgl",kernelFunc:RR},DR=gC({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),_R={kernelName:pn,backendName:"webgl",kernelFunc:DR},OR=gC({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),MR={kernelName:hn,backendName:"webgl",kernelFunc:OR},LR=gC({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),zR={kernelName:un,backendName:"webgl",kernelFunc:LR},BR=gC({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),PR={kernelName:cn,backendName:"webgl",kernelFunc:BR},WR=gC({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),VR={kernelName:dn,backendName:"webgl",kernelFunc:WR},UR={kernelName:gn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:o}=s;i(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=r.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+r.length;e<a.shape.length;++e)u.push([0,0]);const c=[],h=YA({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),p=Zu(h.shape,r,l,!1),d=Qu(p.length,r.length,!1),f=ec(h.shape,r,l,!1),m=CC({inputs:{x:h},backend:n,attrs:{shape:p}}),g=MC({inputs:{x:m},backend:n,attrs:{perm:d}}),y=CC({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const GR={kernelName:vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=Wa(0,a,o),p=new TR(u,l,a.shape.length,r.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[r,a,i],r.dtype),f=CC({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const HR={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=y(i,a.shape)[0],l=kc(a,r,o),u=a.shape.length,c=new Array(u).fill(0),h=a.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=FT({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},jR=gC({opSnippet:"return sqrt(x);"}),KR={kernelName:fn,backendName:"webgl",kernelFunc:jR},qR={kernelName:kn,backendName:"webgl",kernelFunc:gC({opSnippet:"return x * x;"})},XR="return (a - b) * (a - b);",YR=yC({opSnippet:XR,packedOpSnippet:XR}),JR={kernelName:xn,backendName:"webgl",kernelFunc:YR};const ZR={kernelName:Dn,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new Y$(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class QR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=u$(n.length),r=u$(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const eF={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=sr(a.shape,r,i,o,l,u,c,h,p),x=CC({inputs:{x:a},backend:n,attrs:{shape:y}});let k;if(d){const e=FT({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});k=CC({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))k=n.makeTensorInfo(b,a.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=va(x.shape,x.dtype,e),s=M$(b,t,m,f);k=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new QR(f,m,b);k=n.runWebGLProgram(e,[x],x.dtype)}}const w=CC({inputs:{x:k},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(k),w}},tF=gC({opSnippet:"return tan(x);"}),nF={kernelName:In,backendName:"webgl",kernelFunc:tF},sF=gC({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),aF={kernelName:$n,backendName:"webgl",kernelFunc:sF};class rF{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=u$(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function iF(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;if("string"===a.dtype){const e=n.readSync(a.dataId).map((e=>Jn(e))),t=va(a.shape,a.dtype,e),s=z$(t,r);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new rF(a.shape,r);return n.runWebGLProgram(i,[a],a.dtype)}const oF={kernelName:Cn,backendName:"webgl",kernelFunc:iF};const lF={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s,o=n.readSync(a.dataId),[l,u]=B$(o,a.shape,a.dtype,r,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};const uF={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;EI(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(r.dataId),{outputValues:o,outputShape:l,indices:u}=W$(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const cF={kernelName:An,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a,o=i.shape.length,l=a.shape[r],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==r&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[r]=e;const t=FT({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=CC({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class hF{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,i=r*Math.ceil(a/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const pF=[nA,aA,BC,WC,UC,HC,qC,JC,ZC,QC,rT,iT,lT,cT,fT,pT,gT,kT,xT,NT,IT,$T,ST,_T,OT,PT,UT,jT,XT,uC,aS,mS,gS,cS,bS,xS,yS,wS,NS,$S,ES,AS,FS,zS,BS,OS,WS,US,HS,jS,qS,YS,QS,tE,aE,oE,cE,pE,mE,yE,kE,vE,NE,$E,TE,EE,RE,oC,FE,eS,_E,ME,zE,pC,PE,VE,UE,KE,HE,XE,JE,QE,iA,cA,uA,dA,fA,mA,lA,gA,yA,xA,vA,IA,DA,$C,OA,LA,BA,WA,LT,UA,jA,KA,JA,QA,mC,eR,nR,BT,TA,aR,lR,iR,TC,hR,dR,mR,yR,kR,vR,IR,CR,SR,AR,FR,_R,MR,zR,PR,DT,FA,VR,UR,GR,HR,KR,qR,JR,ZR,eF,AA,OC,nF,aF,oF,lF,LC,uF,cF,{kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s,o=a.shape.length,l=[];let u=0;const h=mo([u],o);let p=a;null!=h&&(p=MC({inputs:{x:a},backend:n,attrs:{perm:h}}),l.push(p),u=yo(1,o)[0]);const d=vc(p.shape,u,i),f=c([p.shape[u]]),m=CC({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=xs(a.dtype),y=(e,t,s,a,r)=>{const i=e.shape[0],o=e.shape[1],u=wc(o,r),c=new hF({windowSize:u,inSize:o,batchSize:i,numSegments:r},t),h=n.compileAndRun(c,[e,s],a);if(l.push(h),h.shape[1]===r)return h;const p=tR({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),d=iF({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return y(h,t,d,a,r)},b=CC({inputs:{x:y(m,"unsortedSegmentSum",r,g,i)},backend:n,attrs:{shape:d}});let x=b;if(null!=h){l.push(b);const e=go(h);x=MC({inputs:{x:x},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},HA];for(const e of pF)Gn(e);const dF=new Stats;let fF,mF,gF,yF,bF,xF;dF.showPanel(0),document.body.prepend(dF.domElement);const kF={backend:"webgl"};(new dat.GUI).add(kF,"backend",["webgl","cpu"]).onChange((async e=>{await dr(e)}));const wF=async()=>{dF.begin();const e=await fF.estimateFaces(bF,!1,!0,!0);if(e.length>0){mF.clearRect(0,0,xF.width,xF.height);for(let t=0;t<e.length;t++){const n=e[t].topLeft,s=e[t].bottomRight,a=[s[0]-n[0],s[1]-n[1]];mF.fillStyle="rgba(255, 0, 0, 0.5)",mF.fillRect(n[0],n[1],a[0],a[1]);{const n=e[t].landmarks;mF.fillStyle="blue";for(let e=0;e<n.length;e++){const t=n[e][0],s=n[e][1];mF.fillRect(t,s,5,5)}}}}dF.end(),requestAnimationFrame(wF)};(async()=>{await dr(kF.backend),await async function(){bF=document.getElementById("video");const e=await navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}});return bF.srcObject=e,new Promise((e=>{bF.onloadedmetadata=()=>{e(bF)}}))}(),bF.play(),gF=bF.videoWidth,yF=bF.videoHeight,bF.width=gF,bF.height=yF,xF=document.getElementById("output"),xF.width=gF,xF.height=yF,mF=xF.getContext("2d"),mF.fillStyle="rgba(255, 0, 0, 0.5)",fF=await function(e){var t=void 0===e?{}:e,n=t.maxFaces,s=void 0===n?10:n,a=t.inputWidth,r=void 0===a?128:a,i=t.inputHeight,o=void 0===i?128:i,l=t.iouThreshold,u=void 0===l?.3:l,c=t.scoreThreshold,h=void 0===c?.75:c;return zh(this,void 0,void 0,(function(){var e;return Bh(this,(function(t){switch(t.label){case 0:return[4,Lh("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1",{fromTFHub:!0})];case 1:return e=t.sent(),[2,new Gh(e,r,o,s,u,h)]}}))}))}(),wF()})()}));
